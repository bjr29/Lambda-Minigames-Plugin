/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/pubnub/dist/web/pubnub.min.js
var require_pubnub_min = __commonJS({
  "node_modules/pubnub/dist/web/pubnub.min.js"(exports, module2) {
    !function(e, t) {
      typeof exports == "object" && typeof module2 != "undefined" ? module2.exports = t() : typeof define == "function" && define.amd ? define(t) : (e = typeof globalThis != "undefined" ? globalThis : e || self).PubNub = t();
    }(exports, function() {
      "use strict";
      var e = function(t2, n2) {
        return e = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t3) {
          e2.__proto__ = t3;
        } || function(e2, t3) {
          for (var n3 in t3)
            Object.prototype.hasOwnProperty.call(t3, n3) && (e2[n3] = t3[n3]);
        }, e(t2, n2);
      };
      function t(t2, n2) {
        if (typeof n2 != "function" && n2 !== null)
          throw new TypeError("Class extends value " + String(n2) + " is not a constructor or null");
        function r2() {
          this.constructor = t2;
        }
        e(t2, n2), t2.prototype = n2 === null ? Object.create(n2) : (r2.prototype = n2.prototype, new r2());
      }
      var n = function() {
        return n = Object.assign || function(e2) {
          for (var t2, n2 = 1, r2 = arguments.length; n2 < r2; n2++)
            for (var i2 in t2 = arguments[n2])
              Object.prototype.hasOwnProperty.call(t2, i2) && (e2[i2] = t2[i2]);
          return e2;
        }, n.apply(this, arguments);
      };
      function r(e2, t2) {
        var n2 = {};
        for (var r2 in e2)
          Object.prototype.hasOwnProperty.call(e2, r2) && t2.indexOf(r2) < 0 && (n2[r2] = e2[r2]);
        if (e2 != null && typeof Object.getOwnPropertySymbols == "function") {
          var i2 = 0;
          for (r2 = Object.getOwnPropertySymbols(e2); i2 < r2.length; i2++)
            t2.indexOf(r2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, r2[i2]) && (n2[r2[i2]] = e2[r2[i2]]);
        }
        return n2;
      }
      function i(e2, t2, n2, r2) {
        return new (n2 || (n2 = Promise))(function(i2, o2) {
          function s2(e3) {
            try {
              u2(r2.next(e3));
            } catch (e4) {
              o2(e4);
            }
          }
          function a2(e3) {
            try {
              u2(r2.throw(e3));
            } catch (e4) {
              o2(e4);
            }
          }
          function u2(e3) {
            var t3;
            e3.done ? i2(e3.value) : (t3 = e3.value, t3 instanceof n2 ? t3 : new n2(function(e4) {
              e4(t3);
            })).then(s2, a2);
          }
          u2((r2 = r2.apply(e2, t2 || [])).next());
        });
      }
      function o(e2, t2) {
        var n2, r2, i2, o2, s2 = { label: 0, sent: function() {
          if (1 & i2[0])
            throw i2[1];
          return i2[1];
        }, trys: [], ops: [] };
        return o2 = { next: a2(0), throw: a2(1), return: a2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
          return this;
        }), o2;
        function a2(o3) {
          return function(a3) {
            return function(o4) {
              if (n2)
                throw new TypeError("Generator is already executing.");
              for (; s2; )
                try {
                  if (n2 = 1, r2 && (i2 = 2 & o4[0] ? r2.return : o4[0] ? r2.throw || ((i2 = r2.return) && i2.call(r2), 0) : r2.next) && !(i2 = i2.call(r2, o4[1])).done)
                    return i2;
                  switch (r2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                    case 0:
                    case 1:
                      i2 = o4;
                      break;
                    case 4:
                      return s2.label++, { value: o4[1], done: false };
                    case 5:
                      s2.label++, r2 = o4[1], o4 = [0];
                      continue;
                    case 7:
                      o4 = s2.ops.pop(), s2.trys.pop();
                      continue;
                    default:
                      if (!(i2 = s2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                        s2 = 0;
                        continue;
                      }
                      if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                        s2.label = o4[1];
                        break;
                      }
                      if (o4[0] === 6 && s2.label < i2[1]) {
                        s2.label = i2[1], i2 = o4;
                        break;
                      }
                      if (i2 && s2.label < i2[2]) {
                        s2.label = i2[2], s2.ops.push(o4);
                        break;
                      }
                      i2[2] && s2.ops.pop(), s2.trys.pop();
                      continue;
                  }
                  o4 = t2.call(e2, s2);
                } catch (e3) {
                  o4 = [6, e3], r2 = 0;
                } finally {
                  n2 = i2 = 0;
                }
              if (5 & o4[0])
                throw o4[1];
              return { value: o4[0] ? o4[1] : void 0, done: true };
            }([o3, a3]);
          };
        }
      }
      function s(e2) {
        var t2 = typeof Symbol == "function" && Symbol.iterator, n2 = t2 && e2[t2], r2 = 0;
        if (n2)
          return n2.call(e2);
        if (e2 && typeof e2.length == "number")
          return { next: function() {
            return e2 && r2 >= e2.length && (e2 = void 0), { value: e2 && e2[r2++], done: !e2 };
          } };
        throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }
      function a(e2, t2) {
        var n2 = typeof Symbol == "function" && e2[Symbol.iterator];
        if (!n2)
          return e2;
        var r2, i2, o2 = n2.call(e2), s2 = [];
        try {
          for (; (t2 === void 0 || t2-- > 0) && !(r2 = o2.next()).done; )
            s2.push(r2.value);
        } catch (e3) {
          i2 = { error: e3 };
        } finally {
          try {
            r2 && !r2.done && (n2 = o2.return) && n2.call(o2);
          } finally {
            if (i2)
              throw i2.error;
          }
        }
        return s2;
      }
      function u(e2, t2, n2) {
        if (n2 || arguments.length === 2)
          for (var r2, i2 = 0, o2 = t2.length; i2 < o2; i2++)
            !r2 && i2 in t2 || (r2 || (r2 = Array.prototype.slice.call(t2, 0, i2)), r2[i2] = t2[i2]);
        return e2.concat(r2 || Array.prototype.slice.call(t2));
      }
      var c = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {}, l = { exports: {} };
      !function(e2) {
        !function(t2, n2) {
          var r2 = Math.pow(2, -24), i2 = Math.pow(2, 32), o2 = Math.pow(2, 53);
          var s2 = { encode: function(e3) {
            var t3, r3 = new ArrayBuffer(256), s3 = new DataView(r3), a2 = 0;
            function u2(e4) {
              for (var n3 = r3.byteLength, i3 = a2 + e4; n3 < i3; )
                n3 *= 2;
              if (n3 !== r3.byteLength) {
                var o3 = s3;
                r3 = new ArrayBuffer(n3), s3 = new DataView(r3);
                for (var u3 = a2 + 3 >> 2, c3 = 0; c3 < u3; ++c3)
                  s3.setUint32(4 * c3, o3.getUint32(4 * c3));
              }
              return t3 = e4, s3;
            }
            function c2() {
              a2 += t3;
            }
            function l2(e4) {
              c2(u2(1).setUint8(a2, e4));
            }
            function p2(e4) {
              for (var t4 = u2(e4.length), n3 = 0; n3 < e4.length; ++n3)
                t4.setUint8(a2 + n3, e4[n3]);
              c2();
            }
            function h2(e4, t4) {
              t4 < 24 ? l2(e4 << 5 | t4) : t4 < 256 ? (l2(e4 << 5 | 24), l2(t4)) : t4 < 65536 ? (l2(e4 << 5 | 25), function(e5) {
                c2(u2(2).setUint16(a2, e5));
              }(t4)) : t4 < 4294967296 ? (l2(e4 << 5 | 26), function(e5) {
                c2(u2(4).setUint32(a2, e5));
              }(t4)) : (l2(e4 << 5 | 27), function(e5) {
                var t5 = e5 % i2, n3 = (e5 - t5) / i2, r4 = u2(8);
                r4.setUint32(a2, n3), r4.setUint32(a2 + 4, t5), c2();
              }(t4));
            }
            if (function e4(t4) {
              var r4;
              if (t4 === false)
                return l2(244);
              if (t4 === true)
                return l2(245);
              if (t4 === null)
                return l2(246);
              if (t4 === n2)
                return l2(247);
              switch (typeof t4) {
                case "number":
                  if (Math.floor(t4) === t4) {
                    if (0 <= t4 && t4 <= o2)
                      return h2(0, t4);
                    if (-o2 <= t4 && t4 < 0)
                      return h2(1, -(t4 + 1));
                  }
                  return l2(251), function(e5) {
                    c2(u2(8).setFloat64(a2, e5));
                  }(t4);
                case "string":
                  var i3 = [];
                  for (r4 = 0; r4 < t4.length; ++r4) {
                    var s4 = t4.charCodeAt(r4);
                    s4 < 128 ? i3.push(s4) : s4 < 2048 ? (i3.push(192 | s4 >> 6), i3.push(128 | 63 & s4)) : s4 < 55296 ? (i3.push(224 | s4 >> 12), i3.push(128 | s4 >> 6 & 63), i3.push(128 | 63 & s4)) : (s4 = (1023 & s4) << 10, s4 |= 1023 & t4.charCodeAt(++r4), s4 += 65536, i3.push(240 | s4 >> 18), i3.push(128 | s4 >> 12 & 63), i3.push(128 | s4 >> 6 & 63), i3.push(128 | 63 & s4));
                  }
                  return h2(3, i3.length), p2(i3);
                default:
                  var f3;
                  if (Array.isArray(t4))
                    for (h2(4, f3 = t4.length), r4 = 0; r4 < f3; ++r4)
                      e4(t4[r4]);
                  else if (t4 instanceof Uint8Array)
                    h2(2, t4.length), p2(t4);
                  else {
                    var d3 = Object.keys(t4);
                    for (h2(5, f3 = d3.length), r4 = 0; r4 < f3; ++r4) {
                      var g3 = d3[r4];
                      e4(g3), e4(t4[g3]);
                    }
                  }
              }
            }(e3), "slice" in r3)
              return r3.slice(0, a2);
            for (var f2 = new ArrayBuffer(a2), d2 = new DataView(f2), g2 = 0; g2 < a2; ++g2)
              d2.setUint8(g2, s3.getUint8(g2));
            return f2;
          }, decode: function(e3, t3, o3) {
            var s3 = new DataView(e3), a2 = 0;
            function u2(e4, t4) {
              return a2 += t4, e4;
            }
            function c2(t4) {
              return u2(new Uint8Array(e3, a2, t4), t4);
            }
            function l2() {
              return u2(s3.getUint8(a2), 1);
            }
            function p2() {
              return u2(s3.getUint16(a2), 2);
            }
            function h2() {
              return u2(s3.getUint32(a2), 4);
            }
            function f2() {
              return s3.getUint8(a2) === 255 && (a2 += 1, true);
            }
            function d2(e4) {
              if (e4 < 24)
                return e4;
              if (e4 === 24)
                return l2();
              if (e4 === 25)
                return p2();
              if (e4 === 26)
                return h2();
              if (e4 === 27)
                return h2() * i2 + h2();
              if (e4 === 31)
                return -1;
              throw "Invalid length encoding";
            }
            function g2(e4) {
              var t4 = l2();
              if (t4 === 255)
                return -1;
              var n3 = d2(31 & t4);
              if (n3 < 0 || t4 >> 5 !== e4)
                throw "Invalid indefinite length element";
              return n3;
            }
            function y2(e4, t4) {
              for (var n3 = 0; n3 < t4; ++n3) {
                var r3 = l2();
                128 & r3 && (r3 < 224 ? (r3 = (31 & r3) << 6 | 63 & l2(), t4 -= 1) : r3 < 240 ? (r3 = (15 & r3) << 12 | (63 & l2()) << 6 | 63 & l2(), t4 -= 2) : (r3 = (15 & r3) << 18 | (63 & l2()) << 12 | (63 & l2()) << 6 | 63 & l2(), t4 -= 3)), r3 < 65536 ? e4.push(r3) : (r3 -= 65536, e4.push(55296 | r3 >> 10), e4.push(56320 | 1023 & r3));
              }
            }
            typeof t3 != "function" && (t3 = function(e4) {
              return e4;
            }), typeof o3 != "function" && (o3 = function() {
              return n2;
            });
            var b2 = function e4() {
              var i3, h3, b3 = l2(), v2 = b3 >> 5, m2 = 31 & b3;
              if (v2 === 7)
                switch (m2) {
                  case 25:
                    return function() {
                      var e5 = new ArrayBuffer(4), t4 = new DataView(e5), n3 = p2(), i4 = 32768 & n3, o4 = 31744 & n3, s4 = 1023 & n3;
                      if (o4 === 31744)
                        o4 = 261120;
                      else if (o4 !== 0)
                        o4 += 114688;
                      else if (s4 !== 0)
                        return s4 * r2;
                      return t4.setUint32(0, i4 << 16 | o4 << 13 | s4 << 13), t4.getFloat32(0);
                    }();
                  case 26:
                    return u2(s3.getFloat32(a2), 4);
                  case 27:
                    return u2(s3.getFloat64(a2), 8);
                }
              if ((h3 = d2(m2)) < 0 && (v2 < 2 || 6 < v2))
                throw "Invalid length";
              switch (v2) {
                case 0:
                  return h3;
                case 1:
                  return -1 - h3;
                case 2:
                  if (h3 < 0) {
                    for (var _2 = [], O2 = 0; (h3 = g2(v2)) >= 0; )
                      O2 += h3, _2.push(c2(h3));
                    var P2 = new Uint8Array(O2), S2 = 0;
                    for (i3 = 0; i3 < _2.length; ++i3)
                      P2.set(_2[i3], S2), S2 += _2[i3].length;
                    return P2;
                  }
                  return c2(h3);
                case 3:
                  var w2 = [];
                  if (h3 < 0)
                    for (; (h3 = g2(v2)) >= 0; )
                      y2(w2, h3);
                  else
                    y2(w2, h3);
                  return String.fromCharCode.apply(null, w2);
                case 4:
                  var T2;
                  if (h3 < 0)
                    for (T2 = []; !f2(); )
                      T2.push(e4());
                  else
                    for (T2 = new Array(h3), i3 = 0; i3 < h3; ++i3)
                      T2[i3] = e4();
                  return T2;
                case 5:
                  var k2 = {};
                  for (i3 = 0; i3 < h3 || h3 < 0 && !f2(); ++i3) {
                    k2[e4()] = e4();
                  }
                  return k2;
                case 6:
                  return t3(e4(), h3);
                case 7:
                  switch (h3) {
                    case 20:
                      return false;
                    case 21:
                      return true;
                    case 22:
                      return null;
                    case 23:
                      return n2;
                    default:
                      return o3(h3);
                  }
              }
            }();
            if (a2 !== e3.byteLength)
              throw "Remaining bytes";
            return b2;
          } };
          e2.exports ? e2.exports = s2 : t2.CBOR || (t2.CBOR = s2);
        }(c);
      }(l);
      var p = l.exports, h = { exports: {} };
      !function(e2, t2) {
        !function(e3) {
          var t3 = "0.1.0", n2 = { 3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i, 4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i, 5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i, all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i };
          function r2() {
            var e4, t4, n3 = "";
            for (e4 = 0; e4 < 32; e4++)
              t4 = 16 * Math.random() | 0, e4 !== 8 && e4 !== 12 && e4 !== 16 && e4 !== 20 || (n3 += "-"), n3 += (e4 === 12 ? 4 : e4 === 16 ? 3 & t4 | 8 : t4).toString(16);
            return n3;
          }
          function i2(e4, t4) {
            var r3 = n2[t4 || "all"];
            return r3 && r3.test(e4) || false;
          }
          r2.isUUID = i2, r2.VERSION = t3, e3.uuid = r2, e3.isUUID = i2;
        }(t2), e2 !== null && (e2.exports = t2.uuid);
      }(h, h.exports);
      var f, d, g, y, b, v = h.exports, m = function() {
        return v.uuid ? v.uuid() : v();
      }, _ = function() {
        function e2(e3) {
          var t2, n2, r2, i2 = e3.setup;
          if (this._PNSDKSuffix = {}, this.instanceId = "pn-".concat(m()), this.secretKey = i2.secretKey || i2.secret_key, this.subscribeKey = i2.subscribeKey || i2.subscribe_key, this.publishKey = i2.publishKey || i2.publish_key, this.sdkName = i2.sdkName, this.sdkFamily = i2.sdkFamily, this.partnerId = i2.partnerId, this.setAuthKey(i2.authKey), this.setCipherKey(i2.cipherKey), this.setFilterExpression(i2.filterExpression), typeof i2.origin != "string" && !Array.isArray(i2.origin) && i2.origin !== void 0)
            throw new Error("Origin must be either undefined, a string or a list of strings.");
          this.origin = i2.origin || Array.from({ length: 20 }, function(e4, t3) {
            return "ps".concat(t3 + 1, ".pndsn.com");
          }), this.secure = i2.ssl || false, this.restore = i2.restore || false, this.proxy = i2.proxy, this.keepAlive = i2.keepAlive, this.keepAliveSettings = i2.keepAliveSettings, this.autoNetworkDetection = i2.autoNetworkDetection || false, this.dedupeOnSubscribe = i2.dedupeOnSubscribe || false, this.maximumCacheSize = i2.maximumCacheSize || 100, this.customEncrypt = i2.customEncrypt, this.customDecrypt = i2.customDecrypt, this.fileUploadPublishRetryLimit = (t2 = i2.fileUploadPublishRetryLimit) !== null && t2 !== void 0 ? t2 : 5, this.useRandomIVs = (n2 = i2.useRandomIVs) === null || n2 === void 0 || n2, this.enableSubscribeBeta = (r2 = i2.enableSubscribeBeta) !== null && r2 !== void 0 && r2, typeof location != "undefined" && location.protocol === "https:" && (this.secure = true), this.logVerbosity = i2.logVerbosity || false, this.suppressLeaveEvents = i2.suppressLeaveEvents || false, this.announceFailedHeartbeats = i2.announceFailedHeartbeats || true, this.announceSuccessfulHeartbeats = i2.announceSuccessfulHeartbeats || false, this.useInstanceId = i2.useInstanceId || false, this.useRequestId = i2.useRequestId || false, this.requestMessageCountThreshold = i2.requestMessageCountThreshold, this.setTransactionTimeout(i2.transactionalRequestTimeout || 15e3), this.setSubscribeTimeout(i2.subscribeRequestTimeout || 31e4), this.setSendBeaconConfig(i2.useSendBeacon || true), i2.presenceTimeout ? this.setPresenceTimeout(i2.presenceTimeout) : this._presenceTimeout = 300, i2.heartbeatInterval != null && this.setHeartbeatInterval(i2.heartbeatInterval), this.setUUID(i2.uuid);
        }
        return e2.prototype.getAuthKey = function() {
          return this.authKey;
        }, e2.prototype.setAuthKey = function(e3) {
          return this.authKey = e3, this;
        }, e2.prototype.setCipherKey = function(e3) {
          return this.cipherKey = e3, this;
        }, e2.prototype.getUUID = function() {
          return this.UUID;
        }, e2.prototype.setUUID = function(e3) {
          if (!e3 || typeof e3 != "string" || e3.trim().length === 0)
            throw new Error("Missing uuid parameter. Provide a valid string uuid");
          return this.UUID = e3, this;
        }, e2.prototype.getFilterExpression = function() {
          return this.filterExpression;
        }, e2.prototype.setFilterExpression = function(e3) {
          return this.filterExpression = e3, this;
        }, e2.prototype.getPresenceTimeout = function() {
          return this._presenceTimeout;
        }, e2.prototype.setPresenceTimeout = function(e3) {
          return e3 >= 20 ? this._presenceTimeout = e3 : (this._presenceTimeout = 20, console.log("WARNING: Presence timeout is less than the minimum. Using minimum value: ", this._presenceTimeout)), this.setHeartbeatInterval(this._presenceTimeout / 2 - 1), this;
        }, e2.prototype.setProxy = function(e3) {
          this.proxy = e3;
        }, e2.prototype.getHeartbeatInterval = function() {
          return this._heartbeatInterval;
        }, e2.prototype.setHeartbeatInterval = function(e3) {
          return this._heartbeatInterval = e3, this;
        }, e2.prototype.getSubscribeTimeout = function() {
          return this._subscribeRequestTimeout;
        }, e2.prototype.setSubscribeTimeout = function(e3) {
          return this._subscribeRequestTimeout = e3, this;
        }, e2.prototype.getTransactionTimeout = function() {
          return this._transactionalRequestTimeout;
        }, e2.prototype.setTransactionTimeout = function(e3) {
          return this._transactionalRequestTimeout = e3, this;
        }, e2.prototype.isSendBeaconEnabled = function() {
          return this._useSendBeacon;
        }, e2.prototype.setSendBeaconConfig = function(e3) {
          return this._useSendBeacon = e3, this;
        }, e2.prototype.getVersion = function() {
          return "7.1.1";
        }, e2.prototype._addPnsdkSuffix = function(e3, t2) {
          this._PNSDKSuffix[e3] = t2;
        }, e2.prototype._getPnsdkSuffix = function(e3) {
          var t2 = this;
          return Object.keys(this._PNSDKSuffix).reduce(function(n2, r2) {
            return n2 + e3 + t2._PNSDKSuffix[r2];
          }, "");
        }, e2;
      }(), O = O || function(e2, t2) {
        var n2 = {}, r2 = n2.lib = {}, i2 = function() {
        }, o2 = r2.Base = { extend: function(e3) {
          i2.prototype = this;
          var t3 = new i2();
          return e3 && t3.mixIn(e3), t3.hasOwnProperty("init") || (t3.init = function() {
            t3.$super.init.apply(this, arguments);
          }), t3.init.prototype = t3, t3.$super = this, t3;
        }, create: function() {
          var e3 = this.extend();
          return e3.init.apply(e3, arguments), e3;
        }, init: function() {
        }, mixIn: function(e3) {
          for (var t3 in e3)
            e3.hasOwnProperty(t3) && (this[t3] = e3[t3]);
          e3.hasOwnProperty("toString") && (this.toString = e3.toString);
        }, clone: function() {
          return this.init.prototype.extend(this);
        } }, s2 = r2.WordArray = o2.extend({ init: function(e3, t3) {
          e3 = this.words = e3 || [], this.sigBytes = t3 != null ? t3 : 4 * e3.length;
        }, toString: function(e3) {
          return (e3 || u2).stringify(this);
        }, concat: function(e3) {
          var t3 = this.words, n3 = e3.words, r3 = this.sigBytes;
          if (e3 = e3.sigBytes, this.clamp(), r3 % 4)
            for (var i3 = 0; i3 < e3; i3++)
              t3[r3 + i3 >>> 2] |= (n3[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255) << 24 - (r3 + i3) % 4 * 8;
          else if (65535 < n3.length)
            for (i3 = 0; i3 < e3; i3 += 4)
              t3[r3 + i3 >>> 2] = n3[i3 >>> 2];
          else
            t3.push.apply(t3, n3);
          return this.sigBytes += e3, this;
        }, clamp: function() {
          var t3 = this.words, n3 = this.sigBytes;
          t3[n3 >>> 2] &= 4294967295 << 32 - n3 % 4 * 8, t3.length = e2.ceil(n3 / 4);
        }, clone: function() {
          var e3 = o2.clone.call(this);
          return e3.words = this.words.slice(0), e3;
        }, random: function(t3) {
          for (var n3 = [], r3 = 0; r3 < t3; r3 += 4)
            n3.push(4294967296 * e2.random() | 0);
          return new s2.init(n3, t3);
        } }), a2 = n2.enc = {}, u2 = a2.Hex = { stringify: function(e3) {
          var t3 = e3.words;
          e3 = e3.sigBytes;
          for (var n3 = [], r3 = 0; r3 < e3; r3++) {
            var i3 = t3[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
            n3.push((i3 >>> 4).toString(16)), n3.push((15 & i3).toString(16));
          }
          return n3.join("");
        }, parse: function(e3) {
          for (var t3 = e3.length, n3 = [], r3 = 0; r3 < t3; r3 += 2)
            n3[r3 >>> 3] |= parseInt(e3.substr(r3, 2), 16) << 24 - r3 % 8 * 4;
          return new s2.init(n3, t3 / 2);
        } }, c2 = a2.Latin1 = { stringify: function(e3) {
          var t3 = e3.words;
          e3 = e3.sigBytes;
          for (var n3 = [], r3 = 0; r3 < e3; r3++)
            n3.push(String.fromCharCode(t3[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255));
          return n3.join("");
        }, parse: function(e3) {
          for (var t3 = e3.length, n3 = [], r3 = 0; r3 < t3; r3++)
            n3[r3 >>> 2] |= (255 & e3.charCodeAt(r3)) << 24 - r3 % 4 * 8;
          return new s2.init(n3, t3);
        } }, l2 = a2.Utf8 = { stringify: function(e3) {
          try {
            return decodeURIComponent(escape(c2.stringify(e3)));
          } catch (e4) {
            throw Error("Malformed UTF-8 data");
          }
        }, parse: function(e3) {
          return c2.parse(unescape(encodeURIComponent(e3)));
        } }, p2 = r2.BufferedBlockAlgorithm = o2.extend({ reset: function() {
          this._data = new s2.init(), this._nDataBytes = 0;
        }, _append: function(e3) {
          typeof e3 == "string" && (e3 = l2.parse(e3)), this._data.concat(e3), this._nDataBytes += e3.sigBytes;
        }, _process: function(t3) {
          var n3 = this._data, r3 = n3.words, i3 = n3.sigBytes, o3 = this.blockSize, a3 = i3 / (4 * o3);
          if (t3 = (a3 = t3 ? e2.ceil(a3) : e2.max((0 | a3) - this._minBufferSize, 0)) * o3, i3 = e2.min(4 * t3, i3), t3) {
            for (var u3 = 0; u3 < t3; u3 += o3)
              this._doProcessBlock(r3, u3);
            u3 = r3.splice(0, t3), n3.sigBytes -= i3;
          }
          return new s2.init(u3, i3);
        }, clone: function() {
          var e3 = o2.clone.call(this);
          return e3._data = this._data.clone(), e3;
        }, _minBufferSize: 0 });
        r2.Hasher = p2.extend({ cfg: o2.extend(), init: function(e3) {
          this.cfg = this.cfg.extend(e3), this.reset();
        }, reset: function() {
          p2.reset.call(this), this._doReset();
        }, update: function(e3) {
          return this._append(e3), this._process(), this;
        }, finalize: function(e3) {
          return e3 && this._append(e3), this._doFinalize();
        }, blockSize: 16, _createHelper: function(e3) {
          return function(t3, n3) {
            return new e3.init(n3).finalize(t3);
          };
        }, _createHmacHelper: function(e3) {
          return function(t3, n3) {
            return new h2.HMAC.init(e3, n3).finalize(t3);
          };
        } });
        var h2 = n2.algo = {};
        return n2;
      }(Math);
      !function(e2) {
        for (var t2 = O, n2 = (i2 = t2.lib).WordArray, r2 = i2.Hasher, i2 = t2.algo, o2 = [], s2 = [], a2 = function(e3) {
          return 4294967296 * (e3 - (0 | e3)) | 0;
        }, u2 = 2, c2 = 0; 64 > c2; ) {
          var l2;
          e: {
            l2 = u2;
            for (var p2 = e2.sqrt(l2), h2 = 2; h2 <= p2; h2++)
              if (!(l2 % h2)) {
                l2 = false;
                break e;
              }
            l2 = true;
          }
          l2 && (8 > c2 && (o2[c2] = a2(e2.pow(u2, 0.5))), s2[c2] = a2(e2.pow(u2, 1 / 3)), c2++), u2++;
        }
        var f2 = [];
        i2 = i2.SHA256 = r2.extend({ _doReset: function() {
          this._hash = new n2.init(o2.slice(0));
        }, _doProcessBlock: function(e3, t3) {
          for (var n3 = this._hash.words, r3 = n3[0], i3 = n3[1], o3 = n3[2], a3 = n3[3], u3 = n3[4], c3 = n3[5], l3 = n3[6], p3 = n3[7], h3 = 0; 64 > h3; h3++) {
            if (16 > h3)
              f2[h3] = 0 | e3[t3 + h3];
            else {
              var d2 = f2[h3 - 15], g2 = f2[h3 - 2];
              f2[h3] = ((d2 << 25 | d2 >>> 7) ^ (d2 << 14 | d2 >>> 18) ^ d2 >>> 3) + f2[h3 - 7] + ((g2 << 15 | g2 >>> 17) ^ (g2 << 13 | g2 >>> 19) ^ g2 >>> 10) + f2[h3 - 16];
            }
            d2 = p3 + ((u3 << 26 | u3 >>> 6) ^ (u3 << 21 | u3 >>> 11) ^ (u3 << 7 | u3 >>> 25)) + (u3 & c3 ^ ~u3 & l3) + s2[h3] + f2[h3], g2 = ((r3 << 30 | r3 >>> 2) ^ (r3 << 19 | r3 >>> 13) ^ (r3 << 10 | r3 >>> 22)) + (r3 & i3 ^ r3 & o3 ^ i3 & o3), p3 = l3, l3 = c3, c3 = u3, u3 = a3 + d2 | 0, a3 = o3, o3 = i3, i3 = r3, r3 = d2 + g2 | 0;
          }
          n3[0] = n3[0] + r3 | 0, n3[1] = n3[1] + i3 | 0, n3[2] = n3[2] + o3 | 0, n3[3] = n3[3] + a3 | 0, n3[4] = n3[4] + u3 | 0, n3[5] = n3[5] + c3 | 0, n3[6] = n3[6] + l3 | 0, n3[7] = n3[7] + p3 | 0;
        }, _doFinalize: function() {
          var t3 = this._data, n3 = t3.words, r3 = 8 * this._nDataBytes, i3 = 8 * t3.sigBytes;
          return n3[i3 >>> 5] |= 128 << 24 - i3 % 32, n3[14 + (i3 + 64 >>> 9 << 4)] = e2.floor(r3 / 4294967296), n3[15 + (i3 + 64 >>> 9 << 4)] = r3, t3.sigBytes = 4 * n3.length, this._process(), this._hash;
        }, clone: function() {
          var e3 = r2.clone.call(this);
          return e3._hash = this._hash.clone(), e3;
        } });
        t2.SHA256 = r2._createHelper(i2), t2.HmacSHA256 = r2._createHmacHelper(i2);
      }(Math), d = (f = O).enc.Utf8, f.algo.HMAC = f.lib.Base.extend({ init: function(e2, t2) {
        e2 = this._hasher = new e2.init(), typeof t2 == "string" && (t2 = d.parse(t2));
        var n2 = e2.blockSize, r2 = 4 * n2;
        t2.sigBytes > r2 && (t2 = e2.finalize(t2)), t2.clamp();
        for (var i2 = this._oKey = t2.clone(), o2 = this._iKey = t2.clone(), s2 = i2.words, a2 = o2.words, u2 = 0; u2 < n2; u2++)
          s2[u2] ^= 1549556828, a2[u2] ^= 909522486;
        i2.sigBytes = o2.sigBytes = r2, this.reset();
      }, reset: function() {
        var e2 = this._hasher;
        e2.reset(), e2.update(this._iKey);
      }, update: function(e2) {
        return this._hasher.update(e2), this;
      }, finalize: function(e2) {
        var t2 = this._hasher;
        return e2 = t2.finalize(e2), t2.reset(), t2.finalize(this._oKey.clone().concat(e2));
      } }), y = (g = O).lib.WordArray, g.enc.Base64 = { stringify: function(e2) {
        var t2 = e2.words, n2 = e2.sigBytes, r2 = this._map;
        e2.clamp(), e2 = [];
        for (var i2 = 0; i2 < n2; i2 += 3)
          for (var o2 = (t2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) << 16 | (t2[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255) << 8 | t2[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255, s2 = 0; 4 > s2 && i2 + 0.75 * s2 < n2; s2++)
            e2.push(r2.charAt(o2 >>> 6 * (3 - s2) & 63));
        if (t2 = r2.charAt(64))
          for (; e2.length % 4; )
            e2.push(t2);
        return e2.join("");
      }, parse: function(e2) {
        var t2 = e2.length, n2 = this._map;
        (r2 = n2.charAt(64)) && (r2 = e2.indexOf(r2)) != -1 && (t2 = r2);
        for (var r2 = [], i2 = 0, o2 = 0; o2 < t2; o2++)
          if (o2 % 4) {
            var s2 = n2.indexOf(e2.charAt(o2 - 1)) << o2 % 4 * 2, a2 = n2.indexOf(e2.charAt(o2)) >>> 6 - o2 % 4 * 2;
            r2[i2 >>> 2] |= (s2 | a2) << 24 - i2 % 4 * 8, i2++;
          }
        return y.create(r2, i2);
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, function(e2) {
        function t2(e3, t3, n3, r3, i3, o3, s3) {
          return ((e3 = e3 + (t3 & n3 | ~t3 & r3) + i3 + s3) << o3 | e3 >>> 32 - o3) + t3;
        }
        function n2(e3, t3, n3, r3, i3, o3, s3) {
          return ((e3 = e3 + (t3 & r3 | n3 & ~r3) + i3 + s3) << o3 | e3 >>> 32 - o3) + t3;
        }
        function r2(e3, t3, n3, r3, i3, o3, s3) {
          return ((e3 = e3 + (t3 ^ n3 ^ r3) + i3 + s3) << o3 | e3 >>> 32 - o3) + t3;
        }
        function i2(e3, t3, n3, r3, i3, o3, s3) {
          return ((e3 = e3 + (n3 ^ (t3 | ~r3)) + i3 + s3) << o3 | e3 >>> 32 - o3) + t3;
        }
        for (var o2 = O, s2 = (u2 = o2.lib).WordArray, a2 = u2.Hasher, u2 = o2.algo, c2 = [], l2 = 0; 64 > l2; l2++)
          c2[l2] = 4294967296 * e2.abs(e2.sin(l2 + 1)) | 0;
        u2 = u2.MD5 = a2.extend({ _doReset: function() {
          this._hash = new s2.init([1732584193, 4023233417, 2562383102, 271733878]);
        }, _doProcessBlock: function(e3, o3) {
          for (var s3 = 0; 16 > s3; s3++) {
            var a3 = e3[u3 = o3 + s3];
            e3[u3] = 16711935 & (a3 << 8 | a3 >>> 24) | 4278255360 & (a3 << 24 | a3 >>> 8);
          }
          s3 = this._hash.words;
          var u3 = e3[o3 + 0], l3 = (a3 = e3[o3 + 1], e3[o3 + 2]), p2 = e3[o3 + 3], h2 = e3[o3 + 4], f2 = e3[o3 + 5], d2 = e3[o3 + 6], g2 = e3[o3 + 7], y2 = e3[o3 + 8], b2 = e3[o3 + 9], v2 = e3[o3 + 10], m2 = e3[o3 + 11], _2 = e3[o3 + 12], O2 = e3[o3 + 13], P2 = e3[o3 + 14], S2 = e3[o3 + 15], w2 = t2(w2 = s3[0], N2 = s3[1], k2 = s3[2], T2 = s3[3], u3, 7, c2[0]), T2 = t2(T2, w2, N2, k2, a3, 12, c2[1]), k2 = t2(k2, T2, w2, N2, l3, 17, c2[2]), N2 = t2(N2, k2, T2, w2, p2, 22, c2[3]);
          w2 = t2(w2, N2, k2, T2, h2, 7, c2[4]), T2 = t2(T2, w2, N2, k2, f2, 12, c2[5]), k2 = t2(k2, T2, w2, N2, d2, 17, c2[6]), N2 = t2(N2, k2, T2, w2, g2, 22, c2[7]), w2 = t2(w2, N2, k2, T2, y2, 7, c2[8]), T2 = t2(T2, w2, N2, k2, b2, 12, c2[9]), k2 = t2(k2, T2, w2, N2, v2, 17, c2[10]), N2 = t2(N2, k2, T2, w2, m2, 22, c2[11]), w2 = t2(w2, N2, k2, T2, _2, 7, c2[12]), T2 = t2(T2, w2, N2, k2, O2, 12, c2[13]), k2 = t2(k2, T2, w2, N2, P2, 17, c2[14]), w2 = n2(w2, N2 = t2(N2, k2, T2, w2, S2, 22, c2[15]), k2, T2, a3, 5, c2[16]), T2 = n2(T2, w2, N2, k2, d2, 9, c2[17]), k2 = n2(k2, T2, w2, N2, m2, 14, c2[18]), N2 = n2(N2, k2, T2, w2, u3, 20, c2[19]), w2 = n2(w2, N2, k2, T2, f2, 5, c2[20]), T2 = n2(T2, w2, N2, k2, v2, 9, c2[21]), k2 = n2(k2, T2, w2, N2, S2, 14, c2[22]), N2 = n2(N2, k2, T2, w2, h2, 20, c2[23]), w2 = n2(w2, N2, k2, T2, b2, 5, c2[24]), T2 = n2(T2, w2, N2, k2, P2, 9, c2[25]), k2 = n2(k2, T2, w2, N2, p2, 14, c2[26]), N2 = n2(N2, k2, T2, w2, y2, 20, c2[27]), w2 = n2(w2, N2, k2, T2, O2, 5, c2[28]), T2 = n2(T2, w2, N2, k2, l3, 9, c2[29]), k2 = n2(k2, T2, w2, N2, g2, 14, c2[30]), w2 = r2(w2, N2 = n2(N2, k2, T2, w2, _2, 20, c2[31]), k2, T2, f2, 4, c2[32]), T2 = r2(T2, w2, N2, k2, y2, 11, c2[33]), k2 = r2(k2, T2, w2, N2, m2, 16, c2[34]), N2 = r2(N2, k2, T2, w2, P2, 23, c2[35]), w2 = r2(w2, N2, k2, T2, a3, 4, c2[36]), T2 = r2(T2, w2, N2, k2, h2, 11, c2[37]), k2 = r2(k2, T2, w2, N2, g2, 16, c2[38]), N2 = r2(N2, k2, T2, w2, v2, 23, c2[39]), w2 = r2(w2, N2, k2, T2, O2, 4, c2[40]), T2 = r2(T2, w2, N2, k2, u3, 11, c2[41]), k2 = r2(k2, T2, w2, N2, p2, 16, c2[42]), N2 = r2(N2, k2, T2, w2, d2, 23, c2[43]), w2 = r2(w2, N2, k2, T2, b2, 4, c2[44]), T2 = r2(T2, w2, N2, k2, _2, 11, c2[45]), k2 = r2(k2, T2, w2, N2, S2, 16, c2[46]), w2 = i2(w2, N2 = r2(N2, k2, T2, w2, l3, 23, c2[47]), k2, T2, u3, 6, c2[48]), T2 = i2(T2, w2, N2, k2, g2, 10, c2[49]), k2 = i2(k2, T2, w2, N2, P2, 15, c2[50]), N2 = i2(N2, k2, T2, w2, f2, 21, c2[51]), w2 = i2(w2, N2, k2, T2, _2, 6, c2[52]), T2 = i2(T2, w2, N2, k2, p2, 10, c2[53]), k2 = i2(k2, T2, w2, N2, v2, 15, c2[54]), N2 = i2(N2, k2, T2, w2, a3, 21, c2[55]), w2 = i2(w2, N2, k2, T2, y2, 6, c2[56]), T2 = i2(T2, w2, N2, k2, S2, 10, c2[57]), k2 = i2(k2, T2, w2, N2, d2, 15, c2[58]), N2 = i2(N2, k2, T2, w2, O2, 21, c2[59]), w2 = i2(w2, N2, k2, T2, h2, 6, c2[60]), T2 = i2(T2, w2, N2, k2, m2, 10, c2[61]), k2 = i2(k2, T2, w2, N2, l3, 15, c2[62]), N2 = i2(N2, k2, T2, w2, b2, 21, c2[63]);
          s3[0] = s3[0] + w2 | 0, s3[1] = s3[1] + N2 | 0, s3[2] = s3[2] + k2 | 0, s3[3] = s3[3] + T2 | 0;
        }, _doFinalize: function() {
          var t3 = this._data, n3 = t3.words, r3 = 8 * this._nDataBytes, i3 = 8 * t3.sigBytes;
          n3[i3 >>> 5] |= 128 << 24 - i3 % 32;
          var o3 = e2.floor(r3 / 4294967296);
          for (n3[15 + (i3 + 64 >>> 9 << 4)] = 16711935 & (o3 << 8 | o3 >>> 24) | 4278255360 & (o3 << 24 | o3 >>> 8), n3[14 + (i3 + 64 >>> 9 << 4)] = 16711935 & (r3 << 8 | r3 >>> 24) | 4278255360 & (r3 << 24 | r3 >>> 8), t3.sigBytes = 4 * (n3.length + 1), this._process(), n3 = (t3 = this._hash).words, r3 = 0; 4 > r3; r3++)
            i3 = n3[r3], n3[r3] = 16711935 & (i3 << 8 | i3 >>> 24) | 4278255360 & (i3 << 24 | i3 >>> 8);
          return t3;
        }, clone: function() {
          var e3 = a2.clone.call(this);
          return e3._hash = this._hash.clone(), e3;
        } }), o2.MD5 = a2._createHelper(u2), o2.HmacMD5 = a2._createHmacHelper(u2);
      }(Math), function() {
        var e2, t2 = O, n2 = (e2 = t2.lib).Base, r2 = e2.WordArray, i2 = (e2 = t2.algo).EvpKDF = n2.extend({ cfg: n2.extend({ keySize: 4, hasher: e2.MD5, iterations: 1 }), init: function(e3) {
          this.cfg = this.cfg.extend(e3);
        }, compute: function(e3, t3) {
          for (var n3 = (a2 = this.cfg).hasher.create(), i3 = r2.create(), o2 = i3.words, s2 = a2.keySize, a2 = a2.iterations; o2.length < s2; ) {
            u2 && n3.update(u2);
            var u2 = n3.update(e3).finalize(t3);
            n3.reset();
            for (var c2 = 1; c2 < a2; c2++)
              u2 = n3.finalize(u2), n3.reset();
            i3.concat(u2);
          }
          return i3.sigBytes = 4 * s2, i3;
        } });
        t2.EvpKDF = function(e3, t3, n3) {
          return i2.create(n3).compute(e3, t3);
        };
      }(), O.lib.Cipher || function(e2) {
        var t2 = (f2 = O).lib, n2 = t2.Base, r2 = t2.WordArray, i2 = t2.BufferedBlockAlgorithm, o2 = f2.enc.Base64, s2 = f2.algo.EvpKDF, a2 = t2.Cipher = i2.extend({ cfg: n2.extend(), createEncryptor: function(e3, t3) {
          return this.create(this._ENC_XFORM_MODE, e3, t3);
        }, createDecryptor: function(e3, t3) {
          return this.create(this._DEC_XFORM_MODE, e3, t3);
        }, init: function(e3, t3, n3) {
          this.cfg = this.cfg.extend(n3), this._xformMode = e3, this._key = t3, this.reset();
        }, reset: function() {
          i2.reset.call(this), this._doReset();
        }, process: function(e3) {
          return this._append(e3), this._process();
        }, finalize: function(e3) {
          return e3 && this._append(e3), this._doFinalize();
        }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function(e3) {
          return { encrypt: function(t3, n3, r3) {
            return (typeof n3 == "string" ? d2 : h2).encrypt(e3, t3, n3, r3);
          }, decrypt: function(t3, n3, r3) {
            return (typeof n3 == "string" ? d2 : h2).decrypt(e3, t3, n3, r3);
          } };
        } });
        t2.StreamCipher = a2.extend({ _doFinalize: function() {
          return this._process(true);
        }, blockSize: 1 });
        var u2 = f2.mode = {}, c2 = function(e3, t3, n3) {
          var r3 = this._iv;
          r3 ? this._iv = void 0 : r3 = this._prevBlock;
          for (var i3 = 0; i3 < n3; i3++)
            e3[t3 + i3] ^= r3[i3];
        }, l2 = (t2.BlockCipherMode = n2.extend({ createEncryptor: function(e3, t3) {
          return this.Encryptor.create(e3, t3);
        }, createDecryptor: function(e3, t3) {
          return this.Decryptor.create(e3, t3);
        }, init: function(e3, t3) {
          this._cipher = e3, this._iv = t3;
        } })).extend();
        l2.Encryptor = l2.extend({ processBlock: function(e3, t3) {
          var n3 = this._cipher, r3 = n3.blockSize;
          c2.call(this, e3, t3, r3), n3.encryptBlock(e3, t3), this._prevBlock = e3.slice(t3, t3 + r3);
        } }), l2.Decryptor = l2.extend({ processBlock: function(e3, t3) {
          var n3 = this._cipher, r3 = n3.blockSize, i3 = e3.slice(t3, t3 + r3);
          n3.decryptBlock(e3, t3), c2.call(this, e3, t3, r3), this._prevBlock = i3;
        } }), u2 = u2.CBC = l2, l2 = (f2.pad = {}).Pkcs7 = { pad: function(e3, t3) {
          for (var n3, i3 = (n3 = (n3 = 4 * t3) - e3.sigBytes % n3) << 24 | n3 << 16 | n3 << 8 | n3, o3 = [], s3 = 0; s3 < n3; s3 += 4)
            o3.push(i3);
          n3 = r2.create(o3, n3), e3.concat(n3);
        }, unpad: function(e3) {
          e3.sigBytes -= 255 & e3.words[e3.sigBytes - 1 >>> 2];
        } }, t2.BlockCipher = a2.extend({ cfg: a2.cfg.extend({ mode: u2, padding: l2 }), reset: function() {
          a2.reset.call(this);
          var e3 = (t3 = this.cfg).iv, t3 = t3.mode;
          if (this._xformMode == this._ENC_XFORM_MODE)
            var n3 = t3.createEncryptor;
          else
            n3 = t3.createDecryptor, this._minBufferSize = 1;
          this._mode = n3.call(t3, this, e3 && e3.words);
        }, _doProcessBlock: function(e3, t3) {
          this._mode.processBlock(e3, t3);
        }, _doFinalize: function() {
          var e3 = this.cfg.padding;
          if (this._xformMode == this._ENC_XFORM_MODE) {
            e3.pad(this._data, this.blockSize);
            var t3 = this._process(true);
          } else
            t3 = this._process(true), e3.unpad(t3);
          return t3;
        }, blockSize: 4 });
        var p2 = t2.CipherParams = n2.extend({ init: function(e3) {
          this.mixIn(e3);
        }, toString: function(e3) {
          return (e3 || this.formatter).stringify(this);
        } }), h2 = (u2 = (f2.format = {}).OpenSSL = { stringify: function(e3) {
          var t3 = e3.ciphertext;
          return ((e3 = e3.salt) ? r2.create([1398893684, 1701076831]).concat(e3).concat(t3) : t3).toString(o2);
        }, parse: function(e3) {
          var t3 = (e3 = o2.parse(e3)).words;
          if (t3[0] == 1398893684 && t3[1] == 1701076831) {
            var n3 = r2.create(t3.slice(2, 4));
            t3.splice(0, 4), e3.sigBytes -= 16;
          }
          return p2.create({ ciphertext: e3, salt: n3 });
        } }, t2.SerializableCipher = n2.extend({ cfg: n2.extend({ format: u2 }), encrypt: function(e3, t3, n3, r3) {
          r3 = this.cfg.extend(r3);
          var i3 = e3.createEncryptor(n3, r3);
          return t3 = i3.finalize(t3), i3 = i3.cfg, p2.create({ ciphertext: t3, key: n3, iv: i3.iv, algorithm: e3, mode: i3.mode, padding: i3.padding, blockSize: e3.blockSize, formatter: r3.format });
        }, decrypt: function(e3, t3, n3, r3) {
          return r3 = this.cfg.extend(r3), t3 = this._parse(t3, r3.format), e3.createDecryptor(n3, r3).finalize(t3.ciphertext);
        }, _parse: function(e3, t3) {
          return typeof e3 == "string" ? t3.parse(e3, this) : e3;
        } })), f2 = (f2.kdf = {}).OpenSSL = { execute: function(e3, t3, n3, i3) {
          return i3 || (i3 = r2.random(8)), e3 = s2.create({ keySize: t3 + n3 }).compute(e3, i3), n3 = r2.create(e3.words.slice(t3), 4 * n3), e3.sigBytes = 4 * t3, p2.create({ key: e3, iv: n3, salt: i3 });
        } }, d2 = t2.PasswordBasedCipher = h2.extend({ cfg: h2.cfg.extend({ kdf: f2 }), encrypt: function(e3, t3, n3, r3) {
          return n3 = (r3 = this.cfg.extend(r3)).kdf.execute(n3, e3.keySize, e3.ivSize), r3.iv = n3.iv, (e3 = h2.encrypt.call(this, e3, t3, n3.key, r3)).mixIn(n3), e3;
        }, decrypt: function(e3, t3, n3, r3) {
          return r3 = this.cfg.extend(r3), t3 = this._parse(t3, r3.format), n3 = r3.kdf.execute(n3, e3.keySize, e3.ivSize, t3.salt), r3.iv = n3.iv, h2.decrypt.call(this, e3, t3, n3.key, r3);
        } });
      }(), function() {
        for (var e2 = O, t2 = e2.lib.BlockCipher, n2 = e2.algo, r2 = [], i2 = [], o2 = [], s2 = [], a2 = [], u2 = [], c2 = [], l2 = [], p2 = [], h2 = [], f2 = [], d2 = 0; 256 > d2; d2++)
          f2[d2] = 128 > d2 ? d2 << 1 : d2 << 1 ^ 283;
        var g2 = 0, y2 = 0;
        for (d2 = 0; 256 > d2; d2++) {
          var b2 = (b2 = y2 ^ y2 << 1 ^ y2 << 2 ^ y2 << 3 ^ y2 << 4) >>> 8 ^ 255 & b2 ^ 99;
          r2[g2] = b2, i2[b2] = g2;
          var v2 = f2[g2], m2 = f2[v2], _2 = f2[m2], P2 = 257 * f2[b2] ^ 16843008 * b2;
          o2[g2] = P2 << 24 | P2 >>> 8, s2[g2] = P2 << 16 | P2 >>> 16, a2[g2] = P2 << 8 | P2 >>> 24, u2[g2] = P2, P2 = 16843009 * _2 ^ 65537 * m2 ^ 257 * v2 ^ 16843008 * g2, c2[b2] = P2 << 24 | P2 >>> 8, l2[b2] = P2 << 16 | P2 >>> 16, p2[b2] = P2 << 8 | P2 >>> 24, h2[b2] = P2, g2 ? (g2 = v2 ^ f2[f2[f2[_2 ^ v2]]], y2 ^= f2[f2[y2]]) : g2 = y2 = 1;
        }
        var S2 = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        n2 = n2.AES = t2.extend({ _doReset: function() {
          for (var e3 = (n3 = this._key).words, t3 = n3.sigBytes / 4, n3 = 4 * ((this._nRounds = t3 + 6) + 1), i3 = this._keySchedule = [], o3 = 0; o3 < n3; o3++)
            if (o3 < t3)
              i3[o3] = e3[o3];
            else {
              var s3 = i3[o3 - 1];
              o3 % t3 ? 6 < t3 && o3 % t3 == 4 && (s3 = r2[s3 >>> 24] << 24 | r2[s3 >>> 16 & 255] << 16 | r2[s3 >>> 8 & 255] << 8 | r2[255 & s3]) : (s3 = r2[(s3 = s3 << 8 | s3 >>> 24) >>> 24] << 24 | r2[s3 >>> 16 & 255] << 16 | r2[s3 >>> 8 & 255] << 8 | r2[255 & s3], s3 ^= S2[o3 / t3 | 0] << 24), i3[o3] = i3[o3 - t3] ^ s3;
            }
          for (e3 = this._invKeySchedule = [], t3 = 0; t3 < n3; t3++)
            o3 = n3 - t3, s3 = t3 % 4 ? i3[o3] : i3[o3 - 4], e3[t3] = 4 > t3 || 4 >= o3 ? s3 : c2[r2[s3 >>> 24]] ^ l2[r2[s3 >>> 16 & 255]] ^ p2[r2[s3 >>> 8 & 255]] ^ h2[r2[255 & s3]];
        }, encryptBlock: function(e3, t3) {
          this._doCryptBlock(e3, t3, this._keySchedule, o2, s2, a2, u2, r2);
        }, decryptBlock: function(e3, t3) {
          var n3 = e3[t3 + 1];
          e3[t3 + 1] = e3[t3 + 3], e3[t3 + 3] = n3, this._doCryptBlock(e3, t3, this._invKeySchedule, c2, l2, p2, h2, i2), n3 = e3[t3 + 1], e3[t3 + 1] = e3[t3 + 3], e3[t3 + 3] = n3;
        }, _doCryptBlock: function(e3, t3, n3, r3, i3, o3, s3, a3) {
          for (var u3 = this._nRounds, c3 = e3[t3] ^ n3[0], l3 = e3[t3 + 1] ^ n3[1], p3 = e3[t3 + 2] ^ n3[2], h3 = e3[t3 + 3] ^ n3[3], f3 = 4, d3 = 1; d3 < u3; d3++) {
            var g3 = r3[c3 >>> 24] ^ i3[l3 >>> 16 & 255] ^ o3[p3 >>> 8 & 255] ^ s3[255 & h3] ^ n3[f3++], y3 = r3[l3 >>> 24] ^ i3[p3 >>> 16 & 255] ^ o3[h3 >>> 8 & 255] ^ s3[255 & c3] ^ n3[f3++], b3 = r3[p3 >>> 24] ^ i3[h3 >>> 16 & 255] ^ o3[c3 >>> 8 & 255] ^ s3[255 & l3] ^ n3[f3++];
            h3 = r3[h3 >>> 24] ^ i3[c3 >>> 16 & 255] ^ o3[l3 >>> 8 & 255] ^ s3[255 & p3] ^ n3[f3++], c3 = g3, l3 = y3, p3 = b3;
          }
          g3 = (a3[c3 >>> 24] << 24 | a3[l3 >>> 16 & 255] << 16 | a3[p3 >>> 8 & 255] << 8 | a3[255 & h3]) ^ n3[f3++], y3 = (a3[l3 >>> 24] << 24 | a3[p3 >>> 16 & 255] << 16 | a3[h3 >>> 8 & 255] << 8 | a3[255 & c3]) ^ n3[f3++], b3 = (a3[p3 >>> 24] << 24 | a3[h3 >>> 16 & 255] << 16 | a3[c3 >>> 8 & 255] << 8 | a3[255 & l3]) ^ n3[f3++], h3 = (a3[h3 >>> 24] << 24 | a3[c3 >>> 16 & 255] << 16 | a3[l3 >>> 8 & 255] << 8 | a3[255 & p3]) ^ n3[f3++], e3[t3] = g3, e3[t3 + 1] = y3, e3[t3 + 2] = b3, e3[t3 + 3] = h3;
        }, keySize: 8 });
        e2.AES = t2._createHelper(n2);
      }(), O.mode.ECB = ((b = O.lib.BlockCipherMode.extend()).Encryptor = b.extend({ processBlock: function(e2, t2) {
        this._cipher.encryptBlock(e2, t2);
      } }), b.Decryptor = b.extend({ processBlock: function(e2, t2) {
        this._cipher.decryptBlock(e2, t2);
      } }), b);
      var P = O;
      function S(e2) {
        var t2, n2 = [];
        for (t2 = 0; t2 < e2.length; t2 += 1)
          n2[t2 / 4 | 0] |= e2[t2] << 24 - 8 * t2;
        return P.lib.WordArray.create(n2, e2.length);
      }
      var w = function() {
        function e2(e3) {
          var t2 = e3.config;
          this._config = t2, this._iv = "0123456789012345", this._allowedKeyEncodings = ["hex", "utf8", "base64", "binary"], this._allowedKeyLengths = [128, 256], this._allowedModes = ["ecb", "cbc"], this._defaultOptions = { encryptKey: true, keyEncoding: "utf8", keyLength: 256, mode: "cbc" };
        }
        return e2.prototype.HMACSHA256 = function(e3) {
          return P.HmacSHA256(e3, this._config.secretKey).toString(P.enc.Base64);
        }, e2.prototype.SHA256 = function(e3) {
          return P.SHA256(e3).toString(P.enc.Hex);
        }, e2.prototype._parseOptions = function(e3) {
          var t2 = e3 || {};
          return t2.hasOwnProperty("encryptKey") || (t2.encryptKey = this._defaultOptions.encryptKey), t2.hasOwnProperty("keyEncoding") || (t2.keyEncoding = this._defaultOptions.keyEncoding), t2.hasOwnProperty("keyLength") || (t2.keyLength = this._defaultOptions.keyLength), t2.hasOwnProperty("mode") || (t2.mode = this._defaultOptions.mode), this._allowedKeyEncodings.indexOf(t2.keyEncoding.toLowerCase()) === -1 && (t2.keyEncoding = this._defaultOptions.keyEncoding), this._allowedKeyLengths.indexOf(parseInt(t2.keyLength, 10)) === -1 && (t2.keyLength = this._defaultOptions.keyLength), this._allowedModes.indexOf(t2.mode.toLowerCase()) === -1 && (t2.mode = this._defaultOptions.mode), t2;
        }, e2.prototype._decodeKey = function(e3, t2) {
          return t2.keyEncoding === "base64" ? P.enc.Base64.parse(e3) : t2.keyEncoding === "hex" ? P.enc.Hex.parse(e3) : e3;
        }, e2.prototype._getPaddedKey = function(e3, t2) {
          return e3 = this._decodeKey(e3, t2), t2.encryptKey ? P.enc.Utf8.parse(this.SHA256(e3).slice(0, 32)) : e3;
        }, e2.prototype._getMode = function(e3) {
          return e3.mode === "ecb" ? P.mode.ECB : P.mode.CBC;
        }, e2.prototype._getIV = function(e3) {
          return e3.mode === "cbc" ? P.enc.Utf8.parse(this._iv) : null;
        }, e2.prototype._getRandomIV = function() {
          return P.lib.WordArray.random(16);
        }, e2.prototype.encrypt = function(e3, t2, n2) {
          return this._config.customEncrypt ? this._config.customEncrypt(e3) : this.pnEncrypt(e3, t2, n2);
        }, e2.prototype.decrypt = function(e3, t2, n2) {
          return this._config.customDecrypt ? this._config.customDecrypt(e3) : this.pnDecrypt(e3, t2, n2);
        }, e2.prototype.pnEncrypt = function(e3, t2, n2) {
          if (!t2 && !this._config.cipherKey)
            return e3;
          n2 = this._parseOptions(n2);
          var r2 = this._getMode(n2), i2 = this._getPaddedKey(t2 || this._config.cipherKey, n2);
          if (this._config.useRandomIVs) {
            var o2 = this._getRandomIV(), s2 = P.AES.encrypt(e3, i2, { iv: o2, mode: r2 }).ciphertext;
            return o2.clone().concat(s2.clone()).toString(P.enc.Base64);
          }
          var a2 = this._getIV(n2);
          return P.AES.encrypt(e3, i2, { iv: a2, mode: r2 }).ciphertext.toString(P.enc.Base64) || e3;
        }, e2.prototype.pnDecrypt = function(e3, t2, n2) {
          if (!t2 && !this._config.cipherKey)
            return e3;
          n2 = this._parseOptions(n2);
          var r2 = this._getMode(n2), i2 = this._getPaddedKey(t2 || this._config.cipherKey, n2);
          if (this._config.useRandomIVs) {
            var o2 = S((u2 = Buffer.from(e3, "base64")).slice(0, 16)), s2 = S(u2.slice(16));
            try {
              var a2 = P.AES.decrypt({ ciphertext: s2 }, i2, { iv: o2, mode: r2 }).toString(P.enc.Utf8);
              return JSON.parse(a2);
            } catch (e4) {
              return null;
            }
          } else {
            o2 = this._getIV(n2);
            try {
              var u2 = P.enc.Base64.parse(e3);
              a2 = P.AES.decrypt({ ciphertext: u2 }, i2, { iv: o2, mode: r2 }).toString(P.enc.Utf8);
              return JSON.parse(a2);
            } catch (e4) {
              return null;
            }
          }
        }, e2;
      }(), T = function() {
        function e2(e3) {
          var t2 = e3.timeEndpoint;
          this._timeEndpoint = t2;
        }
        return e2.prototype.onReconnection = function(e3) {
          this._reconnectionCallback = e3;
        }, e2.prototype.startPolling = function() {
          this._timeTimer = setInterval(this._performTimeLoop.bind(this), 3e3);
        }, e2.prototype.stopPolling = function() {
          clearInterval(this._timeTimer);
        }, e2.prototype._performTimeLoop = function() {
          var e3 = this;
          this._timeEndpoint(function(t2) {
            t2.error || (clearInterval(e3._timeTimer), e3._reconnectionCallback());
          });
        }, e2;
      }(), k = function() {
        function e2(e3) {
          var t2 = e3.config;
          this.hashHistory = [], this._config = t2;
        }
        return e2.prototype.getKey = function(e3) {
          var t2 = function(e4) {
            var t3 = 0;
            if (e4.length === 0)
              return t3;
            for (var n3 = 0; n3 < e4.length; n3 += 1)
              t3 = (t3 << 5) - t3 + e4.charCodeAt(n3), t3 &= t3;
            return t3;
          }(JSON.stringify(e3.payload)).toString(), n2 = e3.publishMetaData.publishTimetoken;
          return "".concat(n2, "-").concat(t2);
        }, e2.prototype.isDuplicate = function(e3) {
          return this.hashHistory.includes(this.getKey(e3));
        }, e2.prototype.addEntry = function(e3) {
          this.hashHistory.length >= this._config.maximumCacheSize && this.hashHistory.shift(), this.hashHistory.push(this.getKey(e3));
        }, e2.prototype.clearHistory = function() {
          this.hashHistory = [];
        }, e2;
      }();
      function N(e2) {
        return encodeURIComponent(e2).replace(/[!~*'()]/g, function(e3) {
          return "%".concat(e3.charCodeAt(0).toString(16).toUpperCase());
        });
      }
      function C(e2) {
        return function(e3) {
          var t2 = [];
          return Object.keys(e3).forEach(function(e4) {
            return t2.push(e4);
          }), t2;
        }(e2).sort();
      }
      var E = { signPamFromParams: function(e2) {
        return C(e2).map(function(t2) {
          return "".concat(t2, "=").concat(N(e2[t2]));
        }).join("&");
      }, endsWith: function(e2, t2) {
        return e2.indexOf(t2, this.length - t2.length) !== -1;
      }, createPromise: function() {
        var e2, t2;
        return { promise: new Promise(function(n2, r2) {
          e2 = n2, t2 = r2;
        }), reject: t2, fulfill: e2 };
      }, encodeString: N }, A = { PNNetworkUpCategory: "PNNetworkUpCategory", PNNetworkDownCategory: "PNNetworkDownCategory", PNNetworkIssuesCategory: "PNNetworkIssuesCategory", PNTimeoutCategory: "PNTimeoutCategory", PNBadRequestCategory: "PNBadRequestCategory", PNAccessDeniedCategory: "PNAccessDeniedCategory", PNUnknownCategory: "PNUnknownCategory", PNReconnectedCategory: "PNReconnectedCategory", PNConnectedCategory: "PNConnectedCategory", PNRequestMessageCountExceededCategory: "PNRequestMessageCountExceededCategory" }, M = function() {
        function e2(e3) {
          var t2 = e3.subscribeEndpoint, n2 = e3.leaveEndpoint, r2 = e3.heartbeatEndpoint, i2 = e3.setStateEndpoint, o2 = e3.timeEndpoint, s2 = e3.getFileUrl, a2 = e3.config, u2 = e3.crypto, c2 = e3.listenerManager;
          this._listenerManager = c2, this._config = a2, this._leaveEndpoint = n2, this._heartbeatEndpoint = r2, this._setStateEndpoint = i2, this._subscribeEndpoint = t2, this._getFileUrl = s2, this._crypto = u2, this._channels = {}, this._presenceChannels = {}, this._heartbeatChannels = {}, this._heartbeatChannelGroups = {}, this._channelGroups = {}, this._presenceChannelGroups = {}, this._pendingChannelSubscriptions = [], this._pendingChannelGroupSubscriptions = [], this._currentTimetoken = 0, this._lastTimetoken = 0, this._storedTimetoken = null, this._subscriptionStatusAnnounced = false, this._isOnline = true, this._reconnectionManager = new T({ timeEndpoint: o2 }), this._dedupingManager = new k({ config: a2 });
        }
        return e2.prototype.adaptStateChange = function(e3, t2) {
          var n2 = this, r2 = e3.state, i2 = e3.channels, o2 = i2 === void 0 ? [] : i2, s2 = e3.channelGroups, a2 = s2 === void 0 ? [] : s2;
          return o2.forEach(function(e4) {
            e4 in n2._channels && (n2._channels[e4].state = r2);
          }), a2.forEach(function(e4) {
            e4 in n2._channelGroups && (n2._channelGroups[e4].state = r2);
          }), this._setStateEndpoint({ state: r2, channels: o2, channelGroups: a2 }, t2);
        }, e2.prototype.adaptPresenceChange = function(e3) {
          var t2 = this, n2 = e3.connected, r2 = e3.channels, i2 = r2 === void 0 ? [] : r2, o2 = e3.channelGroups, s2 = o2 === void 0 ? [] : o2;
          n2 ? (i2.forEach(function(e4) {
            t2._heartbeatChannels[e4] = { state: {} };
          }), s2.forEach(function(e4) {
            t2._heartbeatChannelGroups[e4] = { state: {} };
          })) : (i2.forEach(function(e4) {
            e4 in t2._heartbeatChannels && delete t2._heartbeatChannels[e4];
          }), s2.forEach(function(e4) {
            e4 in t2._heartbeatChannelGroups && delete t2._heartbeatChannelGroups[e4];
          }), this._config.suppressLeaveEvents === false && this._leaveEndpoint({ channels: i2, channelGroups: s2 }, function(e4) {
            t2._listenerManager.announceStatus(e4);
          })), this.reconnect();
        }, e2.prototype.adaptSubscribeChange = function(e3) {
          var t2 = this, n2 = e3.timetoken, r2 = e3.channels, i2 = r2 === void 0 ? [] : r2, o2 = e3.channelGroups, s2 = o2 === void 0 ? [] : o2, a2 = e3.withPresence, u2 = a2 !== void 0 && a2, c2 = e3.withHeartbeats, l2 = c2 !== void 0 && c2;
          this._config.subscribeKey && this._config.subscribeKey !== "" ? (n2 && (this._lastTimetoken = this._currentTimetoken, this._currentTimetoken = n2), this._currentTimetoken !== "0" && this._currentTimetoken !== 0 && (this._storedTimetoken = this._currentTimetoken, this._currentTimetoken = 0), i2.forEach(function(e4) {
            t2._channels[e4] = { state: {} }, u2 && (t2._presenceChannels[e4] = {}), (l2 || t2._config.getHeartbeatInterval()) && (t2._heartbeatChannels[e4] = {}), t2._pendingChannelSubscriptions.push(e4);
          }), s2.forEach(function(e4) {
            t2._channelGroups[e4] = { state: {} }, u2 && (t2._presenceChannelGroups[e4] = {}), (l2 || t2._config.getHeartbeatInterval()) && (t2._heartbeatChannelGroups[e4] = {}), t2._pendingChannelGroupSubscriptions.push(e4);
          }), this._subscriptionStatusAnnounced = false, this.reconnect()) : console && console.log && console.log("subscribe key missing; aborting subscribe");
        }, e2.prototype.adaptUnsubscribeChange = function(e3, t2) {
          var n2 = this, r2 = e3.channels, i2 = r2 === void 0 ? [] : r2, o2 = e3.channelGroups, s2 = o2 === void 0 ? [] : o2, a2 = [], u2 = [];
          i2.forEach(function(e4) {
            e4 in n2._channels && (delete n2._channels[e4], a2.push(e4), e4 in n2._heartbeatChannels && delete n2._heartbeatChannels[e4]), e4 in n2._presenceChannels && (delete n2._presenceChannels[e4], a2.push(e4));
          }), s2.forEach(function(e4) {
            e4 in n2._channelGroups && (delete n2._channelGroups[e4], u2.push(e4), e4 in n2._heartbeatChannelGroups && delete n2._heartbeatChannelGroups[e4]), e4 in n2._presenceChannelGroups && (delete n2._presenceChannelGroups[e4], u2.push(e4));
          }), a2.length === 0 && u2.length === 0 || (this._config.suppressLeaveEvents !== false || t2 || this._leaveEndpoint({ channels: a2, channelGroups: u2 }, function(e4) {
            e4.affectedChannels = a2, e4.affectedChannelGroups = u2, e4.currentTimetoken = n2._currentTimetoken, e4.lastTimetoken = n2._lastTimetoken, n2._listenerManager.announceStatus(e4);
          }), Object.keys(this._channels).length === 0 && Object.keys(this._presenceChannels).length === 0 && Object.keys(this._channelGroups).length === 0 && Object.keys(this._presenceChannelGroups).length === 0 && (this._lastTimetoken = 0, this._currentTimetoken = 0, this._storedTimetoken = null, this._region = null, this._reconnectionManager.stopPolling()), this.reconnect());
        }, e2.prototype.unsubscribeAll = function(e3) {
          this.adaptUnsubscribeChange({ channels: this.getSubscribedChannels(), channelGroups: this.getSubscribedChannelGroups() }, e3);
        }, e2.prototype.getHeartbeatChannels = function() {
          return Object.keys(this._heartbeatChannels);
        }, e2.prototype.getHeartbeatChannelGroups = function() {
          return Object.keys(this._heartbeatChannelGroups);
        }, e2.prototype.getSubscribedChannels = function() {
          return Object.keys(this._channels);
        }, e2.prototype.getSubscribedChannelGroups = function() {
          return Object.keys(this._channelGroups);
        }, e2.prototype.reconnect = function() {
          this._startSubscribeLoop(), this._registerHeartbeatTimer();
        }, e2.prototype.disconnect = function() {
          this._stopSubscribeLoop(), this._stopHeartbeatTimer(), this._reconnectionManager.stopPolling();
        }, e2.prototype._registerHeartbeatTimer = function() {
          this._stopHeartbeatTimer(), this._config.getHeartbeatInterval() !== 0 && this._config.getHeartbeatInterval() !== void 0 && (this._performHeartbeatLoop(), this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), 1e3 * this._config.getHeartbeatInterval()));
        }, e2.prototype._stopHeartbeatTimer = function() {
          this._heartbeatTimer && (clearInterval(this._heartbeatTimer), this._heartbeatTimer = null);
        }, e2.prototype._performHeartbeatLoop = function() {
          var e3 = this, t2 = this.getHeartbeatChannels(), n2 = this.getHeartbeatChannelGroups(), r2 = {};
          if (t2.length !== 0 || n2.length !== 0) {
            this.getSubscribedChannels().forEach(function(t3) {
              var n3 = e3._channels[t3].state;
              Object.keys(n3).length && (r2[t3] = n3);
            }), this.getSubscribedChannelGroups().forEach(function(t3) {
              var n3 = e3._channelGroups[t3].state;
              Object.keys(n3).length && (r2[t3] = n3);
            });
            this._heartbeatEndpoint({ channels: t2, channelGroups: n2, state: r2 }, function(t3) {
              t3.error && e3._config.announceFailedHeartbeats && e3._listenerManager.announceStatus(t3), t3.error && e3._config.autoNetworkDetection && e3._isOnline && (e3._isOnline = false, e3.disconnect(), e3._listenerManager.announceNetworkDown(), e3.reconnect()), !t3.error && e3._config.announceSuccessfulHeartbeats && e3._listenerManager.announceStatus(t3);
            }.bind(this));
          }
        }, e2.prototype._startSubscribeLoop = function() {
          var e3 = this;
          this._stopSubscribeLoop();
          var t2 = {}, n2 = [], r2 = [];
          if (Object.keys(this._channels).forEach(function(r3) {
            var i3 = e3._channels[r3].state;
            Object.keys(i3).length && (t2[r3] = i3), n2.push(r3);
          }), Object.keys(this._presenceChannels).forEach(function(e4) {
            n2.push("".concat(e4, "-pnpres"));
          }), Object.keys(this._channelGroups).forEach(function(n3) {
            var i3 = e3._channelGroups[n3].state;
            Object.keys(i3).length && (t2[n3] = i3), r2.push(n3);
          }), Object.keys(this._presenceChannelGroups).forEach(function(e4) {
            r2.push("".concat(e4, "-pnpres"));
          }), n2.length !== 0 || r2.length !== 0) {
            var i2 = { channels: n2, channelGroups: r2, state: t2, timetoken: this._currentTimetoken, filterExpression: this._config.filterExpression, region: this._region };
            this._subscribeCall = this._subscribeEndpoint(i2, this._processSubscribeResponse.bind(this));
          }
        }, e2.prototype._processSubscribeResponse = function(e3, t2) {
          var i2 = this;
          if (e3.error) {
            if (e3.errorData && e3.errorData.message === "Aborted")
              return;
            e3.category === A.PNTimeoutCategory ? this._startSubscribeLoop() : e3.category === A.PNNetworkIssuesCategory ? (this.disconnect(), e3.error && this._config.autoNetworkDetection && this._isOnline && (this._isOnline = false, this._listenerManager.announceNetworkDown()), this._reconnectionManager.onReconnection(function() {
              i2._config.autoNetworkDetection && !i2._isOnline && (i2._isOnline = true, i2._listenerManager.announceNetworkUp()), i2.reconnect(), i2._subscriptionStatusAnnounced = true;
              var t3 = { category: A.PNReconnectedCategory, operation: e3.operation, lastTimetoken: i2._lastTimetoken, currentTimetoken: i2._currentTimetoken };
              i2._listenerManager.announceStatus(t3);
            }), this._reconnectionManager.startPolling(), this._listenerManager.announceStatus(e3)) : e3.category === A.PNBadRequestCategory ? (this._stopHeartbeatTimer(), this._listenerManager.announceStatus(e3)) : this._listenerManager.announceStatus(e3);
          } else {
            if (this._storedTimetoken ? (this._currentTimetoken = this._storedTimetoken, this._storedTimetoken = null) : (this._lastTimetoken = this._currentTimetoken, this._currentTimetoken = t2.metadata.timetoken), !this._subscriptionStatusAnnounced) {
              var o2 = {};
              o2.category = A.PNConnectedCategory, o2.operation = e3.operation, o2.affectedChannels = this._pendingChannelSubscriptions, o2.subscribedChannels = this.getSubscribedChannels(), o2.affectedChannelGroups = this._pendingChannelGroupSubscriptions, o2.lastTimetoken = this._lastTimetoken, o2.currentTimetoken = this._currentTimetoken, this._subscriptionStatusAnnounced = true, this._listenerManager.announceStatus(o2), this._pendingChannelSubscriptions = [], this._pendingChannelGroupSubscriptions = [];
            }
            var s2 = t2.messages || [], a2 = this._config, u2 = a2.requestMessageCountThreshold, c2 = a2.dedupeOnSubscribe;
            if (u2 && s2.length >= u2) {
              var l2 = {};
              l2.category = A.PNRequestMessageCountExceededCategory, l2.operation = e3.operation, this._listenerManager.announceStatus(l2);
            }
            s2.forEach(function(e4) {
              var t3 = e4.channel, o3 = e4.subscriptionMatch, s3 = e4.publishMetaData;
              if (t3 === o3 && (o3 = null), c2) {
                if (i2._dedupingManager.isDuplicate(e4))
                  return;
                i2._dedupingManager.addEntry(e4);
              }
              if (E.endsWith(e4.channel, "-pnpres"))
                (g2 = { channel: null, subscription: null }).actualChannel = o3 != null ? t3 : null, g2.subscribedChannel = o3 != null ? o3 : t3, t3 && (g2.channel = t3.substring(0, t3.lastIndexOf("-pnpres"))), o3 && (g2.subscription = o3.substring(0, o3.lastIndexOf("-pnpres"))), g2.action = e4.payload.action, g2.state = e4.payload.data, g2.timetoken = s3.publishTimetoken, g2.occupancy = e4.payload.occupancy, g2.uuid = e4.payload.uuid, g2.timestamp = e4.payload.timestamp, e4.payload.join && (g2.join = e4.payload.join), e4.payload.leave && (g2.leave = e4.payload.leave), e4.payload.timeout && (g2.timeout = e4.payload.timeout), i2._listenerManager.announcePresence(g2);
              else if (e4.messageType === 1) {
                (g2 = { channel: null, subscription: null }).channel = t3, g2.subscription = o3, g2.timetoken = s3.publishTimetoken, g2.publisher = e4.issuingClientId, e4.userMetadata && (g2.userMetadata = e4.userMetadata), g2.message = e4.payload, i2._listenerManager.announceSignal(g2);
              } else if (e4.messageType === 2) {
                if ((g2 = { channel: null, subscription: null }).channel = t3, g2.subscription = o3, g2.timetoken = s3.publishTimetoken, g2.publisher = e4.issuingClientId, e4.userMetadata && (g2.userMetadata = e4.userMetadata), g2.message = { event: e4.payload.event, type: e4.payload.type, data: e4.payload.data }, i2._listenerManager.announceObjects(g2), e4.payload.type === "uuid") {
                  var a3 = i2._renameChannelField(g2);
                  i2._listenerManager.announceUser(n(n({}, a3), { message: n(n({}, a3.message), { event: i2._renameEvent(a3.message.event), type: "user" }) }));
                } else if (e4.payload.type === "channel") {
                  a3 = i2._renameChannelField(g2);
                  i2._listenerManager.announceSpace(n(n({}, a3), { message: n(n({}, a3.message), { event: i2._renameEvent(a3.message.event), type: "space" }) }));
                } else if (e4.payload.type === "membership") {
                  var u3 = (a3 = i2._renameChannelField(g2)).message.data, l3 = u3.uuid, p2 = u3.channel, h2 = r(u3, ["uuid", "channel"]);
                  h2.user = l3, h2.space = p2, i2._listenerManager.announceMembership(n(n({}, a3), { message: n(n({}, a3.message), { event: i2._renameEvent(a3.message.event), data: h2 }) }));
                }
              } else if (e4.messageType === 3) {
                (g2 = {}).channel = t3, g2.subscription = o3, g2.timetoken = s3.publishTimetoken, g2.publisher = e4.issuingClientId, g2.data = { messageTimetoken: e4.payload.data.messageTimetoken, actionTimetoken: e4.payload.data.actionTimetoken, type: e4.payload.data.type, uuid: e4.issuingClientId, value: e4.payload.data.value }, g2.event = e4.payload.event, i2._listenerManager.announceMessageAction(g2);
              } else if (e4.messageType === 4) {
                (g2 = {}).channel = t3, g2.subscription = o3, g2.timetoken = s3.publishTimetoken, g2.publisher = e4.issuingClientId;
                var f2 = e4.payload;
                if (i2._config.cipherKey) {
                  var d2 = i2._crypto.decrypt(e4.payload);
                  typeof d2 == "object" && d2 !== null && (f2 = d2);
                }
                e4.userMetadata && (g2.userMetadata = e4.userMetadata), g2.message = f2.message, g2.file = { id: f2.file.id, name: f2.file.name, url: i2._getFileUrl({ id: f2.file.id, name: f2.file.name, channel: t3 }) }, i2._listenerManager.announceFile(g2);
              } else {
                var g2;
                (g2 = { channel: null, subscription: null }).actualChannel = o3 != null ? t3 : null, g2.subscribedChannel = o3 != null ? o3 : t3, g2.channel = t3, g2.subscription = o3, g2.timetoken = s3.publishTimetoken, g2.publisher = e4.issuingClientId, e4.userMetadata && (g2.userMetadata = e4.userMetadata), i2._config.cipherKey ? g2.message = i2._crypto.decrypt(e4.payload) : g2.message = e4.payload, i2._listenerManager.announceMessage(g2);
              }
            }), this._region = t2.metadata.region, this._startSubscribeLoop();
          }
        }, e2.prototype._stopSubscribeLoop = function() {
          this._subscribeCall && (typeof this._subscribeCall.abort == "function" && this._subscribeCall.abort(), this._subscribeCall = null);
        }, e2.prototype._renameEvent = function(e3) {
          return e3 === "set" ? "updated" : "removed";
        }, e2.prototype._renameChannelField = function(e3) {
          var t2 = e3.channel, n2 = r(e3, ["channel"]);
          return n2.spaceId = t2, n2;
        }, e2;
      }(), j = { PNTimeOperation: "PNTimeOperation", PNHistoryOperation: "PNHistoryOperation", PNDeleteMessagesOperation: "PNDeleteMessagesOperation", PNFetchMessagesOperation: "PNFetchMessagesOperation", PNMessageCounts: "PNMessageCountsOperation", PNSubscribeOperation: "PNSubscribeOperation", PNUnsubscribeOperation: "PNUnsubscribeOperation", PNPublishOperation: "PNPublishOperation", PNSignalOperation: "PNSignalOperation", PNAddMessageActionOperation: "PNAddActionOperation", PNRemoveMessageActionOperation: "PNRemoveMessageActionOperation", PNGetMessageActionsOperation: "PNGetMessageActionsOperation", PNCreateUserOperation: "PNCreateUserOperation", PNUpdateUserOperation: "PNUpdateUserOperation", PNDeleteUserOperation: "PNDeleteUserOperation", PNGetUserOperation: "PNGetUsersOperation", PNGetUsersOperation: "PNGetUsersOperation", PNCreateSpaceOperation: "PNCreateSpaceOperation", PNUpdateSpaceOperation: "PNUpdateSpaceOperation", PNDeleteSpaceOperation: "PNDeleteSpaceOperation", PNGetSpaceOperation: "PNGetSpacesOperation", PNGetSpacesOperation: "PNGetSpacesOperation", PNGetMembersOperation: "PNGetMembersOperation", PNUpdateMembersOperation: "PNUpdateMembersOperation", PNGetMembershipsOperation: "PNGetMembershipsOperation", PNUpdateMembershipsOperation: "PNUpdateMembershipsOperation", PNListFilesOperation: "PNListFilesOperation", PNGenerateUploadUrlOperation: "PNGenerateUploadUrlOperation", PNPublishFileOperation: "PNPublishFileOperation", PNGetFileUrlOperation: "PNGetFileUrlOperation", PNDownloadFileOperation: "PNDownloadFileOperation", PNGetAllUUIDMetadataOperation: "PNGetAllUUIDMetadataOperation", PNGetUUIDMetadataOperation: "PNGetUUIDMetadataOperation", PNSetUUIDMetadataOperation: "PNSetUUIDMetadataOperation", PNRemoveUUIDMetadataOperation: "PNRemoveUUIDMetadataOperation", PNGetAllChannelMetadataOperation: "PNGetAllChannelMetadataOperation", PNGetChannelMetadataOperation: "PNGetChannelMetadataOperation", PNSetChannelMetadataOperation: "PNSetChannelMetadataOperation", PNRemoveChannelMetadataOperation: "PNRemoveChannelMetadataOperation", PNSetMembersOperation: "PNSetMembersOperation", PNSetMembershipsOperation: "PNSetMembershipsOperation", PNPushNotificationEnabledChannelsOperation: "PNPushNotificationEnabledChannelsOperation", PNRemoveAllPushNotificationsOperation: "PNRemoveAllPushNotificationsOperation", PNWhereNowOperation: "PNWhereNowOperation", PNSetStateOperation: "PNSetStateOperation", PNHereNowOperation: "PNHereNowOperation", PNGetStateOperation: "PNGetStateOperation", PNHeartbeatOperation: "PNHeartbeatOperation", PNChannelGroupsOperation: "PNChannelGroupsOperation", PNRemoveGroupOperation: "PNRemoveGroupOperation", PNChannelsForGroupOperation: "PNChannelsForGroupOperation", PNAddChannelsToGroupOperation: "PNAddChannelsToGroupOperation", PNRemoveChannelsFromGroupOperation: "PNRemoveChannelsFromGroupOperation", PNAccessManagerGrant: "PNAccessManagerGrant", PNAccessManagerGrantToken: "PNAccessManagerGrantToken", PNAccessManagerAudit: "PNAccessManagerAudit", PNAccessManagerRevokeToken: "PNAccessManagerRevokeToken", PNHandshakeOperation: "PNHandshakeOperation", PNReceiveMessagesOperation: "PNReceiveMessagesOperation" }, R = function() {
        function e2(e3) {
          this._maximumSamplesCount = 100, this._trackedLatencies = {}, this._latencies = {}, this._maximumSamplesCount = e3.maximumSamplesCount || this._maximumSamplesCount;
        }
        return e2.prototype.operationsLatencyForRequest = function() {
          var e3 = this, t2 = {};
          return Object.keys(this._latencies).forEach(function(n2) {
            var r2 = e3._latencies[n2], i2 = e3._averageLatency(r2);
            i2 > 0 && (t2["l_".concat(n2)] = i2);
          }), t2;
        }, e2.prototype.startLatencyMeasure = function(e3, t2) {
          e3 !== j.PNSubscribeOperation && t2 && (this._trackedLatencies[t2] = Date.now());
        }, e2.prototype.stopLatencyMeasure = function(e3, t2) {
          if (e3 !== j.PNSubscribeOperation && t2) {
            var n2 = this._endpointName(e3), r2 = this._latencies[n2], i2 = this._trackedLatencies[t2];
            r2 || (this._latencies[n2] = [], r2 = this._latencies[n2]), r2.push(Date.now() - i2), r2.length > this._maximumSamplesCount && r2.splice(0, r2.length - this._maximumSamplesCount), delete this._trackedLatencies[t2];
          }
        }, e2.prototype._averageLatency = function(e3) {
          return Math.floor(e3.reduce(function(e4, t2) {
            return e4 + t2;
          }, 0) / e3.length);
        }, e2.prototype._endpointName = function(e3) {
          var t2 = null;
          switch (e3) {
            case j.PNPublishOperation:
              t2 = "pub";
              break;
            case j.PNSignalOperation:
              t2 = "sig";
              break;
            case j.PNHistoryOperation:
            case j.PNFetchMessagesOperation:
            case j.PNDeleteMessagesOperation:
            case j.PNMessageCounts:
              t2 = "hist";
              break;
            case j.PNUnsubscribeOperation:
            case j.PNWhereNowOperation:
            case j.PNHereNowOperation:
            case j.PNHeartbeatOperation:
            case j.PNSetStateOperation:
            case j.PNGetStateOperation:
              t2 = "pres";
              break;
            case j.PNAddChannelsToGroupOperation:
            case j.PNRemoveChannelsFromGroupOperation:
            case j.PNChannelGroupsOperation:
            case j.PNRemoveGroupOperation:
            case j.PNChannelsForGroupOperation:
              t2 = "cg";
              break;
            case j.PNPushNotificationEnabledChannelsOperation:
            case j.PNRemoveAllPushNotificationsOperation:
              t2 = "push";
              break;
            case j.PNCreateUserOperation:
            case j.PNUpdateUserOperation:
            case j.PNDeleteUserOperation:
            case j.PNGetUserOperation:
            case j.PNGetUsersOperation:
            case j.PNCreateSpaceOperation:
            case j.PNUpdateSpaceOperation:
            case j.PNDeleteSpaceOperation:
            case j.PNGetSpaceOperation:
            case j.PNGetSpacesOperation:
            case j.PNGetMembersOperation:
            case j.PNUpdateMembersOperation:
            case j.PNGetMembershipsOperation:
            case j.PNUpdateMembershipsOperation:
              t2 = "obj";
              break;
            case j.PNAddMessageActionOperation:
            case j.PNRemoveMessageActionOperation:
            case j.PNGetMessageActionsOperation:
              t2 = "msga";
              break;
            case j.PNAccessManagerGrant:
            case j.PNAccessManagerAudit:
              t2 = "pam";
              break;
            case j.PNAccessManagerGrantToken:
            case j.PNAccessManagerRevokeToken:
              t2 = "pamv3";
              break;
            default:
              t2 = "time";
          }
          return t2;
        }, e2;
      }(), U = function() {
        function e2(e3, t2, n2) {
          this._payload = e3, this._setDefaultPayloadStructure(), this.title = t2, this.body = n2;
        }
        return Object.defineProperty(e2.prototype, "payload", { get: function() {
          return this._payload;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "title", { set: function(e3) {
          this._title = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "subtitle", { set: function(e3) {
          this._subtitle = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "body", { set: function(e3) {
          this._body = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "badge", { set: function(e3) {
          this._badge = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "sound", { set: function(e3) {
          this._sound = e3;
        }, enumerable: false, configurable: true }), e2.prototype._setDefaultPayloadStructure = function() {
        }, e2.prototype.toObject = function() {
          return {};
        }, e2;
      }(), x = function(e2) {
        function r2() {
          return e2 !== null && e2.apply(this, arguments) || this;
        }
        return t(r2, e2), Object.defineProperty(r2.prototype, "configurations", { set: function(e3) {
          e3 && e3.length && (this._configurations = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "notification", { get: function() {
          return this._payload.aps;
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "title", { get: function() {
          return this._title;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.aps.alert.title = e3, this._title = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "subtitle", { get: function() {
          return this._subtitle;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.aps.alert.subtitle = e3, this._subtitle = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "body", { get: function() {
          return this._body;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.aps.alert.body = e3, this._body = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "badge", { get: function() {
          return this._badge;
        }, set: function(e3) {
          e3 != null && (this._payload.aps.badge = e3, this._badge = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "sound", { get: function() {
          return this._sound;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.aps.sound = e3, this._sound = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "silent", { set: function(e3) {
          this._isSilent = e3;
        }, enumerable: false, configurable: true }), r2.prototype._setDefaultPayloadStructure = function() {
          this._payload.aps = { alert: {} };
        }, r2.prototype.toObject = function() {
          var e3 = this, t2 = n({}, this._payload), r3 = t2.aps, i2 = r3.alert;
          if (this._isSilent && (r3["content-available"] = 1), this._apnsPushType === "apns2") {
            if (!this._configurations || !this._configurations.length)
              throw new ReferenceError("APNS2 configuration is missing");
            var o2 = [];
            this._configurations.forEach(function(t3) {
              o2.push(e3._objectFromAPNS2Configuration(t3));
            }), o2.length && (t2.pn_push = o2);
          }
          return i2 && Object.keys(i2).length || delete r3.alert, this._isSilent && (delete r3.alert, delete r3.badge, delete r3.sound, i2 = {}), this._isSilent || Object.keys(i2).length ? t2 : null;
        }, r2.prototype._objectFromAPNS2Configuration = function(e3) {
          var t2 = this;
          if (!e3.targets || !e3.targets.length)
            throw new ReferenceError("At least one APNS2 target should be provided");
          var n2 = [];
          e3.targets.forEach(function(e4) {
            n2.push(t2._objectFromAPNSTarget(e4));
          });
          var r3 = e3.collapseId, i2 = e3.expirationDate, o2 = { auth_method: "token", targets: n2, version: "v2" };
          return r3 && r3.length && (o2.collapse_id = r3), i2 && (o2.expiration = i2.toISOString()), o2;
        }, r2.prototype._objectFromAPNSTarget = function(e3) {
          if (!e3.topic || !e3.topic.length)
            throw new TypeError("Target 'topic' undefined.");
          var t2 = e3.topic, n2 = e3.environment, r3 = n2 === void 0 ? "development" : n2, i2 = e3.excludedDevices, o2 = i2 === void 0 ? [] : i2, s2 = { topic: t2, environment: r3 };
          return o2.length && (s2.excluded_devices = o2), s2;
        }, r2;
      }(U), D = function(e2) {
        function r2() {
          return e2 !== null && e2.apply(this, arguments) || this;
        }
        return t(r2, e2), Object.defineProperty(r2.prototype, "backContent", { get: function() {
          return this._backContent;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.back_content = e3, this._backContent = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "backTitle", { get: function() {
          return this._backTitle;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.back_title = e3, this._backTitle = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "count", { get: function() {
          return this._count;
        }, set: function(e3) {
          e3 != null && (this._payload.count = e3, this._count = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "title", { get: function() {
          return this._title;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.title = e3, this._title = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "type", { get: function() {
          return this._type;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.type = e3, this._type = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "subtitle", { get: function() {
          return this.backTitle;
        }, set: function(e3) {
          this.backTitle = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "body", { get: function() {
          return this.backContent;
        }, set: function(e3) {
          this.backContent = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "badge", { get: function() {
          return this.count;
        }, set: function(e3) {
          this.count = e3;
        }, enumerable: false, configurable: true }), r2.prototype.toObject = function() {
          return Object.keys(this._payload).length ? n({}, this._payload) : null;
        }, r2;
      }(U), I = function(e2) {
        function i2() {
          return e2 !== null && e2.apply(this, arguments) || this;
        }
        return t(i2, e2), Object.defineProperty(i2.prototype, "notification", { get: function() {
          return this._payload.notification;
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "data", { get: function() {
          return this._payload.data;
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "title", { get: function() {
          return this._title;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.notification.title = e3, this._title = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "body", { get: function() {
          return this._body;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.notification.body = e3, this._body = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "sound", { get: function() {
          return this._sound;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.notification.sound = e3, this._sound = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "icon", { get: function() {
          return this._icon;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.notification.icon = e3, this._icon = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "tag", { get: function() {
          return this._tag;
        }, set: function(e3) {
          e3 && e3.length && (this._payload.notification.tag = e3, this._tag = e3);
        }, enumerable: false, configurable: true }), Object.defineProperty(i2.prototype, "silent", { set: function(e3) {
          this._isSilent = e3;
        }, enumerable: false, configurable: true }), i2.prototype._setDefaultPayloadStructure = function() {
          this._payload.notification = {}, this._payload.data = {};
        }, i2.prototype.toObject = function() {
          var e3 = n({}, this._payload.data), t2 = null, i3 = {};
          if (Object.keys(this._payload).length > 2) {
            var o2 = this._payload;
            o2.notification, o2.data;
            var s2 = r(o2, ["notification", "data"]);
            e3 = n(n({}, e3), s2);
          }
          return this._isSilent ? e3.notification = this._payload.notification : t2 = this._payload.notification, Object.keys(e3).length && (i3.data = e3), t2 && Object.keys(t2).length && (i3.notification = t2), Object.keys(i3).length ? i3 : null;
        }, i2;
      }(U), G = function() {
        function e2(e3, t2) {
          this._payload = { apns: {}, mpns: {}, fcm: {} }, this._title = e3, this._body = t2, this.apns = new x(this._payload.apns, e3, t2), this.mpns = new D(this._payload.mpns, e3, t2), this.fcm = new I(this._payload.fcm, e3, t2);
        }
        return Object.defineProperty(e2.prototype, "debugging", { set: function(e3) {
          this._debugging = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "title", { get: function() {
          return this._title;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "body", { get: function() {
          return this._body;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "subtitle", { get: function() {
          return this._subtitle;
        }, set: function(e3) {
          this._subtitle = e3, this.apns.subtitle = e3, this.mpns.subtitle = e3, this.fcm.subtitle = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "badge", { get: function() {
          return this._badge;
        }, set: function(e3) {
          this._badge = e3, this.apns.badge = e3, this.mpns.badge = e3, this.fcm.badge = e3;
        }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "sound", { get: function() {
          return this._sound;
        }, set: function(e3) {
          this._sound = e3, this.apns.sound = e3, this.mpns.sound = e3, this.fcm.sound = e3;
        }, enumerable: false, configurable: true }), e2.prototype.buildPayload = function(e3) {
          var t2 = {};
          if (e3.includes("apns") || e3.includes("apns2")) {
            this.apns._apnsPushType = e3.includes("apns") ? "apns" : "apns2";
            var n2 = this.apns.toObject();
            n2 && Object.keys(n2).length && (t2.pn_apns = n2);
          }
          if (e3.includes("mpns")) {
            var r2 = this.mpns.toObject();
            r2 && Object.keys(r2).length && (t2.pn_mpns = r2);
          }
          if (e3.includes("fcm")) {
            var i2 = this.fcm.toObject();
            i2 && Object.keys(i2).length && (t2.pn_gcm = i2);
          }
          return Object.keys(t2).length && this._debugging && (t2.pn_debug = true), t2;
        }, e2;
      }(), K = function() {
        function e2() {
          this._listeners = [];
        }
        return e2.prototype.addListener = function(e3) {
          this._listeners.push(e3);
        }, e2.prototype.removeListener = function(e3) {
          var t2 = [];
          this._listeners.forEach(function(n2) {
            n2 !== e3 && t2.push(n2);
          }), this._listeners = t2;
        }, e2.prototype.removeAllListeners = function() {
          this._listeners = [];
        }, e2.prototype.announcePresence = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.presence && t2.presence(e3);
          });
        }, e2.prototype.announceStatus = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.status && t2.status(e3);
          });
        }, e2.prototype.announceMessage = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.message && t2.message(e3);
          });
        }, e2.prototype.announceSignal = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.signal && t2.signal(e3);
          });
        }, e2.prototype.announceMessageAction = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.messageAction && t2.messageAction(e3);
          });
        }, e2.prototype.announceFile = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.file && t2.file(e3);
          });
        }, e2.prototype.announceObjects = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.objects && t2.objects(e3);
          });
        }, e2.prototype.announceUser = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.user && t2.user(e3);
          });
        }, e2.prototype.announceSpace = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.space && t2.space(e3);
          });
        }, e2.prototype.announceMembership = function(e3) {
          this._listeners.forEach(function(t2) {
            t2.membership && t2.membership(e3);
          });
        }, e2.prototype.announceNetworkUp = function() {
          var e3 = {};
          e3.category = A.PNNetworkUpCategory, this.announceStatus(e3);
        }, e2.prototype.announceNetworkDown = function() {
          var e3 = {};
          e3.category = A.PNNetworkDownCategory, this.announceStatus(e3);
        }, e2;
      }(), F = function() {
        function e2(e3, t2) {
          this._config = e3, this._cbor = t2;
        }
        return e2.prototype.setToken = function(e3) {
          e3 && e3.length > 0 ? this._token = e3 : this._token = void 0;
        }, e2.prototype.getToken = function() {
          return this._token;
        }, e2.prototype.extractPermissions = function(e3) {
          var t2 = { read: false, write: false, manage: false, delete: false, get: false, update: false, join: false };
          return (128 & e3) == 128 && (t2.join = true), (64 & e3) == 64 && (t2.update = true), (32 & e3) == 32 && (t2.get = true), (8 & e3) == 8 && (t2.delete = true), (4 & e3) == 4 && (t2.manage = true), (2 & e3) == 2 && (t2.write = true), (1 & e3) == 1 && (t2.read = true), t2;
        }, e2.prototype.parseToken = function(e3) {
          var t2 = this, n2 = this._cbor.decodeToken(e3);
          if (n2 !== void 0) {
            var r2 = n2.res.uuid ? Object.keys(n2.res.uuid) : [], i2 = Object.keys(n2.res.chan), o2 = Object.keys(n2.res.grp), s2 = n2.pat.uuid ? Object.keys(n2.pat.uuid) : [], a2 = Object.keys(n2.pat.chan), u2 = Object.keys(n2.pat.grp), c2 = { version: n2.v, timestamp: n2.t, ttl: n2.ttl, authorized_uuid: n2.uuid }, l2 = r2.length > 0, p2 = i2.length > 0, h2 = o2.length > 0;
            (l2 || p2 || h2) && (c2.resources = {}, l2 && (c2.resources.uuids = {}, r2.forEach(function(e4) {
              c2.resources.uuids[e4] = t2.extractPermissions(n2.res.uuid[e4]);
            })), p2 && (c2.resources.channels = {}, i2.forEach(function(e4) {
              c2.resources.channels[e4] = t2.extractPermissions(n2.res.chan[e4]);
            })), h2 && (c2.resources.groups = {}, o2.forEach(function(e4) {
              c2.resources.groups[e4] = t2.extractPermissions(n2.res.grp[e4]);
            })));
            var f2 = s2.length > 0, d2 = a2.length > 0, g2 = u2.length > 0;
            return (f2 || d2 || g2) && (c2.patterns = {}, f2 && (c2.patterns.uuids = {}, s2.forEach(function(e4) {
              c2.patterns.uuids[e4] = t2.extractPermissions(n2.pat.uuid[e4]);
            })), d2 && (c2.patterns.channels = {}, a2.forEach(function(e4) {
              c2.patterns.channels[e4] = t2.extractPermissions(n2.pat.chan[e4]);
            })), g2 && (c2.patterns.groups = {}, u2.forEach(function(e4) {
              c2.patterns.groups[e4] = t2.extractPermissions(n2.pat.grp[e4]);
            }))), Object.keys(n2.meta).length > 0 && (c2.meta = n2.meta), c2.signature = n2.sig, c2;
          }
        }, e2;
      }(), L = function(e2) {
        function n2(t2, n3) {
          var r2 = this.constructor, i2 = e2.call(this, t2) || this;
          return i2.name = i2.constructor.name, i2.status = n3, i2.message = t2, Object.setPrototypeOf(i2, r2.prototype), i2;
        }
        return t(n2, e2), n2;
      }(Error);
      function B(e2) {
        return (t2 = { message: e2 }).type = "validationError", t2.error = true, t2;
        var t2;
      }
      function H(e2, t2, n2) {
        return e2.usePost && e2.usePost(t2, n2) ? e2.postURL(t2, n2) : e2.usePatch && e2.usePatch(t2, n2) ? e2.patchURL(t2, n2) : e2.useGetFile && e2.useGetFile(t2, n2) ? e2.getFileURL(t2, n2) : e2.getURL(t2, n2);
      }
      function q(e2) {
        if (e2.sdkName)
          return e2.sdkName;
        var t2 = "PubNub-JS-".concat(e2.sdkFamily);
        e2.partnerId && (t2 += "-".concat(e2.partnerId)), t2 += "/".concat(e2.getVersion());
        var n2 = e2._getPnsdkSuffix(" ");
        return n2.length > 0 && (t2 += n2), t2;
      }
      function z(e2, t2, n2) {
        return t2.usePost && t2.usePost(e2, n2) ? "POST" : t2.usePatch && t2.usePatch(e2, n2) ? "PATCH" : t2.useDelete && t2.useDelete(e2, n2) ? "DELETE" : t2.useGetFile && t2.useGetFile(e2, n2) ? "GETFILE" : "GET";
      }
      function V(e2, t2, n2, r2, i2) {
        var o2 = e2.config, s2 = e2.crypto, a2 = z(e2, i2, r2);
        n2.timestamp = Math.floor(new Date().getTime() / 1e3), i2.getOperation() === "PNPublishOperation" && i2.usePost && i2.usePost(e2, r2) && (a2 = "GET"), a2 === "GETFILE" && (a2 = "GET");
        var u2 = "".concat(a2, "\n").concat(o2.publishKey, "\n").concat(t2, "\n").concat(E.signPamFromParams(n2), "\n");
        if (a2 === "POST")
          u2 += typeof (c2 = i2.postPayload(e2, r2)) == "string" ? c2 : JSON.stringify(c2);
        else if (a2 === "PATCH") {
          var c2;
          u2 += typeof (c2 = i2.patchPayload(e2, r2)) == "string" ? c2 : JSON.stringify(c2);
        }
        var l2 = "v2.".concat(s2.HMACSHA256(u2));
        l2 = (l2 = (l2 = l2.replace(/\+/g, "-")).replace(/\//g, "_")).replace(/=+$/, ""), n2.signature = l2;
      }
      function J(e2, t2) {
        for (var r2 = [], i2 = 2; i2 < arguments.length; i2++)
          r2[i2 - 2] = arguments[i2];
        var o2 = e2.networking, s2 = e2.config, a2 = e2.telemetryManager, u2 = e2.tokenManager, c2 = m(), l2 = null, p2 = null, h2 = {};
        t2.getOperation() === j.PNTimeOperation || t2.getOperation() === j.PNChannelGroupsOperation ? l2 = r2[0] : (h2 = r2[0], l2 = r2[1]), typeof Promise == "undefined" || l2 || (p2 = E.createPromise());
        var f2 = t2.validateParams(e2, h2);
        if (f2)
          return l2 ? l2(B(f2)) : p2 ? (p2.reject(new L("Validation failed, check status for details", B(f2))), p2.promise) : void 0;
        var d2, g2 = t2.prepareParams(e2, h2), y2 = H(t2, e2, h2), b2 = { url: y2, operation: t2.getOperation(), timeout: t2.getRequestTimeout(e2), headers: t2.getRequestHeaders ? t2.getRequestHeaders() : {}, ignoreBody: typeof t2.ignoreBody == "function" && t2.ignoreBody(e2), forceBuffered: typeof t2.forceBuffered == "function" ? t2.forceBuffered(e2, h2) : null, abortSignal: typeof t2.getAbortSignal == "function" ? t2.getAbortSignal(e2, h2) : null };
        g2.uuid = s2.UUID, g2.pnsdk = q(s2);
        var v2 = a2.operationsLatencyForRequest();
        if (Object.keys(v2).length && (g2 = n(n({}, g2), v2)), s2.useInstanceId && (g2.instanceid = s2.instanceId), s2.useRequestId && (g2.requestid = c2), t2.isAuthSupported()) {
          var _2 = u2.getToken() || s2.getAuthKey();
          _2 && (g2.auth = _2);
        }
        s2.secretKey && V(e2, y2, g2, h2, t2);
        var O2 = function(n2, r3) {
          if (n2.error)
            return t2.handleError && t2.handleError(e2, h2, n2), void (l2 ? l2(n2) : p2 && p2.reject(new L("PubNub call failed, check status for details", n2)));
          a2.stopLatencyMeasure(t2.getOperation(), c2);
          var i3 = t2.handleResponse(e2, r3, h2);
          typeof (i3 == null ? void 0 : i3.then) != "function" && (i3 = Promise.resolve(i3)), i3.then(function(e3) {
            l2 ? l2(n2, e3) : p2 && p2.fulfill(e3);
          }).catch(function(e3) {
            if (l2) {
              var n3 = e3;
              t2.getOperation() === j.PNSubscribeOperation && (n3 = { statusCode: 400, error: true, operation: t2.getOperation(), errorData: e3, category: A.PNUnknownCategory }), l2(n3, null);
            } else
              p2 && p2.reject(new L("PubNub call failed, check status for details", e3));
          });
        };
        if (a2.startLatencyMeasure(t2.getOperation(), c2), z(e2, t2, h2) === "POST") {
          var P2 = t2.postPayload(e2, h2);
          d2 = o2.POST(g2, P2, b2, O2);
        } else if (z(e2, t2, h2) === "PATCH") {
          P2 = t2.patchPayload(e2, h2);
          d2 = o2.PATCH(g2, P2, b2, O2);
        } else
          d2 = z(e2, t2, h2) === "DELETE" ? o2.DELETE(g2, b2, O2) : z(e2, t2, h2) === "GETFILE" ? o2.GETFILE(g2, b2, O2) : o2.GET(g2, b2, O2);
        return t2.getOperation() === j.PNSubscribeOperation ? d2 : p2 ? p2.promise : void 0;
      }
      var W = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNAddChannelsToGroupOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channels, r2 = t2.channelGroup, i2 = e2.config;
        return r2 ? n2 && n2.length !== 0 ? i2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Channels" : "Missing Channel Group";
      }, getURL: function(e2, t2) {
        var n2 = t2.channelGroup, r2 = e2.config;
        return "/v1/channel-registration/sub-key/".concat(r2.subscribeKey, "/channel-group/").concat(E.encodeString(n2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channels;
        return { add: (n2 === void 0 ? [] : n2).join(",") };
      }, handleResponse: function() {
        return {};
      } });
      var X = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNRemoveChannelsFromGroupOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channels, r2 = t2.channelGroup, i2 = e2.config;
        return r2 ? n2 && n2.length !== 0 ? i2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Channels" : "Missing Channel Group";
      }, getURL: function(e2, t2) {
        var n2 = t2.channelGroup, r2 = e2.config;
        return "/v1/channel-registration/sub-key/".concat(r2.subscribeKey, "/channel-group/").concat(E.encodeString(n2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channels;
        return { remove: (n2 === void 0 ? [] : n2).join(",") };
      }, handleResponse: function() {
        return {};
      } });
      var $ = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNRemoveGroupOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channelGroup, r2 = e2.config;
        return n2 ? r2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Channel Group";
      }, getURL: function(e2, t2) {
        var n2 = t2.channelGroup, r2 = e2.config;
        return "/v1/channel-registration/sub-key/".concat(r2.subscribeKey, "/channel-group/").concat(E.encodeString(n2), "/remove");
      }, isAuthSupported: function() {
        return true;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, prepareParams: function() {
        return {};
      }, handleResponse: function() {
        return {};
      } });
      var Q = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNChannelGroupsOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2) {
        var t2 = e2.config;
        return "/v1/channel-registration/sub-key/".concat(t2.subscribeKey, "/channel-group");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { groups: t2.payload.groups };
      } });
      var Y = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNChannelsForGroupOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channelGroup, r2 = e2.config;
        return n2 ? r2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Channel Group";
      }, getURL: function(e2, t2) {
        var n2 = t2.channelGroup, r2 = e2.config;
        return "/v1/channel-registration/sub-key/".concat(r2.subscribeKey, "/channel-group/").concat(E.encodeString(n2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { channels: t2.payload.channels };
      } });
      var Z = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNPushNotificationEnabledChannelsOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = t2.channels, o2 = t2.topic, s2 = e2.config;
        return n2 ? r2 ? r2 !== "apns2" || o2 ? i2 && i2.length !== 0 ? s2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Channels" : "Missing APNS2 topic" : "Missing GW Type (pushGateway: gcm, apns or apns2)" : "Missing Device ID (device)";
      }, getURL: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = e2.config;
        return r2 === "apns2" ? "/v2/push/sub-key/".concat(i2.subscribeKey, "/devices-apns2/").concat(n2) : "/v1/push/sub-key/".concat(i2.subscribeKey, "/devices/").concat(n2);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var r2 = t2.pushGateway, i2 = t2.channels, o2 = i2 === void 0 ? [] : i2, s2 = t2.environment, a2 = s2 === void 0 ? "development" : s2, u2 = t2.topic, c2 = { type: r2, add: o2.join(",") };
        return r2 === "apns2" && delete (c2 = n(n({}, c2), { environment: a2, topic: u2 })).type, c2;
      }, handleResponse: function() {
        return {};
      } });
      var ee = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNPushNotificationEnabledChannelsOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = t2.channels, o2 = t2.topic, s2 = e2.config;
        return n2 ? r2 ? r2 !== "apns2" || o2 ? i2 && i2.length !== 0 ? s2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Channels" : "Missing APNS2 topic" : "Missing GW Type (pushGateway: gcm, apns or apns2)" : "Missing Device ID (device)";
      }, getURL: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = e2.config;
        return r2 === "apns2" ? "/v2/push/sub-key/".concat(i2.subscribeKey, "/devices-apns2/").concat(n2) : "/v1/push/sub-key/".concat(i2.subscribeKey, "/devices/").concat(n2);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var r2 = t2.pushGateway, i2 = t2.channels, o2 = i2 === void 0 ? [] : i2, s2 = t2.environment, a2 = s2 === void 0 ? "development" : s2, u2 = t2.topic, c2 = { type: r2, remove: o2.join(",") };
        return r2 === "apns2" && delete (c2 = n(n({}, c2), { environment: a2, topic: u2 })).type, c2;
      }, handleResponse: function() {
        return {};
      } });
      var te = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNPushNotificationEnabledChannelsOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = t2.topic, o2 = e2.config;
        return n2 ? r2 ? r2 !== "apns2" || i2 ? o2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing APNS2 topic" : "Missing GW Type (pushGateway: gcm, apns or apns2)" : "Missing Device ID (device)";
      }, getURL: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = e2.config;
        return r2 === "apns2" ? "/v2/push/sub-key/".concat(i2.subscribeKey, "/devices-apns2/").concat(n2) : "/v1/push/sub-key/".concat(i2.subscribeKey, "/devices/").concat(n2);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var r2 = t2.pushGateway, i2 = t2.environment, o2 = i2 === void 0 ? "development" : i2, s2 = t2.topic, a2 = { type: r2 };
        return r2 === "apns2" && delete (a2 = n(n({}, a2), { environment: o2, topic: s2 })).type, a2;
      }, handleResponse: function(e2, t2) {
        return { channels: t2 };
      } });
      var ne = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNRemoveAllPushNotificationsOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = t2.topic, o2 = e2.config;
        return n2 ? r2 ? r2 !== "apns2" || i2 ? o2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing APNS2 topic" : "Missing GW Type (pushGateway: gcm, apns or apns2)" : "Missing Device ID (device)";
      }, getURL: function(e2, t2) {
        var n2 = t2.device, r2 = t2.pushGateway, i2 = e2.config;
        return r2 === "apns2" ? "/v2/push/sub-key/".concat(i2.subscribeKey, "/devices-apns2/").concat(n2, "/remove") : "/v1/push/sub-key/".concat(i2.subscribeKey, "/devices/").concat(n2, "/remove");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var r2 = t2.pushGateway, i2 = t2.environment, o2 = i2 === void 0 ? "development" : i2, s2 = t2.topic, a2 = { type: r2 };
        return r2 === "apns2" && delete (a2 = n(n({}, a2), { environment: o2, topic: s2 })).type, a2;
      }, handleResponse: function() {
        return {};
      } });
      var re = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNUnsubscribeOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels, i2 = r2 === void 0 ? [] : r2, o2 = i2.length > 0 ? i2.join(",") : ",";
        return "/v2/presence/sub-key/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(o2), "/leave");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channelGroups, r2 = n2 === void 0 ? [] : n2, i2 = {};
        return r2.length > 0 && (i2["channel-group"] = r2.join(",")), i2;
      }, handleResponse: function() {
        return {};
      } });
      var ie = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNWhereNowOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.uuid, i2 = r2 === void 0 ? n2.UUID : r2;
        return "/v2/presence/sub-key/".concat(n2.subscribeKey, "/uuid/").concat(E.encodeString(i2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return t2.payload ? { channels: t2.payload.channels } : { channels: [] };
      } });
      var oe = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNHeartbeatOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels, i2 = r2 === void 0 ? [] : r2, o2 = i2.length > 0 ? i2.join(",") : ",";
        return "/v2/presence/sub-key/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(o2), "/heartbeat");
      }, isAuthSupported: function() {
        return true;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channelGroups, r2 = n2 === void 0 ? [] : n2, i2 = t2.state, o2 = i2 === void 0 ? {} : i2, s2 = e2.config, a2 = {};
        return r2.length > 0 && (a2["channel-group"] = r2.join(",")), a2.state = JSON.stringify(o2), a2.heartbeat = s2.getPresenceTimeout(), a2;
      }, handleResponse: function() {
        return {};
      } });
      var se = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNGetStateOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.uuid, i2 = r2 === void 0 ? n2.UUID : r2, o2 = t2.channels, s2 = o2 === void 0 ? [] : o2, a2 = s2.length > 0 ? s2.join(",") : ",";
        return "/v2/presence/sub-key/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(a2), "/uuid/").concat(i2);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channelGroups, r2 = n2 === void 0 ? [] : n2, i2 = {};
        return r2.length > 0 && (i2["channel-group"] = r2.join(",")), i2;
      }, handleResponse: function(e2, t2, n2) {
        var r2 = n2.channels, i2 = r2 === void 0 ? [] : r2, o2 = n2.channelGroups, s2 = o2 === void 0 ? [] : o2, a2 = {};
        return i2.length === 1 && s2.length === 0 ? a2[i2[0]] = t2.payload : a2 = t2.payload, { channels: a2 };
      } });
      var ae = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNSetStateOperation;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.state, i2 = t2.channels, o2 = i2 === void 0 ? [] : i2, s2 = t2.channelGroups, a2 = s2 === void 0 ? [] : s2;
        return r2 ? n2.subscribeKey ? o2.length === 0 && a2.length === 0 ? "Please provide a list of channels and/or channel-groups" : void 0 : "Missing Subscribe Key" : "Missing State";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels, i2 = r2 === void 0 ? [] : r2, o2 = i2.length > 0 ? i2.join(",") : ",";
        return "/v2/presence/sub-key/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(o2), "/uuid/").concat(E.encodeString(n2.UUID), "/data");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.state, r2 = t2.channelGroups, i2 = r2 === void 0 ? [] : r2, o2 = {};
        return o2.state = JSON.stringify(n2), i2.length > 0 && (o2["channel-group"] = i2.join(",")), o2;
      }, handleResponse: function(e2, t2) {
        return { state: t2.payload };
      } });
      var ue = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNHereNowOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels, i2 = r2 === void 0 ? [] : r2, o2 = t2.channelGroups, s2 = o2 === void 0 ? [] : o2, a2 = "/v2/presence/sub-key/".concat(n2.subscribeKey);
        if (i2.length > 0 || s2.length > 0) {
          var u2 = i2.length > 0 ? i2.join(",") : ",";
          a2 += "/channel/".concat(E.encodeString(u2));
        }
        return a2;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var r2 = t2.channelGroups, i2 = r2 === void 0 ? [] : r2, o2 = t2.includeUUIDs, s2 = o2 === void 0 || o2, a2 = t2.includeState, u2 = a2 !== void 0 && a2, c2 = t2.queryParameters, l2 = c2 === void 0 ? {} : c2, p2 = {};
        return s2 || (p2.disable_uuids = 1), u2 && (p2.state = 1), i2.length > 0 && (p2["channel-group"] = i2.join(",")), p2 = n(n({}, p2), l2);
      }, handleResponse: function(e2, t2, n2) {
        var r2 = n2.channels, i2 = r2 === void 0 ? [] : r2, o2 = n2.channelGroups, s2 = o2 === void 0 ? [] : o2, a2 = n2.includeUUIDs, u2 = a2 === void 0 || a2, c2 = n2.includeState, l2 = c2 !== void 0 && c2;
        return i2.length > 1 || s2.length > 0 || s2.length === 0 && i2.length === 0 ? function() {
          var e3 = {};
          return e3.totalChannels = t2.payload.total_channels, e3.totalOccupancy = t2.payload.total_occupancy, e3.channels = {}, Object.keys(t2.payload.channels).forEach(function(n3) {
            var r3 = t2.payload.channels[n3], i3 = [];
            return e3.channels[n3] = { occupants: i3, name: n3, occupancy: r3.occupancy }, u2 && r3.uuids.forEach(function(e4) {
              l2 ? i3.push({ state: e4.state, uuid: e4.uuid }) : i3.push({ state: null, uuid: e4 });
            }), e3;
          }), e3;
        }() : function() {
          var e3 = {}, n3 = [];
          return e3.totalChannels = 1, e3.totalOccupancy = t2.occupancy, e3.channels = {}, e3.channels[i2[0]] = { occupants: n3, name: i2[0], occupancy: t2.occupancy }, u2 && t2.uuids && t2.uuids.forEach(function(e4) {
            l2 ? n3.push({ state: e4.state, uuid: e4.uuid }) : n3.push({ state: null, uuid: e4 });
          }), e3;
        }();
      }, handleError: function(e2, t2, n2) {
        n2.statusCode !== 402 || this.getURL(e2, t2).includes("channel") || (n2.errorData.message = "You have tried to perform a Global Here Now operation, your keyset configuration does not support that. Please provide a channel, or enable the Global Here Now feature from the Portal.");
      } });
      var ce = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNAddMessageActionOperation;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.action, i2 = t2.channel;
        return t2.messageTimetoken ? n2.subscribeKey ? i2 ? r2 ? r2.value ? r2.type ? r2.type.length > 15 ? "Action.type value exceed maximum length of 15" : void 0 : "Missing Action.type" : "Missing Action.value" : "Missing Action" : "Missing message channel" : "Missing Subscribe Key" : "Missing message timetoken";
      }, usePost: function() {
        return true;
      }, postURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel, i2 = t2.messageTimetoken;
        return "/v1/message-actions/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(r2), "/message/").concat(i2);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, getRequestHeaders: function() {
        return { "Content-Type": "application/json" };
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, postPayload: function(e2, t2) {
        return t2.action;
      }, handleResponse: function(e2, t2) {
        return { data: t2.data };
      } });
      var le = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNRemoveMessageActionOperation;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel, i2 = t2.actionTimetoken;
        return t2.messageTimetoken ? i2 ? n2.subscribeKey ? r2 ? void 0 : "Missing message channel" : "Missing Subscribe Key" : "Missing action timetoken" : "Missing message timetoken";
      }, useDelete: function() {
        return true;
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel, i2 = t2.actionTimetoken, o2 = t2.messageTimetoken;
        return "/v1/message-actions/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(r2), "/message/").concat(o2, "/action/").concat(i2);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { data: t2.data };
      } });
      var pe = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNGetMessageActionsOperation;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel;
        return n2.subscribeKey ? r2 ? void 0 : "Missing message channel" : "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel;
        return "/v1/message-actions/".concat(n2.subscribeKey, "/channel/").concat(E.encodeString(r2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.limit, r2 = t2.start, i2 = t2.end, o2 = {};
        return n2 && (o2.limit = n2), r2 && (o2.start = r2), i2 && (o2.end = i2), o2;
      }, handleResponse: function(e2, t2) {
        var n2 = { data: t2.data, start: null, end: null };
        return n2.data.length && (n2.end = n2.data[n2.data.length - 1].actionTimetoken, n2.start = n2.data[0].actionTimetoken), n2;
      } }), he = { getOperation: function() {
        return j.PNListFilesOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.channel))
          return "channel can't be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v1/files/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel), "/files");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = {};
        return t2.limit && (n2.limit = t2.limit), t2.next && (n2.next = t2.next), n2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, next: t2.next, count: t2.count };
      } }, fe = { getOperation: function() {
        return j.PNGenerateUploadUrlOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channel) ? (t2 == null ? void 0 : t2.name) ? void 0 : "name can't be empty" : "channel can't be empty";
      }, usePost: function() {
        return true;
      }, postURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v1/files/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel), "/generate-upload-url");
      }, postPayload: function(e2, t2) {
        return { name: t2.name };
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, file_upload_request: t2.file_upload_request };
      } }, de = { getOperation: function() {
        return j.PNPublishFileOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channel) ? (t2 == null ? void 0 : t2.fileId) ? (t2 == null ? void 0 : t2.fileName) ? void 0 : "file name can't be empty" : "file id can't be empty" : "channel can't be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = n2.publishKey, i2 = n2.subscribeKey, o2 = function(e3, t3) {
          var n3 = e3.crypto, r3 = e3.config, i3 = JSON.stringify(t3);
          return r3.cipherKey && (i3 = n3.encrypt(i3), i3 = JSON.stringify(i3)), i3 || "";
        }(e2, { message: t2.message, file: { name: t2.fileName, id: t2.fileId } });
        return "/v1/files/publish-file/".concat(r2, "/").concat(i2, "/0/").concat(E.encodeString(t2.channel), "/0/").concat(E.encodeString(o2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = {};
        return t2.ttl && (n2.ttl = t2.ttl), t2.storeInHistory !== void 0 && (n2.store = t2.storeInHistory ? "1" : "0"), t2.meta && typeof t2.meta == "object" && (n2.meta = JSON.stringify(t2.meta)), n2;
      }, handleResponse: function(e2, t2) {
        return { timetoken: t2[2] };
      } }, ge = function(e2) {
        var t2 = function(e3) {
          var t3 = this, n2 = e3.generateUploadUrl, r2 = e3.publishFile, s2 = e3.modules, a2 = s2.PubNubFile, u2 = s2.config, c2 = s2.cryptography, l2 = s2.networking;
          return function(e4) {
            var s3 = e4.channel, p2 = e4.file, h2 = e4.message, f2 = e4.cipherKey, d2 = e4.meta, g2 = e4.ttl, y2 = e4.storeInHistory;
            return i(t3, void 0, void 0, function() {
              var e5, t4, i2, b2, v2, m2, _2, O2, P2, S2, w2, T2, k2, N2, C2, E2, A2, M2, j2, R2, U2, x2, D2, I2, G2, K2, F2, H2;
              return o(this, function(o2) {
                switch (o2.label) {
                  case 0:
                    if (!s3)
                      throw new L("Validation failed, check status for details", B("channel can't be empty"));
                    if (!p2)
                      throw new L("Validation failed, check status for details", B("file can't be empty"));
                    return e5 = a2.create(p2), [4, n2({ channel: s3, name: e5.name })];
                  case 1:
                    return t4 = o2.sent(), i2 = t4.file_upload_request, b2 = i2.url, v2 = i2.form_fields, m2 = t4.data, _2 = m2.id, O2 = m2.name, a2.supportsEncryptFile && (f2 != null ? f2 : u2.cipherKey) ? [4, c2.encryptFile(f2 != null ? f2 : u2.cipherKey, e5, a2)] : [3, 3];
                  case 2:
                    e5 = o2.sent(), o2.label = 3;
                  case 3:
                    P2 = v2, e5.mimeType && (P2 = v2.map(function(t5) {
                      return t5.key === "Content-Type" ? { key: t5.key, value: e5.mimeType } : t5;
                    })), o2.label = 4;
                  case 4:
                    return o2.trys.push([4, 18, , 20]), a2.supportsFileUri && p2.uri ? (T2 = (w2 = l2).POSTFILE, k2 = [b2, P2], [4, e5.toFileUri()]) : [3, 7];
                  case 5:
                    return [4, T2.apply(w2, k2.concat([o2.sent()]))];
                  case 6:
                    return S2 = o2.sent(), [3, 17];
                  case 7:
                    return a2.supportsFile ? (C2 = (N2 = l2).POSTFILE, E2 = [b2, P2], [4, e5.toFile()]) : [3, 10];
                  case 8:
                    return [4, C2.apply(N2, E2.concat([o2.sent()]))];
                  case 9:
                    return S2 = o2.sent(), [3, 17];
                  case 10:
                    return a2.supportsBuffer ? (M2 = (A2 = l2).POSTFILE, j2 = [b2, P2], [4, e5.toBuffer()]) : [3, 13];
                  case 11:
                    return [4, M2.apply(A2, j2.concat([o2.sent()]))];
                  case 12:
                    return S2 = o2.sent(), [3, 17];
                  case 13:
                    return a2.supportsBlob ? (U2 = (R2 = l2).POSTFILE, x2 = [b2, P2], [4, e5.toBlob()]) : [3, 16];
                  case 14:
                    return [4, U2.apply(R2, x2.concat([o2.sent()]))];
                  case 15:
                    return S2 = o2.sent(), [3, 17];
                  case 16:
                    throw new Error("Unsupported environment");
                  case 17:
                    return [3, 20];
                  case 18:
                    return D2 = o2.sent(), [4, (q2 = D2.response, new Promise(function(e6) {
                      var t5 = "";
                      q2.on("data", function(e7) {
                        t5 += e7.toString("utf8");
                      }), q2.on("end", function() {
                        e6(t5);
                      });
                    }))];
                  case 19:
                    throw I2 = o2.sent(), G2 = /<Message>(.*)<\/Message>/gi.exec(I2), new L(G2 ? "Upload to bucket failed: ".concat(G2[1]) : "Upload to bucket failed.", D2);
                  case 20:
                    if (S2.status !== 204)
                      throw new L("Upload to bucket was unsuccessful", S2);
                    K2 = u2.fileUploadPublishRetryLimit, F2 = false, H2 = { timetoken: "0" }, o2.label = 21;
                  case 21:
                    return o2.trys.push([21, 23, , 24]), [4, r2({ channel: s3, message: h2, fileId: _2, fileName: O2, meta: d2, storeInHistory: y2, ttl: g2 })];
                  case 22:
                    return H2 = o2.sent(), F2 = true, [3, 24];
                  case 23:
                    return o2.sent(), K2 -= 1, [3, 24];
                  case 24:
                    if (!F2 && K2 > 0)
                      return [3, 21];
                    o2.label = 25;
                  case 25:
                    if (F2)
                      return [2, { timetoken: H2.timetoken, id: _2, name: O2 }];
                    throw new L("Publish failed. You may want to execute that operation manually using pubnub.publishFile", { channel: s3, id: _2, name: O2 });
                }
                var q2;
              });
            });
          };
        }(e2);
        return function(e3, n2) {
          var r2 = t2(e3);
          return typeof n2 == "function" ? (r2.then(function(e4) {
            return n2(null, e4);
          }).catch(function(e4) {
            return n2(e4, null);
          }), r2) : r2;
        };
      }, ye = function(e2, t2) {
        var n2 = t2.channel, r2 = t2.id, i2 = t2.name, o2 = e2.config, s2 = e2.networking;
        if (!n2)
          throw new L("Validation failed, check status for details", B("channel can't be empty"));
        if (!r2)
          throw new L("Validation failed, check status for details", B("file id can't be empty"));
        if (!i2)
          throw new L("Validation failed, check status for details", B("file name can't be empty"));
        var a2 = "/v1/files/".concat(o2.subscribeKey, "/channels/").concat(E.encodeString(n2), "/files/").concat(r2, "/").concat(i2), u2 = {};
        u2.uuid = o2.getUUID(), u2.pnsdk = q(o2), o2.getAuthKey() && (u2.auth = o2.getAuthKey()), o2.secretKey && V(e2, a2, u2, {}, { getOperation: function() {
          return "PubNubGetFileUrlOperation";
        } });
        var c2 = Object.keys(u2).map(function(e3) {
          return "".concat(encodeURIComponent(e3), "=").concat(encodeURIComponent(u2[e3]));
        }).join("&");
        return c2 !== "" ? "".concat(s2.getStandardOrigin()).concat(a2, "?").concat(c2) : "".concat(s2.getStandardOrigin()).concat(a2);
      }, be = { getOperation: function() {
        return j.PNDownloadFileOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channel) ? (t2 == null ? void 0 : t2.name) ? (t2 == null ? void 0 : t2.id) ? void 0 : "id can't be empty" : "name can't be empty" : "channel can't be empty";
      }, useGetFile: function() {
        return true;
      }, getFileURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v1/files/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel), "/files/").concat(t2.id, "/").concat(t2.name);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, ignoreBody: function() {
        return true;
      }, forceBuffered: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2, n2) {
        var r2 = e2.PubNubFile, s2 = e2.config, a2 = e2.cryptography;
        return i(void 0, void 0, void 0, function() {
          var e3, i2, u2, c2;
          return o(this, function(o2) {
            switch (o2.label) {
              case 0:
                return e3 = t2.response.body, r2.supportsEncryptFile && ((i2 = n2.cipherKey) !== null && i2 !== void 0 ? i2 : s2.cipherKey) ? [4, a2.decrypt((u2 = n2.cipherKey) !== null && u2 !== void 0 ? u2 : s2.cipherKey, e3)] : [3, 2];
              case 1:
                e3 = o2.sent(), o2.label = 2;
              case 2:
                return [2, r2.create({ data: e3, name: (c2 = t2.response.name) !== null && c2 !== void 0 ? c2 : n2.name, mimeType: t2.response.type })];
            }
          });
        });
      } }, ve = { getOperation: function() {
        return j.PNListFilesOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channel) ? (t2 == null ? void 0 : t2.id) ? (t2 == null ? void 0 : t2.name) ? void 0 : "file name can't be empty" : "file id can't be empty" : "channel can't be empty";
      }, useDelete: function() {
        return true;
      }, getURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v1/files/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel), "/files/").concat(t2.id, "/").concat(t2.name);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { status: t2.status };
      } }, me = { getOperation: function() {
        return j.PNGetAllUUIDMetadataOperation;
      }, validateParams: function() {
      }, getURL: function(e2) {
        var t2 = e2.config;
        return "/v2/objects/".concat(t2.subscribeKey, "/uuids");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2, o2, s2, u2, c2, l2, p2, h2 = { include: ["status", "type"] };
        return (t2 == null ? void 0 : t2.include) && ((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) && h2.include.push("custom"), h2.include = h2.include.join(","), ((r2 = t2 == null ? void 0 : t2.include) === null || r2 === void 0 ? void 0 : r2.totalCount) && (h2.count = (i2 = t2.include) === null || i2 === void 0 ? void 0 : i2.totalCount), ((o2 = t2 == null ? void 0 : t2.page) === null || o2 === void 0 ? void 0 : o2.next) && (h2.start = (s2 = t2.page) === null || s2 === void 0 ? void 0 : s2.next), ((u2 = t2 == null ? void 0 : t2.page) === null || u2 === void 0 ? void 0 : u2.prev) && (h2.end = (c2 = t2.page) === null || c2 === void 0 ? void 0 : c2.prev), (t2 == null ? void 0 : t2.filter) && (h2.filter = t2.filter), h2.limit = (l2 = t2 == null ? void 0 : t2.limit) !== null && l2 !== void 0 ? l2 : 100, (t2 == null ? void 0 : t2.sort) && (h2.sort = Object.entries((p2 = t2.sort) !== null && p2 !== void 0 ? p2 : {}).map(function(e3) {
          var t3 = a(e3, 2), n3 = t3[0], r3 = t3[1];
          return r3 === "asc" || r3 === "desc" ? "".concat(n3, ":").concat(r3) : n3;
        })), h2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, totalCount: t2.totalCount, next: t2.next, prev: t2.prev };
      } }, _e = { getOperation: function() {
        return j.PNGetUUIDMetadataOperation;
      }, validateParams: function() {
      }, getURL: function(e2, t2) {
        var n2, r2 = e2.config;
        return "/v2/objects/".concat(r2.subscribeKey, "/uuids/").concat(E.encodeString((n2 = t2 == null ? void 0 : t2.uuid) !== null && n2 !== void 0 ? n2 : r2.getUUID()));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2 = e2.config, o2 = {};
        return o2.uuid = (n2 = t2 == null ? void 0 : t2.uuid) !== null && n2 !== void 0 ? n2 : i2.getUUID(), o2.include = ["status", "type", "custom"], (t2 == null ? void 0 : t2.include) && ((r2 = t2.include) === null || r2 === void 0 ? void 0 : r2.customFields) === false && o2.include.pop(), o2.include = o2.include.join(","), o2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } }, Oe = { getOperation: function() {
        return j.PNSetUUIDMetadataOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.data))
          return "Data cannot be empty";
      }, usePatch: function() {
        return true;
      }, patchURL: function(e2, t2) {
        var n2, r2 = e2.config;
        return "/v2/objects/".concat(r2.subscribeKey, "/uuids/").concat(E.encodeString((n2 = t2.uuid) !== null && n2 !== void 0 ? n2 : r2.getUUID()));
      }, patchPayload: function(e2, t2) {
        return t2.data;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2 = e2.config, o2 = {};
        return o2.uuid = (n2 = t2 == null ? void 0 : t2.uuid) !== null && n2 !== void 0 ? n2 : i2.getUUID(), o2.include = ["status", "type", "custom"], (t2 == null ? void 0 : t2.include) && ((r2 = t2.include) === null || r2 === void 0 ? void 0 : r2.customFields) === false && o2.include.pop(), o2.include = o2.include.join(","), o2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } }, Pe = { getOperation: function() {
        return j.PNRemoveUUIDMetadataOperation;
      }, validateParams: function() {
      }, getURL: function(e2, t2) {
        var n2, r2 = e2.config;
        return "/v2/objects/".concat(r2.subscribeKey, "/uuids/").concat(E.encodeString((n2 = t2 == null ? void 0 : t2.uuid) !== null && n2 !== void 0 ? n2 : r2.getUUID()));
      }, useDelete: function() {
        return true;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2 = e2.config;
        return { uuid: (n2 = t2 == null ? void 0 : t2.uuid) !== null && n2 !== void 0 ? n2 : r2.getUUID() };
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } }, Se = { getOperation: function() {
        return j.PNGetAllChannelMetadataOperation;
      }, validateParams: function() {
      }, getURL: function(e2) {
        var t2 = e2.config;
        return "/v2/objects/".concat(t2.subscribeKey, "/channels");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2, o2, s2, u2, c2, l2, p2, h2 = { include: ["status", "type"] };
        return (t2 == null ? void 0 : t2.include) && ((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) && h2.include.push("custom"), h2.include = h2.include.join(","), ((r2 = t2 == null ? void 0 : t2.include) === null || r2 === void 0 ? void 0 : r2.totalCount) && (h2.count = (i2 = t2.include) === null || i2 === void 0 ? void 0 : i2.totalCount), ((o2 = t2 == null ? void 0 : t2.page) === null || o2 === void 0 ? void 0 : o2.next) && (h2.start = (s2 = t2.page) === null || s2 === void 0 ? void 0 : s2.next), ((u2 = t2 == null ? void 0 : t2.page) === null || u2 === void 0 ? void 0 : u2.prev) && (h2.end = (c2 = t2.page) === null || c2 === void 0 ? void 0 : c2.prev), (t2 == null ? void 0 : t2.filter) && (h2.filter = t2.filter), h2.limit = (l2 = t2 == null ? void 0 : t2.limit) !== null && l2 !== void 0 ? l2 : 100, (t2 == null ? void 0 : t2.sort) && (h2.sort = Object.entries((p2 = t2.sort) !== null && p2 !== void 0 ? p2 : {}).map(function(e3) {
          var t3 = a(e3, 2), n3 = t3[0], r3 = t3[1];
          return r3 === "asc" || r3 === "desc" ? "".concat(n3, ":").concat(r3) : n3;
        })), h2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, totalCount: t2.totalCount, prev: t2.prev, next: t2.next };
      } }, we = { getOperation: function() {
        return j.PNGetChannelMetadataOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.channel))
          return "Channel cannot be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v2/objects/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2 = { include: ["status", "type", "custom"] };
        return (t2 == null ? void 0 : t2.include) && ((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) === false && r2.include.pop(), r2.include = r2.include.join(","), r2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } }, Te = { getOperation: function() {
        return j.PNSetChannelMetadataOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channel) ? (t2 == null ? void 0 : t2.data) ? void 0 : "Data cannot be empty" : "Channel cannot be empty";
      }, usePatch: function() {
        return true;
      }, patchURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v2/objects/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel));
      }, patchPayload: function(e2, t2) {
        return t2.data;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2 = { include: ["status", "type", "custom"] };
        return (t2 == null ? void 0 : t2.include) && ((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) === false && r2.include.pop(), r2.include = r2.include.join(","), r2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } }, ke = { getOperation: function() {
        return j.PNRemoveChannelMetadataOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.channel))
          return "Channel cannot be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v2/objects/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel));
      }, useDelete: function() {
        return true;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } }, Ne = { getOperation: function() {
        return j.PNGetMembersOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.channel))
          return "UUID cannot be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v2/objects/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel), "/uuids");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2, o2, s2, u2, c2, l2, p2, h2, f2, d2, g2 = { include: ["uuid.status", "uuid.type", "type"] };
        return (t2 == null ? void 0 : t2.include) && (((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) && g2.include.push("custom"), ((r2 = t2.include) === null || r2 === void 0 ? void 0 : r2.customUUIDFields) && g2.include.push("uuid.custom"), ((o2 = (i2 = t2.include) === null || i2 === void 0 ? void 0 : i2.UUIDFields) === null || o2 === void 0 || o2) && g2.include.push("uuid")), g2.include = g2.include.join(","), ((s2 = t2 == null ? void 0 : t2.include) === null || s2 === void 0 ? void 0 : s2.totalCount) && (g2.count = (u2 = t2.include) === null || u2 === void 0 ? void 0 : u2.totalCount), ((c2 = t2 == null ? void 0 : t2.page) === null || c2 === void 0 ? void 0 : c2.next) && (g2.start = (l2 = t2.page) === null || l2 === void 0 ? void 0 : l2.next), ((p2 = t2 == null ? void 0 : t2.page) === null || p2 === void 0 ? void 0 : p2.prev) && (g2.end = (h2 = t2.page) === null || h2 === void 0 ? void 0 : h2.prev), (t2 == null ? void 0 : t2.filter) && (g2.filter = t2.filter), g2.limit = (f2 = t2 == null ? void 0 : t2.limit) !== null && f2 !== void 0 ? f2 : 100, (t2 == null ? void 0 : t2.sort) && (g2.sort = Object.entries((d2 = t2.sort) !== null && d2 !== void 0 ? d2 : {}).map(function(e3) {
          var t3 = a(e3, 2), n3 = t3[0], r3 = t3[1];
          return r3 === "asc" || r3 === "desc" ? "".concat(n3, ":").concat(r3) : n3;
        })), g2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, totalCount: t2.totalCount, prev: t2.prev, next: t2.next };
      } }, Ce = { getOperation: function() {
        return j.PNSetMembersOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channel) ? (t2 == null ? void 0 : t2.uuids) && (t2 == null ? void 0 : t2.uuids.length) !== 0 ? void 0 : "UUIDs cannot be empty" : "Channel cannot be empty";
      }, usePatch: function() {
        return true;
      }, patchURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v2/objects/".concat(n2.subscribeKey, "/channels/").concat(E.encodeString(t2.channel), "/uuids");
      }, patchPayload: function(e2, t2) {
        var n2;
        return (n2 = { set: [], delete: [] })[t2.type] = t2.uuids.map(function(e3) {
          return typeof e3 == "string" ? { uuid: { id: e3 } } : { uuid: { id: e3.id }, custom: e3.custom, status: e3.status };
        }), n2;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2, o2, s2, u2, c2, l2, p2, h2 = { include: ["uuid.status", "uuid.type", "type"] };
        return (t2 == null ? void 0 : t2.include) && (((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) && h2.include.push("custom"), ((r2 = t2.include) === null || r2 === void 0 ? void 0 : r2.customUUIDFields) && h2.include.push("uuid.custom"), ((i2 = t2.include) === null || i2 === void 0 ? void 0 : i2.UUIDFields) && h2.include.push("uuid")), h2.include = h2.include.join(","), ((o2 = t2 == null ? void 0 : t2.include) === null || o2 === void 0 ? void 0 : o2.totalCount) && (h2.count = true), ((s2 = t2 == null ? void 0 : t2.page) === null || s2 === void 0 ? void 0 : s2.next) && (h2.start = (u2 = t2.page) === null || u2 === void 0 ? void 0 : u2.next), ((c2 = t2 == null ? void 0 : t2.page) === null || c2 === void 0 ? void 0 : c2.prev) && (h2.end = (l2 = t2.page) === null || l2 === void 0 ? void 0 : l2.prev), (t2 == null ? void 0 : t2.filter) && (h2.filter = t2.filter), t2.limit != null && (h2.limit = t2.limit), (t2 == null ? void 0 : t2.sort) && (h2.sort = Object.entries((p2 = t2.sort) !== null && p2 !== void 0 ? p2 : {}).map(function(e3) {
          var t3 = a(e3, 2), n3 = t3[0], r3 = t3[1];
          return r3 === "asc" || r3 === "desc" ? "".concat(n3, ":").concat(r3) : n3;
        })), h2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, totalCount: t2.totalCount, prev: t2.prev, next: t2.next };
      } }, Ee = { getOperation: function() {
        return j.PNGetMembershipsOperation;
      }, validateParams: function() {
      }, getURL: function(e2, t2) {
        var n2, r2 = e2.config;
        return "/v2/objects/".concat(r2.subscribeKey, "/uuids/").concat(E.encodeString((n2 = t2 == null ? void 0 : t2.uuid) !== null && n2 !== void 0 ? n2 : r2.getUUID()), "/channels");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2, o2, s2, u2, c2, l2, p2, h2, f2, d2 = { include: ["channel.status", "channel.type", "status"] };
        return (t2 == null ? void 0 : t2.include) && (((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) && d2.include.push("custom"), ((r2 = t2.include) === null || r2 === void 0 ? void 0 : r2.customChannelFields) && d2.include.push("channel.custom"), ((i2 = t2.include) === null || i2 === void 0 ? void 0 : i2.channelFields) && d2.include.push("channel")), d2.include = d2.include.join(","), ((o2 = t2 == null ? void 0 : t2.include) === null || o2 === void 0 ? void 0 : o2.totalCount) && (d2.count = (s2 = t2.include) === null || s2 === void 0 ? void 0 : s2.totalCount), ((u2 = t2 == null ? void 0 : t2.page) === null || u2 === void 0 ? void 0 : u2.next) && (d2.start = (c2 = t2.page) === null || c2 === void 0 ? void 0 : c2.next), ((l2 = t2 == null ? void 0 : t2.page) === null || l2 === void 0 ? void 0 : l2.prev) && (d2.end = (p2 = t2.page) === null || p2 === void 0 ? void 0 : p2.prev), (t2 == null ? void 0 : t2.filter) && (d2.filter = t2.filter), d2.limit = (h2 = t2 == null ? void 0 : t2.limit) !== null && h2 !== void 0 ? h2 : 100, (t2 == null ? void 0 : t2.sort) && (d2.sort = Object.entries((f2 = t2.sort) !== null && f2 !== void 0 ? f2 : {}).map(function(e3) {
          var t3 = a(e3, 2), n3 = t3[0], r3 = t3[1];
          return r3 === "asc" || r3 === "desc" ? "".concat(n3, ":").concat(r3) : n3;
        })), d2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, totalCount: t2.totalCount, prev: t2.prev, next: t2.next };
      } }, Ae = { getOperation: function() {
        return j.PNSetMembershipsOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.channels) || (t2 == null ? void 0 : t2.channels.length) === 0)
          return "Channels cannot be empty";
      }, usePatch: function() {
        return true;
      }, patchURL: function(e2, t2) {
        var n2, r2 = e2.config;
        return "/v2/objects/".concat(r2.subscribeKey, "/uuids/").concat(E.encodeString((n2 = t2.uuid) !== null && n2 !== void 0 ? n2 : r2.getUUID()), "/channels");
      }, patchPayload: function(e2, t2) {
        var n2;
        return (n2 = { set: [], delete: [] })[t2.type] = t2.channels.map(function(e3) {
          return typeof e3 == "string" ? { channel: { id: e3 } } : { channel: { id: e3.id }, custom: e3.custom, status: e3.status };
        }), n2;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2, r2, i2, o2, s2, u2, c2, l2, p2, h2 = { include: ["channel.status", "channel.type", "status"] };
        return (t2 == null ? void 0 : t2.include) && (((n2 = t2.include) === null || n2 === void 0 ? void 0 : n2.customFields) && h2.include.push("custom"), ((r2 = t2.include) === null || r2 === void 0 ? void 0 : r2.customChannelFields) && h2.include.push("channel.custom"), ((i2 = t2.include) === null || i2 === void 0 ? void 0 : i2.channelFields) && h2.include.push("channel")), h2.include = h2.include.join(","), ((o2 = t2 == null ? void 0 : t2.include) === null || o2 === void 0 ? void 0 : o2.totalCount) && (h2.count = true), ((s2 = t2 == null ? void 0 : t2.page) === null || s2 === void 0 ? void 0 : s2.next) && (h2.start = (u2 = t2.page) === null || u2 === void 0 ? void 0 : u2.next), ((c2 = t2 == null ? void 0 : t2.page) === null || c2 === void 0 ? void 0 : c2.prev) && (h2.end = (l2 = t2.page) === null || l2 === void 0 ? void 0 : l2.prev), (t2 == null ? void 0 : t2.filter) && (h2.filter = t2.filter), t2.limit != null && (h2.limit = t2.limit), (t2 == null ? void 0 : t2.sort) && (h2.sort = Object.entries((p2 = t2.sort) !== null && p2 !== void 0 ? p2 : {}).map(function(e3) {
          var t3 = a(e3, 2), n3 = t3[0], r3 = t3[1];
          return r3 === "asc" || r3 === "desc" ? "".concat(n3, ":").concat(r3) : n3;
        })), h2;
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data, totalCount: t2.totalCount, prev: t2.prev, next: t2.next };
      } };
      var Me = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNAccessManagerAudit;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2) {
        var t2 = e2.config;
        return "/v2/auth/audit/sub-key/".concat(t2.subscribeKey);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return false;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channel, r2 = t2.channelGroup, i2 = t2.authKeys, o2 = i2 === void 0 ? [] : i2, s2 = {};
        return n2 && (s2.channel = n2), r2 && (s2["channel-group"] = r2), o2.length > 0 && (s2.auth = o2.join(",")), s2;
      }, handleResponse: function(e2, t2) {
        return t2.payload;
      } });
      var je = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNAccessManagerGrant;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config;
        return n2.subscribeKey ? n2.publishKey ? n2.secretKey ? t2.uuids == null || t2.authKeys ? t2.uuids == null || t2.channels == null && t2.channelGroups == null ? void 0 : "Both channel/channelgroup and uuid cannot be used in the same request" : "authKeys are required for grant request on uuids" : "Missing Secret Key" : "Missing Publish Key" : "Missing Subscribe Key";
      }, getURL: function(e2) {
        var t2 = e2.config;
        return "/v2/auth/grant/sub-key/".concat(t2.subscribeKey);
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return false;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channels, r2 = n2 === void 0 ? [] : n2, i2 = t2.channelGroups, o2 = i2 === void 0 ? [] : i2, s2 = t2.uuids, a2 = s2 === void 0 ? [] : s2, u2 = t2.ttl, c2 = t2.read, l2 = c2 !== void 0 && c2, p2 = t2.write, h2 = p2 !== void 0 && p2, f2 = t2.manage, d2 = f2 !== void 0 && f2, g2 = t2.get, y2 = g2 !== void 0 && g2, b2 = t2.join, v2 = b2 !== void 0 && b2, m2 = t2.update, _2 = m2 !== void 0 && m2, O2 = t2.authKeys, P2 = O2 === void 0 ? [] : O2, S2 = t2.delete, w2 = {};
        return w2.r = l2 ? "1" : "0", w2.w = h2 ? "1" : "0", w2.m = d2 ? "1" : "0", w2.d = S2 ? "1" : "0", w2.g = y2 ? "1" : "0", w2.j = v2 ? "1" : "0", w2.u = _2 ? "1" : "0", r2.length > 0 && (w2.channel = r2.join(",")), o2.length > 0 && (w2["channel-group"] = o2.join(",")), P2.length > 0 && (w2.auth = P2.join(",")), a2.length > 0 && (w2["target-uuid"] = a2.join(",")), (u2 || u2 === 0) && (w2.ttl = u2), w2;
      }, handleResponse: function() {
        return {};
      } });
      function Re(e2) {
        var t2 = 0;
        return e2.join && (t2 |= 128), e2.update && (t2 |= 64), e2.get && (t2 |= 32), e2.delete && (t2 |= 8), e2.manage && (t2 |= 4), e2.write && (t2 |= 2), e2.read && (t2 |= 1), t2;
      }
      var Ue = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNAccessManagerGrantToken;
      }, extractPermissions: Re, validateParams: function(e2, t2) {
        var n2 = e2.config;
        return n2.subscribeKey ? n2.publishKey ? n2.secretKey ? t2.resources || t2.patterns ? (!t2.resources || t2.resources.uuids && Object.keys(t2.resources.uuids).length !== 0 || t2.resources.channels && Object.keys(t2.resources.channels).length !== 0 || t2.resources.groups && Object.keys(t2.resources.groups).length !== 0) && (!t2.patterns || t2.patterns.uuids && Object.keys(t2.patterns.uuids).length !== 0 || t2.patterns.channels && Object.keys(t2.patterns.channels).length !== 0 || t2.patterns.groups && Object.keys(t2.patterns.groups).length !== 0) ? void 0 : "Missing values for either Resources or Patterns." : "Missing either Resources or Patterns." : "Missing Secret Key" : "Missing Publish Key" : "Missing Subscribe Key";
      }, postURL: function(e2) {
        var t2 = e2.config;
        return "/v3/pam/".concat(t2.subscribeKey, "/grant");
      }, usePost: function() {
        return true;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return false;
      }, prepareParams: function() {
        return {};
      }, postPayload: function(e2, t2) {
        return function(e3, t3) {
          var n2 = t3.ttl, r2 = t3.resources, i2 = t3.patterns, o2 = t3.meta, s2 = t3.authorized_uuid, a2 = { ttl: 0, permissions: { resources: { channels: {}, groups: {}, uuids: {}, users: {}, spaces: {} }, patterns: { channels: {}, groups: {}, uuids: {}, users: {}, spaces: {} }, meta: {} } };
          if (r2) {
            var u2 = r2.uuids, c2 = r2.channels, l2 = r2.groups;
            u2 && Object.keys(u2).forEach(function(e4) {
              a2.permissions.resources.uuids[e4] = Re(u2[e4]);
            }), c2 && Object.keys(c2).forEach(function(e4) {
              a2.permissions.resources.channels[e4] = Re(c2[e4]);
            }), l2 && Object.keys(l2).forEach(function(e4) {
              a2.permissions.resources.groups[e4] = Re(l2[e4]);
            });
          }
          if (i2) {
            var p2 = i2.uuids, h2 = i2.channels, f2 = i2.groups;
            p2 && Object.keys(p2).forEach(function(e4) {
              a2.permissions.patterns.uuids[e4] = Re(p2[e4]);
            }), h2 && Object.keys(h2).forEach(function(e4) {
              a2.permissions.patterns.channels[e4] = Re(h2[e4]);
            }), f2 && Object.keys(f2).forEach(function(e4) {
              a2.permissions.patterns.groups[e4] = Re(f2[e4]);
            });
          }
          return (n2 || n2 === 0) && (a2.ttl = n2), o2 && (a2.permissions.meta = o2), s2 && (a2.permissions.uuid = "".concat(s2)), a2;
        }(0, t2);
      }, handleResponse: function(e2, t2) {
        return t2.data.token;
      } }), xe = { getOperation: function() {
        return j.PNAccessManagerRevokeToken;
      }, validateParams: function(e2, t2) {
        return e2.config.secretKey ? t2 ? void 0 : "token can't be empty" : "Missing Secret Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config;
        return "/v3/pam/".concat(n2.subscribeKey, "/grant/").concat(E.encodeString(t2));
      }, useDelete: function() {
        return true;
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return false;
      }, prepareParams: function(e2) {
        return { uuid: e2.config.getUUID() };
      }, handleResponse: function(e2, t2) {
        return { status: t2.status, data: t2.data };
      } };
      function De(e2, t2) {
        var n2 = e2.crypto, r2 = e2.config, i2 = JSON.stringify(t2);
        return r2.cipherKey && (i2 = n2.encrypt(i2), i2 = JSON.stringify(i2)), i2;
      }
      var Ie = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNPublishOperation;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.message;
        return t2.channel ? r2 ? n2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Message" : "Missing Channel";
      }, usePost: function(e2, t2) {
        var n2 = t2.sendByPost;
        return n2 !== void 0 && n2;
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel, i2 = De(e2, t2.message);
        return "/publish/".concat(n2.publishKey, "/").concat(n2.subscribeKey, "/0/").concat(E.encodeString(r2), "/0/").concat(E.encodeString(i2));
      }, postURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channel;
        return "/publish/".concat(n2.publishKey, "/").concat(n2.subscribeKey, "/0/").concat(E.encodeString(r2), "/0");
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, postPayload: function(e2, t2) {
        return De(e2, t2.message);
      }, prepareParams: function(e2, t2) {
        var n2 = t2.meta, r2 = t2.replicate, i2 = r2 === void 0 || r2, o2 = t2.storeInHistory, s2 = t2.ttl, a2 = {};
        return o2 != null && (a2.store = o2 ? "1" : "0"), s2 && (a2.ttl = s2), i2 === false && (a2.norep = "true"), n2 && typeof n2 == "object" && (a2.meta = JSON.stringify(n2)), a2;
      }, handleResponse: function(e2, t2) {
        return { timetoken: t2[2] };
      } });
      var Ge = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNSignalOperation;
      }, validateParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.message;
        return t2.channel ? r2 ? n2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing Message" : "Missing Channel";
      }, getURL: function(e2, t2) {
        var n2, r2 = e2.config, i2 = t2.channel, o2 = t2.message, s2 = (n2 = o2, JSON.stringify(n2));
        return "/signal/".concat(r2.publishKey, "/").concat(r2.subscribeKey, "/0/").concat(E.encodeString(i2), "/0/").concat(E.encodeString(s2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function() {
        return {};
      }, handleResponse: function(e2, t2) {
        return { timetoken: t2[2] };
      } });
      function Ke(e2, t2) {
        var n2 = e2.config, r2 = e2.crypto;
        if (!n2.cipherKey)
          return t2;
        try {
          return r2.decrypt(t2);
        } catch (e3) {
          return t2;
        }
      }
      var Fe = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNHistoryOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channel, r2 = e2.config;
        return n2 ? r2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing channel";
      }, getURL: function(e2, t2) {
        var n2 = t2.channel, r2 = e2.config;
        return "/v2/history/sub-key/".concat(r2.subscribeKey, "/channel/").concat(E.encodeString(n2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.start, r2 = t2.end, i2 = t2.reverse, o2 = t2.count, s2 = o2 === void 0 ? 100 : o2, a2 = t2.stringifiedTimeToken, u2 = a2 !== void 0 && a2, c2 = t2.includeMeta, l2 = c2 !== void 0 && c2, p2 = { include_token: "true" };
        return p2.count = s2, n2 && (p2.start = n2), r2 && (p2.end = r2), u2 && (p2.string_message_token = "true"), i2 != null && (p2.reverse = i2.toString()), l2 && (p2.include_meta = "true"), p2;
      }, handleResponse: function(e2, t2) {
        var n2 = { messages: [], startTimeToken: t2[1], endTimeToken: t2[2] };
        return Array.isArray(t2[0]) && t2[0].forEach(function(t3) {
          var r2 = { timetoken: t3.timetoken, entry: Ke(e2, t3.message) };
          t3.meta && (r2.meta = t3.meta), n2.messages.push(r2);
        }), n2;
      } });
      var Le = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNDeleteMessagesOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channel, r2 = e2.config;
        return n2 ? r2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing channel";
      }, useDelete: function() {
        return true;
      }, getURL: function(e2, t2) {
        var n2 = t2.channel, r2 = e2.config;
        return "/v3/history/sub-key/".concat(r2.subscribeKey, "/channel/").concat(E.encodeString(n2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.start, r2 = t2.end, i2 = {};
        return n2 && (i2.start = n2), r2 && (i2.end = r2), i2;
      }, handleResponse: function(e2, t2) {
        return t2.payload;
      } });
      var Be = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNMessageCounts;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channels, r2 = t2.timetoken, i2 = t2.channelTimetokens, o2 = e2.config;
        return n2 ? r2 && i2 ? "timetoken and channelTimetokens are incompatible together" : r2 && i2 && i2.length > 1 && n2.length !== i2.length ? "Length of channelTimetokens and channels do not match" : o2.subscribeKey ? void 0 : "Missing Subscribe Key" : "Missing channel";
      }, getURL: function(e2, t2) {
        var n2 = t2.channels, r2 = e2.config, i2 = n2.join(",");
        return "/v3/history/sub-key/".concat(r2.subscribeKey, "/message-counts/").concat(E.encodeString(i2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.timetoken, r2 = t2.channelTimetokens, i2 = {};
        if (r2 && r2.length === 1) {
          var o2 = a(r2, 1)[0];
          i2.timetoken = o2;
        } else
          r2 ? i2.channelsTimetoken = r2.join(",") : n2 && (i2.timetoken = n2);
        return i2;
      }, handleResponse: function(e2, t2) {
        return { channels: t2.channels };
      } });
      var He = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNFetchMessagesOperation;
      }, validateParams: function(e2, t2) {
        var n2 = t2.channels, r2 = t2.includeMessageActions, i2 = r2 !== void 0 && r2, o2 = e2.config;
        if (!n2 || n2.length === 0)
          return "Missing channels";
        if (!o2.subscribeKey)
          return "Missing Subscribe Key";
        if (i2 && n2.length > 1)
          throw new TypeError("History can return actions data for a single channel only. Either pass a single channel or disable the includeMessageActions flag.");
      }, getURL: function(e2, t2) {
        var n2 = t2.channels, r2 = n2 === void 0 ? [] : n2, i2 = t2.includeMessageActions, o2 = i2 !== void 0 && i2, s2 = e2.config, a2 = o2 ? "history-with-actions" : "history", u2 = r2.length > 0 ? r2.join(",") : ",";
        return "/v3/".concat(a2, "/sub-key/").concat(s2.subscribeKey, "/channel/").concat(E.encodeString(u2));
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = t2.channels, r2 = t2.start, i2 = t2.end, o2 = t2.includeMessageActions, s2 = t2.count, a2 = t2.stringifiedTimeToken, u2 = a2 !== void 0 && a2, c2 = t2.includeMeta, l2 = c2 !== void 0 && c2, p2 = t2.includeUuid, h2 = t2.includeUUID, f2 = h2 === void 0 || h2, d2 = t2.includeMessageType, g2 = d2 === void 0 || d2, y2 = {};
        return y2.max = s2 || (n2.length > 1 || o2 === true ? 25 : 100), r2 && (y2.start = r2), i2 && (y2.end = i2), u2 && (y2.string_message_token = "true"), l2 && (y2.include_meta = "true"), f2 && p2 !== false && (y2.include_uuid = "true"), g2 && (y2.include_message_type = "true"), y2;
      }, handleResponse: function(e2, t2) {
        var n2 = { channels: {} };
        return Object.keys(t2.channels || {}).forEach(function(r2) {
          n2.channels[r2] = [], (t2.channels[r2] || []).forEach(function(t3) {
            var i2 = {};
            i2.channel = r2, i2.timetoken = t3.timetoken, i2.message = function(e3, t4) {
              var n3 = e3.config, r3 = e3.crypto;
              if (!n3.cipherKey)
                return t4;
              try {
                return r3.decrypt(t4);
              } catch (e4) {
                return t4;
              }
            }(e2, t3.message), i2.messageType = t3.message_type, i2.uuid = t3.uuid, t3.actions && (i2.actions = t3.actions, i2.data = t3.actions), t3.meta && (i2.meta = t3.meta), n2.channels[r2].push(i2);
          });
        }), t2.more && (n2.more = t2.more), n2;
      } });
      var qe = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNTimeOperation;
      }, getURL: function() {
        return "/time/0";
      }, getRequestTimeout: function(e2) {
        return e2.config.getTransactionTimeout();
      }, prepareParams: function() {
        return {};
      }, isAuthSupported: function() {
        return false;
      }, handleResponse: function(e2, t2) {
        return { timetoken: t2[0] };
      }, validateParams: function() {
      } });
      var ze = Object.freeze({ __proto__: null, getOperation: function() {
        return j.PNSubscribeOperation;
      }, validateParams: function(e2) {
        if (!e2.config.subscribeKey)
          return "Missing Subscribe Key";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels, i2 = r2 === void 0 ? [] : r2, o2 = i2.length > 0 ? i2.join(",") : ",";
        return "/v2/subscribe/".concat(n2.subscribeKey, "/").concat(E.encodeString(o2), "/0");
      }, getRequestTimeout: function(e2) {
        return e2.config.getSubscribeTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = e2.config, r2 = t2.state, i2 = t2.channelGroups, o2 = i2 === void 0 ? [] : i2, s2 = t2.timetoken, a2 = t2.filterExpression, u2 = t2.region, c2 = { heartbeat: n2.getPresenceTimeout() };
        return o2.length > 0 && (c2["channel-group"] = o2.join(",")), a2 && a2.length > 0 && (c2["filter-expr"] = a2), Object.keys(r2).length && (c2.state = JSON.stringify(r2)), s2 && (c2.tt = s2), u2 && (c2.tr = u2), c2;
      }, handleResponse: function(e2, t2) {
        var n2 = [];
        t2.m.forEach(function(e3) {
          var t3 = { publishTimetoken: e3.p.t, region: e3.p.r }, r3 = { shard: parseInt(e3.a, 10), subscriptionMatch: e3.b, channel: e3.c, messageType: e3.e, payload: e3.d, flags: e3.f, issuingClientId: e3.i, subscribeKey: e3.k, originationTimetoken: e3.o, userMetadata: e3.u, publishMetaData: t3 };
          n2.push(r3);
        });
        var r2 = { timetoken: t2.t.t, region: t2.t.r };
        return { messages: n2, metadata: r2 };
      } }), Ve = { getOperation: function() {
        return j.PNHandshakeOperation;
      }, validateParams: function(e2, t2) {
        if (!(t2 == null ? void 0 : t2.channels) && !(t2 == null ? void 0 : t2.channelGroups))
          return "channels and channleGroups both should not be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels ? t2.channels.join(",") : ",";
        return "/v2/subscribe/".concat(n2.subscribeKey, "/").concat(E.encodeString(r2), "/0");
      }, getRequestTimeout: function(e2) {
        return e2.config.getSubscribeTimeout();
      }, isAuthSupported: function() {
        return true;
      }, prepareParams: function(e2, t2) {
        var n2 = {};
        return t2.channelGroups && t2.channelGroups.length > 0 && (n2["channel-group"] = t2.channelGroups.join(",")), n2.tt = 0, n2;
      }, handleResponse: function(e2, t2) {
        return { region: t2.t.r, timetoken: t2.t.t };
      } }, Je = { getOperation: function() {
        return j.PNReceiveMessagesOperation;
      }, validateParams: function(e2, t2) {
        return (t2 == null ? void 0 : t2.channels) || (t2 == null ? void 0 : t2.channelGroups) ? (t2 == null ? void 0 : t2.timetoken) ? (t2 == null ? void 0 : t2.region) ? void 0 : "region can not be empty" : "timetoken can not be empty" : "channels and channleGroups both should not be empty";
      }, getURL: function(e2, t2) {
        var n2 = e2.config, r2 = t2.channels ? t2.channels.join(",") : ",";
        return "/v2/subscribe/".concat(n2.subscribeKey, "/").concat(E.encodeString(r2), "/0");
      }, getRequestTimeout: function(e2) {
        return e2.config.getSubscribeTimeout();
      }, isAuthSupported: function() {
        return true;
      }, getAbortSignal: function(e2, t2) {
        return t2.abortSignal;
      }, prepareParams: function(e2, t2) {
        var n2 = {};
        return t2.channelGroups && t2.channelGroups.length > 0 && (n2["channel-group"] = t2.channelGroups.join(",")), n2.tt = t2.timetoken, n2.tr = t2.region, n2;
      }, handleResponse: function(e2, t2) {
        var n2 = [];
        return t2.m.forEach(function(e3) {
          var t3 = { shard: parseInt(e3.a, 10), subscriptionMatch: e3.b, channel: e3.c, messageType: e3.e, payload: e3.d, flags: e3.f, issuingClientId: e3.i, subscribeKey: e3.k, originationTimetoken: e3.o, publishMetaData: { timetoken: e3.p.t, region: e3.p.r } };
          n2.push(t3);
        }), { messages: n2, metadata: { region: t2.t.r, timetoken: t2.t.t } };
      } }, We = function() {
        function e2(e3) {
          e3 === void 0 && (e3 = false), this.sync = e3, this.listeners = new Set();
        }
        return e2.prototype.subscribe = function(e3) {
          var t2 = this;
          return this.listeners.add(e3), function() {
            t2.listeners.delete(e3);
          };
        }, e2.prototype.notify = function(e3) {
          var t2 = this, n2 = function() {
            t2.listeners.forEach(function(t3) {
              t3(e3);
            });
          };
          this.sync ? n2() : setTimeout(n2, 0);
        }, e2;
      }(), Xe = function() {
        function e2(e3) {
          this.label = e3, this.transitionMap = new Map(), this.enterEffects = [], this.exitEffects = [];
        }
        return e2.prototype.transition = function(e3, t2) {
          var n2;
          if (this.transitionMap.has(t2.type))
            return (n2 = this.transitionMap.get(t2.type)) === null || n2 === void 0 ? void 0 : n2(e3, t2);
        }, e2.prototype.on = function(e3, t2) {
          return this.transitionMap.set(e3, t2), this;
        }, e2.prototype.with = function(e3, t2) {
          return [this, e3, t2 != null ? t2 : []];
        }, e2.prototype.onEnter = function(e3) {
          return this.enterEffects.push(e3), this;
        }, e2.prototype.onExit = function(e3) {
          return this.exitEffects.push(e3), this;
        }, e2;
      }(), $e = function(e2) {
        function n2() {
          return e2 !== null && e2.apply(this, arguments) || this;
        }
        return t(n2, e2), n2.prototype.describe = function(e3) {
          return new Xe(e3);
        }, n2.prototype.start = function(e3, t2) {
          this.currentState = e3, this.currentContext = t2, this.notify({ type: "engineStarted", state: e3, context: t2 });
        }, n2.prototype.transition = function(e3) {
          var t2, n3, r2, i2, o2, u2;
          if (!this.currentState)
            throw new Error("Start the engine first");
          this.notify({ type: "eventReceived", event: e3 });
          var c2 = this.currentState.transition(this.currentContext, e3);
          if (c2) {
            var l2 = a(c2, 3), p2 = l2[0], h2 = l2[1], f2 = l2[2];
            try {
              for (var d2 = s(this.currentState.exitEffects), g2 = d2.next(); !g2.done; g2 = d2.next()) {
                var y2 = g2.value;
                this.notify({ type: "invocationDispatched", invocation: y2(this.currentContext) });
              }
            } catch (e4) {
              t2 = { error: e4 };
            } finally {
              try {
                g2 && !g2.done && (n3 = d2.return) && n3.call(d2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            var b2 = this.currentState;
            this.currentState = p2;
            var v2 = this.currentContext;
            this.currentContext = h2, this.notify({ type: "transitionDone", fromState: b2, fromContext: v2, toState: p2, toContext: h2, event: e3 });
            try {
              for (var m2 = s(f2), _2 = m2.next(); !_2.done; _2 = m2.next()) {
                y2 = _2.value;
                this.notify({ type: "invocationDispatched", invocation: y2 });
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                _2 && !_2.done && (i2 = m2.return) && i2.call(m2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var O2 = s(this.currentState.enterEffects), P2 = O2.next(); !P2.done; P2 = O2.next()) {
                y2 = P2.value;
                this.notify({ type: "invocationDispatched", invocation: y2(this.currentContext) });
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                P2 && !P2.done && (u2 = O2.return) && u2.call(O2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          }
        }, n2;
      }(We), Qe = function() {
        function e2(e3) {
          this.dependencies = e3, this.instances = new Map(), this.handlers = new Map();
        }
        return e2.prototype.on = function(e3, t2) {
          this.handlers.set(e3, t2);
        }, e2.prototype.dispatch = function(e3) {
          if (e3.type !== "CANCEL") {
            var t2 = this.handlers.get(e3.type);
            if (!t2)
              throw new Error("Unhandled invocation '".concat(e3.type, "'"));
            var n2 = t2(e3.payload, this.dependencies);
            e3.managed && this.instances.set(e3.type, n2), n2.start();
          } else if (this.instances.has(e3.payload)) {
            var r2 = this.instances.get(e3.payload);
            r2 == null || r2.cancel(), this.instances.delete(e3.payload);
          }
        }, e2;
      }();
      function Ye(e2, t2) {
        var n2 = function() {
          for (var n3 = [], r2 = 0; r2 < arguments.length; r2++)
            n3[r2] = arguments[r2];
          return { type: e2, payload: t2 == null ? void 0 : t2.apply(void 0, u([], a(n3), false)) };
        };
        return n2.type = e2, n2;
      }
      function Ze(e2, t2) {
        var n2 = function() {
          for (var n3 = [], r2 = 0; r2 < arguments.length; r2++)
            n3[r2] = arguments[r2];
          return { type: e2, payload: t2.apply(void 0, u([], a(n3), false)), managed: true };
        };
        return n2.type = e2, n2.cancel = { type: "CANCEL", payload: e2, managed: false }, n2;
      }
      var et, tt, nt, rt = function(e2) {
        function n2() {
          var t2 = this.constructor, n3 = e2.call(this, "The operation was aborted.") || this;
          return n3.name = "AbortError", Object.setPrototypeOf(n3, t2.prototype), n3;
        }
        return t(n2, e2), n2;
      }(Error), it = function(e2) {
        function n2() {
          var t2 = e2 !== null && e2.apply(this, arguments) || this;
          return t2._aborted = false, t2;
        }
        return t(n2, e2), Object.defineProperty(n2.prototype, "aborted", { get: function() {
          return this._aborted;
        }, enumerable: false, configurable: true }), n2.prototype.throwIfAborted = function() {
          if (this._aborted)
            throw new rt();
        }, n2.prototype.abort = function() {
          this._aborted = true, this.notify(new rt());
        }, n2;
      }(We), ot = function(e2) {
        function n2(t2, n3, r2) {
          var i2 = e2.call(this, t2, n3) || this;
          return i2.asyncFunction = r2, i2.abortSignal = new it(), i2;
        }
        return t(n2, e2), n2.prototype.start = function() {
          this.asyncFunction(this.payload, this.abortSignal, this.dependencies);
        }, n2.prototype.cancel = function() {
          this.abortSignal.abort();
        }, n2;
      }(function(e2, t2) {
        this.payload = e2, this.dependencies = t2;
      }), st = function(e2) {
        return function(t2, n2) {
          return new ot(t2, n2, e2);
        };
      }, at = Ze("HANDSHAKE", function(e2, t2) {
        return { channels: e2, groups: t2 };
      }), ut = Ze("RECEIVE_EVENTS", function(e2, t2, n2) {
        return { channels: e2, groups: t2, cursor: n2 };
      }), ct = (tt = function(e2) {
        return e2;
      }, nt = function() {
        for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
          e2[t2] = arguments[t2];
        return { type: et, payload: tt.apply(void 0, u([], a(e2), false)), managed: false };
      }, nt.type = et = "EMIT_EVENTS", nt), lt = Ze("RECONNECT", function(e2) {
        return e2;
      }), pt = Ze("HANDSHAKE_RECONNECT", function(e2) {
        return e2;
      }), ht = Ye("SUBSCRIPTION_CHANGE", function(e2, t2) {
        return { channels: e2, groups: t2 };
      }), ft = Ye("DISCONNECT", function() {
        return {};
      }), dt = Ye("RECONNECT", function() {
        return {};
      });
      Ye("RESTORE", function(e2, t2, n2, r2) {
        return { channels: e2, groups: t2, timetoken: n2, region: r2 };
      });
      var gt = Ye("HANDSHAKING_SUCCESS", function(e2) {
        return e2;
      }), yt = Ye("HANDSHAKING_FAILURE", function(e2) {
        return e2;
      }), bt = Ye("HANDSHAKING_RECONNECTING_SUCCESS", function(e2) {
        return { cursor: e2 };
      }), vt = Ye("HANDSHAKING_RECONNECTING_FAILURE", function(e2) {
        return e2;
      }), mt = Ye("HANDSHAKING_RECONNECTING_GIVEUP", function() {
        return {};
      }), _t = Ye("HANDSHAKING_RECONNECTING_RETRY", function() {
        return {};
      }), Ot = Ye("RECEIVING_SUCCESS", function(e2, t2) {
        return { cursor: e2, events: t2 };
      }), Pt = Ye("RECEIVING_FAILURE", function(e2) {
        return e2;
      }), St = Ye("RECONNECTING_SUCCESS", function(e2, t2) {
        return { cursor: e2, events: t2 };
      }), wt = Ye("RECONNECTING_FAILURE", function(e2) {
        return e2;
      }), Tt = Ye("RECONNECTING_GIVEUP", function() {
        return {};
      }), kt = Ye("RECONNECTING_RETRY", function() {
        return {};
      }), Nt = function(e2) {
        function n2(t2, n3) {
          var r2 = e2.call(this, n3) || this;
          return r2.on(at.type, st(function(e3, n4, s2) {
            var a2 = s2.handshake;
            return i(r2, void 0, void 0, function() {
              var r3, i2;
              return o(this, function(o2) {
                switch (o2.label) {
                  case 0:
                    n4.throwIfAborted(), o2.label = 1;
                  case 1:
                    return o2.trys.push([1, 3, , 4]), [4, a2({ abortSignal: n4, channels: e3.channels, channelGroups: e3.groups })];
                  case 2:
                    return r3 = o2.sent(), t2.transition(gt(r3)), [3, 4];
                  case 3:
                    return (i2 = o2.sent()) instanceof Error && i2.message === "Aborted" ? [2] : i2 instanceof L ? [2, t2.transition(yt(i2))] : [3, 4];
                  case 4:
                    return [2];
                }
              });
            });
          })), r2.on(ut.type, st(function(e3, n4, s2) {
            var a2 = s2.receiveEvents;
            return i(r2, void 0, void 0, function() {
              var r3, i2;
              return o(this, function(o2) {
                switch (o2.label) {
                  case 0:
                    n4.throwIfAborted(), o2.label = 1;
                  case 1:
                    return o2.trys.push([1, 3, , 4]), [4, a2({ abortSignal: n4, channels: e3.channels, channelGroups: e3.groups, timetoken: e3.cursor.timetoken, region: e3.cursor.region })];
                  case 2:
                    return r3 = o2.sent(), t2.transition(Ot(r3.metadata, r3.messages)), [3, 4];
                  case 3:
                    return (i2 = o2.sent()) instanceof Error && i2.message === "Aborted" ? [2] : i2 instanceof L ? [2, t2.transition(Pt(i2))] : [3, 4];
                  case 4:
                    return [2];
                }
              });
            });
          })), r2.on(ct.type, st(function(e3, t3, n4) {
            return n4.receiveEvents, i(r2, void 0, void 0, function() {
              return o(this, function(t4) {
                return e3.length > 0 && console.log(e3), [2];
              });
            });
          })), r2.on(lt.type, st(function(e3, n4, s2) {
            var a2 = s2.receiveEvents, u2 = s2.shouldRetry, c2 = s2.getRetryDelay, l2 = s2.delay;
            return i(r2, void 0, void 0, function() {
              var r3, i2;
              return o(this, function(o2) {
                switch (o2.label) {
                  case 0:
                    return u2(e3.reason, e3.attempts) ? (n4.throwIfAborted(), [4, l2(c2(e3.attempts))]) : [2, t2.transition(Tt())];
                  case 1:
                    o2.sent(), n4.throwIfAborted(), o2.label = 2;
                  case 2:
                    return o2.trys.push([2, 4, , 5]), [4, a2({ abortSignal: n4, channels: e3.channels, channelGroups: e3.groups, timetoken: e3.cursor.timetoken, region: e3.cursor.region })];
                  case 3:
                    return r3 = o2.sent(), [2, t2.transition(St(r3.metadata, r3.messages))];
                  case 4:
                    return (i2 = o2.sent()) instanceof Error && i2.message === "Aborted" ? [2] : i2 instanceof L ? [2, t2.transition(wt(i2))] : [3, 5];
                  case 5:
                    return [2];
                }
              });
            });
          })), r2.on(pt.type, st(function(e3, n4, s2) {
            var a2 = s2.handshake, u2 = s2.shouldRetry, c2 = s2.getRetryDelay, l2 = s2.delay;
            return i(r2, void 0, void 0, function() {
              var r3, i2;
              return o(this, function(o2) {
                switch (o2.label) {
                  case 0:
                    return u2(e3.reason, e3.attempts) ? (n4.throwIfAborted(), [4, l2(c2(e3.attempts))]) : [2, t2.transition(mt())];
                  case 1:
                    o2.sent(), n4.throwIfAborted(), o2.label = 2;
                  case 2:
                    return o2.trys.push([2, 4, , 5]), [4, a2({ abortSignal: n4, channels: e3.channels, channelGroups: e3.groups })];
                  case 3:
                    return r3 = o2.sent(), [2, t2.transition(bt(r3.metadata))];
                  case 4:
                    return (i2 = o2.sent()) instanceof Error && i2.message === "Aborted" ? [2] : i2 instanceof L ? [2, t2.transition(vt(i2))] : [3, 5];
                  case 5:
                    return [2];
                }
              });
            });
          })), r2;
        }
        return t(n2, e2), n2;
      }(Qe), Ct = new Xe("STOPPED");
      Ct.on(ht.type, function(e2, t2) {
        return Ct.with({ channels: t2.payload.channels, groups: t2.payload.groups });
      }), Ct.on(dt.type, function(e2) {
        return xt.with(n({}, e2));
      });
      var Et = new Xe("HANDSHAKE_FAILURE");
      Et.on(_t.type, function(e2) {
        return Ut.with(n(n({}, e2), { attempts: 0 }));
      }), Et.on(ft.type, function(e2) {
        return Ct.with({ channels: e2.channels, groups: e2.groups });
      });
      var At = new Xe("STOPPED");
      At.on(ht.type, function(e2, t2) {
        return At.with({ channels: t2.payload.channels, groups: t2.payload.groups, cursor: e2.cursor });
      }), At.on(dt.type, function(e2) {
        return Rt.with(n({}, e2));
      });
      var Mt = new Xe("RECEIVE_FAILURE");
      Mt.on(kt.type, function(e2) {
        return jt.with(n(n({}, e2), { attempts: 0 }));
      }), Mt.on(ft.type, function(e2) {
        return At.with({ channels: e2.channels, groups: e2.groups, cursor: e2.cursor });
      });
      var jt = new Xe("RECEIVE_RECONNECTING");
      jt.onEnter(function(e2) {
        return lt(e2);
      }), jt.onExit(function() {
        return lt.cancel;
      }), jt.on(St.type, function(e2, t2) {
        return Rt.with({ channels: e2.channels, groups: e2.groups, cursor: t2.payload.cursor }, [ct(t2.payload.events)]);
      }), jt.on(wt.type, function(e2, t2) {
        return jt.with(n(n({}, e2), { attempts: e2.attempts + 1, reason: t2.payload }));
      }), jt.on(Tt.type, function(e2) {
        return Mt.with({ groups: e2.groups, channels: e2.channels, cursor: e2.cursor, reason: e2.reason });
      }), jt.on(ft.type, function(e2) {
        return At.with({ channels: e2.channels, groups: e2.groups, cursor: e2.cursor });
      });
      var Rt = new Xe("RECEIVING");
      Rt.onEnter(function(e2) {
        return ut(e2.channels, e2.groups, e2.cursor);
      }), Rt.onExit(function() {
        return ut.cancel;
      }), Rt.on(Ot.type, function(e2, t2) {
        return Rt.with(n(n({}, e2), { cursor: t2.payload.cursor }), [ct(t2.payload.events)]);
      }), Rt.on(ht.type, function(e2, t2) {
        return t2.payload.channels.length === 0 && t2.payload.groups.length === 0 ? Dt.with(void 0) : Rt.with(n(n({}, e2), { channels: t2.payload.channels, groups: t2.payload.groups }));
      }), Rt.on(Pt.type, function(e2, t2) {
        return jt.with(n(n({}, e2), { attempts: 0, reason: t2.payload }));
      }), Rt.on(ft.type, function(e2) {
        return At.with({ channels: e2.channels, groups: e2.groups, cursor: e2.cursor });
      });
      var Ut = new Xe("HANDSHAKE_RECONNECTING");
      Ut.onEnter(function(e2) {
        return pt(e2);
      }), Ut.onExit(function() {
        return lt.cancel;
      }), Ut.on(St.type, function(e2, t2) {
        return Rt.with({ channels: e2.channels, groups: e2.groups, cursor: t2.payload.cursor }, [ct(t2.payload.events)]);
      }), Ut.on(wt.type, function(e2, t2) {
        return Ut.with(n(n({}, e2), { attempts: e2.attempts + 1, reason: t2.payload }));
      }), Ut.on(Tt.type, function(e2) {
        return Et.with({ groups: e2.groups, channels: e2.channels, reason: e2.reason });
      }), Ut.on(ft.type, function(e2) {
        return Ct.with({ channels: e2.channels, groups: e2.groups });
      });
      var xt = new Xe("HANDSHAKING");
      xt.onEnter(function(e2) {
        return at(e2.channels, e2.groups);
      }), xt.onExit(function() {
        return at.cancel;
      }), xt.on(ht.type, function(e2, t2) {
        return t2.payload.channels.length === 0 && t2.payload.groups.length === 0 ? Dt.with(void 0) : xt.with({ channels: t2.payload.channels, groups: t2.payload.groups });
      }), xt.on(gt.type, function(e2, t2) {
        return Rt.with({ channels: e2.channels, groups: e2.groups, cursor: t2.payload });
      }), xt.on(yt.type, function(e2, t2) {
        return Ut.with(n(n({}, e2), { attempts: 0, reason: t2.payload }));
      }), xt.on(ft.type, function(e2) {
        return Ct.with({ channels: e2.channels, groups: e2.groups });
      });
      var Dt = new Xe("UNSUBSCRIBED");
      Dt.on(ht.type, function(e2, t2) {
        return xt.with({ channels: t2.payload.channels, groups: t2.payload.groups });
      });
      var It = function() {
        function e2(e3) {
          var t2 = this;
          this.engine = new $e(), this.channels = [], this.groups = [], this.dispatcher = new Nt(this.engine, e3), this.engine.subscribe(function(e4) {
            e4.type === "invocationDispatched" && t2.dispatcher.dispatch(e4.invocation);
          }), this.engine.start(Dt, void 0);
        }
        return Object.defineProperty(e2.prototype, "_engine", { get: function() {
          return this.engine;
        }, enumerable: false, configurable: true }), e2.prototype.subscribe = function(e3) {
          var t2 = e3.channels, n2 = e3.groups;
          this.channels = u(u([], a(this.channels), false), a(t2 != null ? t2 : []), false), this.groups = u(u([], a(this.groups), false), a(n2 != null ? n2 : []), false), this.engine.transition(ht(this.channels, this.groups));
        }, e2.prototype.unsubscribe = function(e3) {
          var t2 = e3.channels, n2 = e3.groups;
          this.channels = this.channels.filter(function(e4) {
            var n3;
            return (n3 = !(t2 == null ? void 0 : t2.includes(e4))) === null || n3 === void 0 || n3;
          }), this.groups = this.groups.filter(function(e4) {
            var t3;
            return (t3 = !(n2 == null ? void 0 : n2.includes(e4))) === null || t3 === void 0 || t3;
          }), this.engine.transition(ht(this.channels.slice(0), this.groups.slice(0)));
        }, e2.prototype.unsubscribeAll = function() {
          this.channels = [], this.groups = [], this.engine.transition(ht(this.channels.slice(0), this.groups.slice(0)));
        }, e2.prototype.reconnect = function() {
          this.engine.transition(dt());
        }, e2.prototype.disconnect = function() {
          this.engine.transition(ft());
        }, e2;
      }(), Gt = function() {
        function e2(e3) {
          var t2 = this, r2 = e3.networking, i2 = e3.cbor, o2 = new _({ setup: e3 });
          this._config = o2;
          var s2 = new w({ config: o2 }), c2 = e3.cryptography;
          r2.init(o2);
          var l2 = new F(o2, i2);
          this._tokenManager = l2;
          var p2 = new R({ maximumSamplesCount: 6e4 });
          this._telemetryManager = p2;
          var h2 = { config: o2, networking: r2, crypto: s2, cryptography: c2, tokenManager: l2, telemetryManager: p2, PubNubFile: e3.PubNubFile };
          this.File = e3.PubNubFile, this.encryptFile = function(e4, n2) {
            return c2.encryptFile(e4, n2, t2.File);
          }, this.decryptFile = function(e4, n2) {
            return c2.decryptFile(e4, n2, t2.File);
          };
          var f2 = J.bind(this, h2, qe), d2 = J.bind(this, h2, re), g2 = J.bind(this, h2, oe), y2 = J.bind(this, h2, ae), b2 = J.bind(this, h2, ze), v2 = new K();
          if (this._listenerManager = v2, this.iAmHere = J.bind(this, h2, oe), this.iAmAway = J.bind(this, h2, re), this.setPresenceState = J.bind(this, h2, ae), this.handshake = J.bind(this, h2, Ve), this.receiveMessages = J.bind(this, h2, Je), o2.enableSubscribeBeta === true) {
            var m2 = new It({ handshake: this.handshake, receiveEvents: this.receiveMessages });
            this.subscribe = m2.subscribe.bind(m2), this.unsubscribe = m2.unsubscribe.bind(m2), this.eventEngine = m2;
          } else {
            var O2 = new M({ timeEndpoint: f2, leaveEndpoint: d2, heartbeatEndpoint: g2, setStateEndpoint: y2, subscribeEndpoint: b2, crypto: h2.crypto, config: h2.config, listenerManager: v2, getFileUrl: function(e4) {
              return ye(h2, e4);
            } });
            this.subscribe = O2.adaptSubscribeChange.bind(O2), this.unsubscribe = O2.adaptUnsubscribeChange.bind(O2), this.disconnect = O2.disconnect.bind(O2), this.reconnect = O2.reconnect.bind(O2), this.unsubscribeAll = O2.unsubscribeAll.bind(O2), this.getSubscribedChannels = O2.getSubscribedChannels.bind(O2), this.getSubscribedChannelGroups = O2.getSubscribedChannelGroups.bind(O2), this.setState = O2.adaptStateChange.bind(O2), this.presence = O2.adaptPresenceChange.bind(O2), this.destroy = function(e4) {
              O2.unsubscribeAll(e4), O2.disconnect();
            };
          }
          this.addListener = v2.addListener.bind(v2), this.removeListener = v2.removeListener.bind(v2), this.removeAllListeners = v2.removeAllListeners.bind(v2), this.parseToken = l2.parseToken.bind(l2), this.setToken = l2.setToken.bind(l2), this.getToken = l2.getToken.bind(l2), this.channelGroups = { listGroups: J.bind(this, h2, Q), listChannels: J.bind(this, h2, Y), addChannels: J.bind(this, h2, W), removeChannels: J.bind(this, h2, X), deleteGroup: J.bind(this, h2, $) }, this.push = { addChannels: J.bind(this, h2, Z), removeChannels: J.bind(this, h2, ee), deleteDevice: J.bind(this, h2, ne), listChannels: J.bind(this, h2, te) }, this.hereNow = J.bind(this, h2, ue), this.whereNow = J.bind(this, h2, ie), this.getState = J.bind(this, h2, se), this.grant = J.bind(this, h2, je), this.grantToken = J.bind(this, h2, Ue), this.audit = J.bind(this, h2, Me), this.revokeToken = J.bind(this, h2, xe), this.publish = J.bind(this, h2, Ie), this.fire = function(e4, n2) {
            return e4.replicate = false, e4.storeInHistory = false, t2.publish(e4, n2);
          }, this.signal = J.bind(this, h2, Ge), this.history = J.bind(this, h2, Fe), this.deleteMessages = J.bind(this, h2, Le), this.messageCounts = J.bind(this, h2, Be), this.fetchMessages = J.bind(this, h2, He), this.addMessageAction = J.bind(this, h2, ce), this.removeMessageAction = J.bind(this, h2, le), this.getMessageActions = J.bind(this, h2, pe), this.listFiles = J.bind(this, h2, he);
          var P2 = J.bind(this, h2, fe);
          this.publishFile = J.bind(this, h2, de), this.sendFile = ge({ generateUploadUrl: P2, publishFile: this.publishFile, modules: h2 }), this.getFileUrl = function(e4) {
            return ye(h2, e4);
          }, this.downloadFile = J.bind(this, h2, be), this.deleteFile = J.bind(this, h2, ve), this.objects = { getAllUUIDMetadata: J.bind(this, h2, me), getUUIDMetadata: J.bind(this, h2, _e), setUUIDMetadata: J.bind(this, h2, Oe), removeUUIDMetadata: J.bind(this, h2, Pe), getAllChannelMetadata: J.bind(this, h2, Se), getChannelMetadata: J.bind(this, h2, we), setChannelMetadata: J.bind(this, h2, Te), removeChannelMetadata: J.bind(this, h2, ke), getChannelMembers: J.bind(this, h2, Ne), setChannelMembers: function(e4) {
            for (var r3 = [], i3 = 1; i3 < arguments.length; i3++)
              r3[i3 - 1] = arguments[i3];
            return J.call.apply(J, u([t2, h2, Ce, n({ type: "set" }, e4)], a(r3), false));
          }, removeChannelMembers: function(e4) {
            for (var r3 = [], i3 = 1; i3 < arguments.length; i3++)
              r3[i3 - 1] = arguments[i3];
            return J.call.apply(J, u([t2, h2, Ce, n({ type: "delete" }, e4)], a(r3), false));
          }, getMemberships: J.bind(this, h2, Ee), setMemberships: function(e4) {
            for (var r3 = [], i3 = 1; i3 < arguments.length; i3++)
              r3[i3 - 1] = arguments[i3];
            return J.call.apply(J, u([t2, h2, Ae, n({ type: "set" }, e4)], a(r3), false));
          }, removeMemberships: function(e4) {
            for (var r3 = [], i3 = 1; i3 < arguments.length; i3++)
              r3[i3 - 1] = arguments[i3];
            return J.call.apply(J, u([t2, h2, Ae, n({ type: "delete" }, e4)], a(r3), false));
          } }, this.createUser = function(e4) {
            return t2.objects.setUUIDMetadata({ uuid: e4.userId, data: e4.data, include: e4.include });
          }, this.updateUser = this.createUser, this.removeUser = function(e4) {
            return t2.objects.removeUUIDMetadata({ uuid: e4 == null ? void 0 : e4.userId });
          }, this.fetchUser = function(e4) {
            return t2.objects.getUUIDMetadata({ uuid: e4 == null ? void 0 : e4.userId, include: e4 == null ? void 0 : e4.include });
          }, this.fetchUsers = this.objects.getAllUUIDMetadata, this.createSpace = function(e4) {
            return t2.objects.setChannelMetadata({ channel: e4.spaceId, data: e4.data, include: e4.include });
          }, this.updateSpace = this.createSpace, this.removeSpace = function(e4) {
            return t2.objects.removeChannelMetadata({ channel: e4.spaceId });
          }, this.fetchSpace = function(e4) {
            return t2.objects.getChannelMetadata({ channel: e4.spaceId, include: e4.include });
          }, this.fetchSpaces = this.objects.getAllChannelMetadata, this.addMemberships = function(e4) {
            var n2, r3;
            return typeof e4.spaceId == "string" ? t2.objects.setChannelMembers({ channel: e4.spaceId, uuids: (n2 = e4.users) === null || n2 === void 0 ? void 0 : n2.map(function(e5) {
              return typeof e5 == "string" ? e5 : { id: e5.userId, custom: e5.custom, status: e5.status };
            }), limit: 0 }) : t2.objects.setMemberships({ uuid: e4.userId, channels: (r3 = e4.spaces) === null || r3 === void 0 ? void 0 : r3.map(function(e5) {
              return typeof e5 == "string" ? e5 : { id: e5.spaceId, custom: e5.custom, status: e5.status };
            }), limit: 0 });
          }, this.updateMemberships = this.addMemberships, this.removeMemberships = function(e4) {
            return typeof e4.spaceId == "string" ? t2.objects.removeChannelMembers({ channel: e4.spaceId, uuids: e4.userIds, limit: 0 }) : t2.objects.removeMemberships({ uuid: e4.userId, channels: e4.spaceIds, limit: 0 });
          }, this.fetchMemberships = function(e4) {
            return typeof e4.spaceId == "string" ? t2.objects.getChannelMembers({ channel: e4.spaceId, filter: e4.filter, limit: e4.limit, page: e4.page, include: { customFields: e4.include.customFields, UUIDFields: e4.include.userFields, customUUIDFields: e4.include.customUserFields, totalCount: e4.include.totalCount }, sort: e4.sort != null ? Object.fromEntries(Object.entries(e4.sort).map(function(e5) {
              var t3 = a(e5, 2), n2 = t3[0], r3 = t3[1];
              return [n2.replace("user", "uuid"), r3];
            })) : null }).then(function(e5) {
              var t3;
              return e5.data = (t3 = e5.data) === null || t3 === void 0 ? void 0 : t3.map(function(e6) {
                return { user: e6.uuid, custom: e6.custom, updated: e6.updated, eTag: e6.eTag };
              }), e5;
            }) : t2.objects.getMemberships({ uuid: e4.userId, filter: e4.filter, limit: e4.limit, page: e4.page, include: { customFields: e4.include.customFields, channelFields: e4.include.spaceFields, customChannelFields: e4.include.customSpaceFields, totalCount: e4.include.totalCount }, sort: e4.sort != null ? Object.fromEntries(Object.entries(e4.sort).map(function(e5) {
              var t3 = a(e5, 2), n2 = t3[0], r3 = t3[1];
              return [n2.replace("space", "channel"), r3];
            })) : null }).then(function(e5) {
              var t3;
              return e5.data = (t3 = e5.data) === null || t3 === void 0 ? void 0 : t3.map(function(e6) {
                return { space: e6.channel, custom: e6.custom, updated: e6.updated, eTag: e6.eTag };
              }), e5;
            });
          }, this.time = f2, this.stop = this.destroy, this.encrypt = s2.encrypt.bind(s2), this.decrypt = s2.decrypt.bind(s2), this.getAuthKey = h2.config.getAuthKey.bind(h2.config), this.setAuthKey = h2.config.setAuthKey.bind(h2.config), this.setCipherKey = h2.config.setCipherKey.bind(h2.config), this.getUUID = h2.config.getUUID.bind(h2.config), this.setUUID = h2.config.setUUID.bind(h2.config), this.getFilterExpression = h2.config.getFilterExpression.bind(h2.config), this.setFilterExpression = h2.config.setFilterExpression.bind(h2.config), this.setHeartbeatInterval = h2.config.setHeartbeatInterval.bind(h2.config), r2.hasModule("proxy") && (this.setProxy = function(e4) {
            h2.config.setProxy(e4), t2.reconnect();
          });
        }
        return e2.prototype.getVersion = function() {
          return this._config.getVersion();
        }, e2.prototype._addPnsdkSuffix = function(e3, t2) {
          this._config._addPnsdkSuffix(e3, t2);
        }, e2.prototype.networkDownDetected = function() {
          this._listenerManager.announceNetworkDown(), this._config.restore ? this.disconnect() : this.destroy(true);
        }, e2.prototype.networkUpDetected = function() {
          this._listenerManager.announceNetworkUp(), this.reconnect();
        }, e2.notificationPayload = function(e3, t2) {
          return new G(e3, t2);
        }, e2.generateUUID = function() {
          return m();
        }, e2.OPERATIONS = j, e2.CATEGORIES = A, e2;
      }(), Kt = function() {
        function e2(e3) {
          var t2 = this;
          this._modules = {}, Object.keys(e3).forEach(function(n2) {
            t2._modules[n2] = e3[n2].bind(t2);
          });
        }
        return e2.prototype.init = function(e3) {
          this._config = e3, Array.isArray(this._config.origin) ? this._currentSubDomain = Math.floor(Math.random() * this._config.origin.length) : this._currentSubDomain = 0, this._coreParams = {}, this.shiftStandardOrigin();
        }, e2.prototype.nextOrigin = function() {
          var e3 = this._config.secure ? "https://" : "http://";
          if (typeof this._config.origin == "string")
            return "".concat(e3).concat(this._config.origin);
          this._currentSubDomain += 1, this._currentSubDomain >= this._config.origin.length && (this._currentSubDomain = 0);
          var t2 = this._config.origin[this._currentSubDomain];
          return "".concat(e3).concat(t2);
        }, e2.prototype.hasModule = function(e3) {
          return e3 in this._modules;
        }, e2.prototype.shiftStandardOrigin = function() {
          return this._standardOrigin = this.nextOrigin(), this._standardOrigin;
        }, e2.prototype.getStandardOrigin = function() {
          return this._standardOrigin;
        }, e2.prototype.POSTFILE = function(e3, t2, n2) {
          return this._modules.postfile(e3, t2, n2);
        }, e2.prototype.GETFILE = function(e3, t2, n2) {
          return this._modules.getfile(e3, t2, n2);
        }, e2.prototype.POST = function(e3, t2, n2, r2) {
          return this._modules.post(e3, t2, n2, r2);
        }, e2.prototype.PATCH = function(e3, t2, n2, r2) {
          return this._modules.patch(e3, t2, n2, r2);
        }, e2.prototype.GET = function(e3, t2, n2) {
          return this._modules.get(e3, t2, n2);
        }, e2.prototype.DELETE = function(e3, t2, n2) {
          return this._modules.del(e3, t2, n2);
        }, e2.prototype._detectErrorCategory = function(e3) {
          if (e3.code === "ENOTFOUND")
            return A.PNNetworkIssuesCategory;
          if (e3.code === "ECONNREFUSED")
            return A.PNNetworkIssuesCategory;
          if (e3.code === "ECONNRESET")
            return A.PNNetworkIssuesCategory;
          if (e3.code === "EAI_AGAIN")
            return A.PNNetworkIssuesCategory;
          if (e3.status === 0 || e3.hasOwnProperty("status") && e3.status === void 0)
            return A.PNNetworkIssuesCategory;
          if (e3.timeout)
            return A.PNTimeoutCategory;
          if (e3.code === "ETIMEDOUT")
            return A.PNNetworkIssuesCategory;
          if (e3.response) {
            if (e3.response.badRequest)
              return A.PNBadRequestCategory;
            if (e3.response.forbidden)
              return A.PNAccessDeniedCategory;
          }
          return A.PNUnknownCategory;
        }, e2;
      }(), Ft = function() {
        function e2(e3, t2) {
          this._base64ToBinary = t2, this._decode = e3;
        }
        return e2.prototype.decodeToken = function(e3) {
          var t2 = "";
          e3.length % 4 == 3 ? t2 = "=" : e3.length % 4 == 2 && (t2 = "==");
          var n2 = e3.replace(/-/gi, "+").replace(/_/gi, "/") + t2, r2 = this._decode(this._base64ToBinary(n2));
          if (typeof r2 == "object")
            return r2;
        }, e2;
      }(), Lt = { exports: {} }, Bt = { exports: {} };
      !function(e2) {
        function t2(e3) {
          if (e3)
            return function(e4) {
              for (var n2 in t2.prototype)
                e4[n2] = t2.prototype[n2];
              return e4;
            }(e3);
        }
        e2.exports = t2, t2.prototype.on = t2.prototype.addEventListener = function(e3, t3) {
          return this._callbacks = this._callbacks || {}, (this._callbacks["$" + e3] = this._callbacks["$" + e3] || []).push(t3), this;
        }, t2.prototype.once = function(e3, t3) {
          function n2() {
            this.off(e3, n2), t3.apply(this, arguments);
          }
          return n2.fn = t3, this.on(e3, n2), this;
        }, t2.prototype.off = t2.prototype.removeListener = t2.prototype.removeAllListeners = t2.prototype.removeEventListener = function(e3, t3) {
          if (this._callbacks = this._callbacks || {}, arguments.length == 0)
            return this._callbacks = {}, this;
          var n2, r2 = this._callbacks["$" + e3];
          if (!r2)
            return this;
          if (arguments.length == 1)
            return delete this._callbacks["$" + e3], this;
          for (var i2 = 0; i2 < r2.length; i2++)
            if ((n2 = r2[i2]) === t3 || n2.fn === t3) {
              r2.splice(i2, 1);
              break;
            }
          return r2.length === 0 && delete this._callbacks["$" + e3], this;
        }, t2.prototype.emit = function(e3) {
          this._callbacks = this._callbacks || {};
          for (var t3 = new Array(arguments.length - 1), n2 = this._callbacks["$" + e3], r2 = 1; r2 < arguments.length; r2++)
            t3[r2 - 1] = arguments[r2];
          if (n2) {
            r2 = 0;
            for (var i2 = (n2 = n2.slice(0)).length; r2 < i2; ++r2)
              n2[r2].apply(this, t3);
          }
          return this;
        }, t2.prototype.listeners = function(e3) {
          return this._callbacks = this._callbacks || {}, this._callbacks["$" + e3] || [];
        }, t2.prototype.hasListeners = function(e3) {
          return !!this.listeners(e3).length;
        };
      }(Bt);
      var Ht = Xt;
      Xt.default = Xt, Xt.stable = Zt, Xt.stableStringify = Zt;
      var qt = "[...]", zt = "[Circular]", Vt = [], Jt = [];
      function Wt() {
        return { depthLimit: Number.MAX_SAFE_INTEGER, edgesLimit: Number.MAX_SAFE_INTEGER };
      }
      function Xt(e2, t2, n2, r2) {
        var i2;
        r2 === void 0 && (r2 = Wt()), Qt(e2, "", 0, [], void 0, 0, r2);
        try {
          i2 = Jt.length === 0 ? JSON.stringify(e2, t2, n2) : JSON.stringify(e2, tn(t2), n2);
        } catch (e3) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          for (; Vt.length !== 0; ) {
            var o2 = Vt.pop();
            o2.length === 4 ? Object.defineProperty(o2[0], o2[1], o2[3]) : o2[0][o2[1]] = o2[2];
          }
        }
        return i2;
      }
      function $t(e2, t2, n2, r2) {
        var i2 = Object.getOwnPropertyDescriptor(r2, n2);
        i2.get !== void 0 ? i2.configurable ? (Object.defineProperty(r2, n2, { value: e2 }), Vt.push([r2, n2, t2, i2])) : Jt.push([t2, n2, e2]) : (r2[n2] = e2, Vt.push([r2, n2, t2]));
      }
      function Qt(e2, t2, n2, r2, i2, o2, s2) {
        var a2;
        if (o2 += 1, typeof e2 == "object" && e2 !== null) {
          for (a2 = 0; a2 < r2.length; a2++)
            if (r2[a2] === e2)
              return void $t(zt, e2, t2, i2);
          if (s2.depthLimit !== void 0 && o2 > s2.depthLimit)
            return void $t(qt, e2, t2, i2);
          if (s2.edgesLimit !== void 0 && n2 + 1 > s2.edgesLimit)
            return void $t(qt, e2, t2, i2);
          if (r2.push(e2), Array.isArray(e2))
            for (a2 = 0; a2 < e2.length; a2++)
              Qt(e2[a2], a2, a2, r2, e2, o2, s2);
          else {
            var u2 = Object.keys(e2);
            for (a2 = 0; a2 < u2.length; a2++) {
              var c2 = u2[a2];
              Qt(e2[c2], c2, a2, r2, e2, o2, s2);
            }
          }
          r2.pop();
        }
      }
      function Yt(e2, t2) {
        return e2 < t2 ? -1 : e2 > t2 ? 1 : 0;
      }
      function Zt(e2, t2, n2, r2) {
        r2 === void 0 && (r2 = Wt());
        var i2, o2 = en(e2, "", 0, [], void 0, 0, r2) || e2;
        try {
          i2 = Jt.length === 0 ? JSON.stringify(o2, t2, n2) : JSON.stringify(o2, tn(t2), n2);
        } catch (e3) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          for (; Vt.length !== 0; ) {
            var s2 = Vt.pop();
            s2.length === 4 ? Object.defineProperty(s2[0], s2[1], s2[3]) : s2[0][s2[1]] = s2[2];
          }
        }
        return i2;
      }
      function en(e2, t2, n2, r2, i2, o2, s2) {
        var a2;
        if (o2 += 1, typeof e2 == "object" && e2 !== null) {
          for (a2 = 0; a2 < r2.length; a2++)
            if (r2[a2] === e2)
              return void $t(zt, e2, t2, i2);
          try {
            if (typeof e2.toJSON == "function")
              return;
          } catch (e3) {
            return;
          }
          if (s2.depthLimit !== void 0 && o2 > s2.depthLimit)
            return void $t(qt, e2, t2, i2);
          if (s2.edgesLimit !== void 0 && n2 + 1 > s2.edgesLimit)
            return void $t(qt, e2, t2, i2);
          if (r2.push(e2), Array.isArray(e2))
            for (a2 = 0; a2 < e2.length; a2++)
              en(e2[a2], a2, a2, r2, e2, o2, s2);
          else {
            var u2 = {}, c2 = Object.keys(e2).sort(Yt);
            for (a2 = 0; a2 < c2.length; a2++) {
              var l2 = c2[a2];
              en(e2[l2], l2, a2, r2, e2, o2, s2), u2[l2] = e2[l2];
            }
            if (i2 === void 0)
              return u2;
            Vt.push([i2, t2, e2]), i2[t2] = u2;
          }
          r2.pop();
        }
      }
      function tn(e2) {
        return e2 = e2 !== void 0 ? e2 : function(e3, t2) {
          return t2;
        }, function(t2, n2) {
          if (Jt.length > 0)
            for (var r2 = 0; r2 < Jt.length; r2++) {
              var i2 = Jt[r2];
              if (i2[1] === t2 && i2[0] === n2) {
                n2 = i2[2], Jt.splice(r2, 1);
                break;
              }
            }
          return e2.call(this, t2, n2);
        };
      }
      var nn = String.prototype.replace, rn = /%20/g, on = "RFC3986", sn = { default: on, formatters: { RFC1738: function(e2) {
        return nn.call(e2, rn, "+");
      }, RFC3986: function(e2) {
        return String(e2);
      } }, RFC1738: "RFC1738", RFC3986: on }, an = sn, un = Object.prototype.hasOwnProperty, cn = Array.isArray, ln = function() {
        for (var e2 = [], t2 = 0; t2 < 256; ++t2)
          e2.push("%" + ((t2 < 16 ? "0" : "") + t2.toString(16)).toUpperCase());
        return e2;
      }(), pn = function(e2, t2) {
        for (var n2 = t2 && t2.plainObjects ? Object.create(null) : {}, r2 = 0; r2 < e2.length; ++r2)
          e2[r2] !== void 0 && (n2[r2] = e2[r2]);
        return n2;
      }, hn = { arrayToObject: pn, assign: function(e2, t2) {
        return Object.keys(t2).reduce(function(e3, n2) {
          return e3[n2] = t2[n2], e3;
        }, e2);
      }, combine: function(e2, t2) {
        return [].concat(e2, t2);
      }, compact: function(e2) {
        for (var t2 = [{ obj: { o: e2 }, prop: "o" }], n2 = [], r2 = 0; r2 < t2.length; ++r2)
          for (var i2 = t2[r2], o2 = i2.obj[i2.prop], s2 = Object.keys(o2), a2 = 0; a2 < s2.length; ++a2) {
            var u2 = s2[a2], c2 = o2[u2];
            typeof c2 == "object" && c2 !== null && n2.indexOf(c2) === -1 && (t2.push({ obj: o2, prop: u2 }), n2.push(c2));
          }
        return function(e3) {
          for (; e3.length > 1; ) {
            var t3 = e3.pop(), n3 = t3.obj[t3.prop];
            if (cn(n3)) {
              for (var r3 = [], i3 = 0; i3 < n3.length; ++i3)
                n3[i3] !== void 0 && r3.push(n3[i3]);
              t3.obj[t3.prop] = r3;
            }
          }
        }(t2), e2;
      }, decode: function(e2, t2, n2) {
        var r2 = e2.replace(/\+/g, " ");
        if (n2 === "iso-8859-1")
          return r2.replace(/%[0-9a-f]{2}/gi, unescape);
        try {
          return decodeURIComponent(r2);
        } catch (e3) {
          return r2;
        }
      }, encode: function(e2, t2, n2, r2, i2) {
        if (e2.length === 0)
          return e2;
        var o2 = e2;
        if (typeof e2 == "symbol" ? o2 = Symbol.prototype.toString.call(e2) : typeof e2 != "string" && (o2 = String(e2)), n2 === "iso-8859-1")
          return escape(o2).replace(/%u[0-9a-f]{4}/gi, function(e3) {
            return "%26%23" + parseInt(e3.slice(2), 16) + "%3B";
          });
        for (var s2 = "", a2 = 0; a2 < o2.length; ++a2) {
          var u2 = o2.charCodeAt(a2);
          u2 === 45 || u2 === 46 || u2 === 95 || u2 === 126 || u2 >= 48 && u2 <= 57 || u2 >= 65 && u2 <= 90 || u2 >= 97 && u2 <= 122 || i2 === an.RFC1738 && (u2 === 40 || u2 === 41) ? s2 += o2.charAt(a2) : u2 < 128 ? s2 += ln[u2] : u2 < 2048 ? s2 += ln[192 | u2 >> 6] + ln[128 | 63 & u2] : u2 < 55296 || u2 >= 57344 ? s2 += ln[224 | u2 >> 12] + ln[128 | u2 >> 6 & 63] + ln[128 | 63 & u2] : (a2 += 1, u2 = 65536 + ((1023 & u2) << 10 | 1023 & o2.charCodeAt(a2)), s2 += ln[240 | u2 >> 18] + ln[128 | u2 >> 12 & 63] + ln[128 | u2 >> 6 & 63] + ln[128 | 63 & u2]);
        }
        return s2;
      }, isBuffer: function(e2) {
        return !(!e2 || typeof e2 != "object") && !!(e2.constructor && e2.constructor.isBuffer && e2.constructor.isBuffer(e2));
      }, isRegExp: function(e2) {
        return Object.prototype.toString.call(e2) === "[object RegExp]";
      }, maybeMap: function(e2, t2) {
        if (cn(e2)) {
          for (var n2 = [], r2 = 0; r2 < e2.length; r2 += 1)
            n2.push(t2(e2[r2]));
          return n2;
        }
        return t2(e2);
      }, merge: function e2(t2, n2, r2) {
        if (!n2)
          return t2;
        if (typeof n2 != "object") {
          if (cn(t2))
            t2.push(n2);
          else {
            if (!t2 || typeof t2 != "object")
              return [t2, n2];
            (r2 && (r2.plainObjects || r2.allowPrototypes) || !un.call(Object.prototype, n2)) && (t2[n2] = true);
          }
          return t2;
        }
        if (!t2 || typeof t2 != "object")
          return [t2].concat(n2);
        var i2 = t2;
        return cn(t2) && !cn(n2) && (i2 = pn(t2, r2)), cn(t2) && cn(n2) ? (n2.forEach(function(n3, i3) {
          if (un.call(t2, i3)) {
            var o2 = t2[i3];
            o2 && typeof o2 == "object" && n3 && typeof n3 == "object" ? t2[i3] = e2(o2, n3, r2) : t2.push(n3);
          } else
            t2[i3] = n3;
        }), t2) : Object.keys(n2).reduce(function(t3, i3) {
          var o2 = n2[i3];
          return un.call(t3, i3) ? t3[i3] = e2(t3[i3], o2, r2) : t3[i3] = o2, t3;
        }, i2);
      } }, fn = hn, dn = sn, gn = Object.prototype.hasOwnProperty, yn = { brackets: function(e2) {
        return e2 + "[]";
      }, comma: "comma", indices: function(e2, t2) {
        return e2 + "[" + t2 + "]";
      }, repeat: function(e2) {
        return e2;
      } }, bn = Array.isArray, vn = String.prototype.split, mn = Array.prototype.push, _n = function(e2, t2) {
        mn.apply(e2, bn(t2) ? t2 : [t2]);
      }, On = Date.prototype.toISOString, Pn = dn.default, Sn = { addQueryPrefix: false, allowDots: false, charset: "utf-8", charsetSentinel: false, delimiter: "&", encode: true, encoder: fn.encode, encodeValuesOnly: false, format: Pn, formatter: dn.formatters[Pn], indices: false, serializeDate: function(e2) {
        return On.call(e2);
      }, skipNulls: false, strictNullHandling: false }, wn = function e2(t2, n2, r2, i2, o2, s2, a2, u2, c2, l2, p2, h2, f2, d2) {
        var g2, y2 = t2;
        if (typeof a2 == "function" ? y2 = a2(n2, y2) : y2 instanceof Date ? y2 = l2(y2) : r2 === "comma" && bn(y2) && (y2 = fn.maybeMap(y2, function(e3) {
          return e3 instanceof Date ? l2(e3) : e3;
        })), y2 === null) {
          if (i2)
            return s2 && !f2 ? s2(n2, Sn.encoder, d2, "key", p2) : n2;
          y2 = "";
        }
        if (typeof (g2 = y2) == "string" || typeof g2 == "number" || typeof g2 == "boolean" || typeof g2 == "symbol" || typeof g2 == "bigint" || fn.isBuffer(y2)) {
          if (s2) {
            var b2 = f2 ? n2 : s2(n2, Sn.encoder, d2, "key", p2);
            if (r2 === "comma" && f2) {
              for (var v2 = vn.call(String(y2), ","), m2 = "", _2 = 0; _2 < v2.length; ++_2)
                m2 += (_2 === 0 ? "" : ",") + h2(s2(v2[_2], Sn.encoder, d2, "value", p2));
              return [h2(b2) + "=" + m2];
            }
            return [h2(b2) + "=" + h2(s2(y2, Sn.encoder, d2, "value", p2))];
          }
          return [h2(n2) + "=" + h2(String(y2))];
        }
        var O2, P2 = [];
        if (y2 === void 0)
          return P2;
        if (r2 === "comma" && bn(y2))
          O2 = [{ value: y2.length > 0 ? y2.join(",") || null : void 0 }];
        else if (bn(a2))
          O2 = a2;
        else {
          var S2 = Object.keys(y2);
          O2 = u2 ? S2.sort(u2) : S2;
        }
        for (var w2 = 0; w2 < O2.length; ++w2) {
          var T2 = O2[w2], k2 = typeof T2 == "object" && T2.value !== void 0 ? T2.value : y2[T2];
          if (!o2 || k2 !== null) {
            var N2 = bn(y2) ? typeof r2 == "function" ? r2(n2, T2) : n2 : n2 + (c2 ? "." + T2 : "[" + T2 + "]");
            _n(P2, e2(k2, N2, r2, i2, o2, s2, a2, u2, c2, l2, p2, h2, f2, d2));
          }
        }
        return P2;
      }, Tn = hn, kn = Object.prototype.hasOwnProperty, Nn = Array.isArray, Cn = { allowDots: false, allowPrototypes: false, arrayLimit: 20, charset: "utf-8", charsetSentinel: false, comma: false, decoder: Tn.decode, delimiter: "&", depth: 5, ignoreQueryPrefix: false, interpretNumericEntities: false, parameterLimit: 1e3, parseArrays: true, plainObjects: false, strictNullHandling: false }, En = function(e2) {
        return e2.replace(/&#(\d+);/g, function(e3, t2) {
          return String.fromCharCode(parseInt(t2, 10));
        });
      }, An = function(e2, t2) {
        return e2 && typeof e2 == "string" && t2.comma && e2.indexOf(",") > -1 ? e2.split(",") : e2;
      }, Mn = function(e2, t2, n2, r2) {
        if (e2) {
          var i2 = n2.allowDots ? e2.replace(/\.([^.[]+)/g, "[$1]") : e2, o2 = /(\[[^[\]]*])/g, s2 = n2.depth > 0 && /(\[[^[\]]*])/.exec(i2), a2 = s2 ? i2.slice(0, s2.index) : i2, u2 = [];
          if (a2) {
            if (!n2.plainObjects && kn.call(Object.prototype, a2) && !n2.allowPrototypes)
              return;
            u2.push(a2);
          }
          for (var c2 = 0; n2.depth > 0 && (s2 = o2.exec(i2)) !== null && c2 < n2.depth; ) {
            if (c2 += 1, !n2.plainObjects && kn.call(Object.prototype, s2[1].slice(1, -1)) && !n2.allowPrototypes)
              return;
            u2.push(s2[1]);
          }
          return s2 && u2.push("[" + i2.slice(s2.index) + "]"), function(e3, t3, n3, r3) {
            for (var i3 = r3 ? t3 : An(t3, n3), o3 = e3.length - 1; o3 >= 0; --o3) {
              var s3, a3 = e3[o3];
              if (a3 === "[]" && n3.parseArrays)
                s3 = [].concat(i3);
              else {
                s3 = n3.plainObjects ? Object.create(null) : {};
                var u3 = a3.charAt(0) === "[" && a3.charAt(a3.length - 1) === "]" ? a3.slice(1, -1) : a3, c3 = parseInt(u3, 10);
                n3.parseArrays || u3 !== "" ? !isNaN(c3) && a3 !== u3 && String(c3) === u3 && c3 >= 0 && n3.parseArrays && c3 <= n3.arrayLimit ? (s3 = [])[c3] = i3 : u3 !== "__proto__" && (s3[u3] = i3) : s3 = { 0: i3 };
              }
              i3 = s3;
            }
            return i3;
          }(u2, t2, n2, r2);
        }
      }, jn = { formats: sn, parse: function(e2, t2) {
        var n2 = function(e3) {
          if (!e3)
            return Cn;
          if (e3.decoder !== null && e3.decoder !== void 0 && typeof e3.decoder != "function")
            throw new TypeError("Decoder has to be a function.");
          if (e3.charset !== void 0 && e3.charset !== "utf-8" && e3.charset !== "iso-8859-1")
            throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
          var t3 = e3.charset === void 0 ? Cn.charset : e3.charset;
          return { allowDots: e3.allowDots === void 0 ? Cn.allowDots : !!e3.allowDots, allowPrototypes: typeof e3.allowPrototypes == "boolean" ? e3.allowPrototypes : Cn.allowPrototypes, arrayLimit: typeof e3.arrayLimit == "number" ? e3.arrayLimit : Cn.arrayLimit, charset: t3, charsetSentinel: typeof e3.charsetSentinel == "boolean" ? e3.charsetSentinel : Cn.charsetSentinel, comma: typeof e3.comma == "boolean" ? e3.comma : Cn.comma, decoder: typeof e3.decoder == "function" ? e3.decoder : Cn.decoder, delimiter: typeof e3.delimiter == "string" || Tn.isRegExp(e3.delimiter) ? e3.delimiter : Cn.delimiter, depth: typeof e3.depth == "number" || e3.depth === false ? +e3.depth : Cn.depth, ignoreQueryPrefix: e3.ignoreQueryPrefix === true, interpretNumericEntities: typeof e3.interpretNumericEntities == "boolean" ? e3.interpretNumericEntities : Cn.interpretNumericEntities, parameterLimit: typeof e3.parameterLimit == "number" ? e3.parameterLimit : Cn.parameterLimit, parseArrays: e3.parseArrays !== false, plainObjects: typeof e3.plainObjects == "boolean" ? e3.plainObjects : Cn.plainObjects, strictNullHandling: typeof e3.strictNullHandling == "boolean" ? e3.strictNullHandling : Cn.strictNullHandling };
        }(t2);
        if (e2 === "" || e2 == null)
          return n2.plainObjects ? Object.create(null) : {};
        for (var r2 = typeof e2 == "string" ? function(e3, t3) {
          var n3, r3 = {}, i3 = t3.ignoreQueryPrefix ? e3.replace(/^\?/, "") : e3, o3 = t3.parameterLimit === 1 / 0 ? void 0 : t3.parameterLimit, s3 = i3.split(t3.delimiter, o3), a3 = -1, u3 = t3.charset;
          if (t3.charsetSentinel)
            for (n3 = 0; n3 < s3.length; ++n3)
              s3[n3].indexOf("utf8=") === 0 && (s3[n3] === "utf8=%E2%9C%93" ? u3 = "utf-8" : s3[n3] === "utf8=%26%2310003%3B" && (u3 = "iso-8859-1"), a3 = n3, n3 = s3.length);
          for (n3 = 0; n3 < s3.length; ++n3)
            if (n3 !== a3) {
              var c2, l2, p2 = s3[n3], h2 = p2.indexOf("]="), f2 = h2 === -1 ? p2.indexOf("=") : h2 + 1;
              f2 === -1 ? (c2 = t3.decoder(p2, Cn.decoder, u3, "key"), l2 = t3.strictNullHandling ? null : "") : (c2 = t3.decoder(p2.slice(0, f2), Cn.decoder, u3, "key"), l2 = Tn.maybeMap(An(p2.slice(f2 + 1), t3), function(e4) {
                return t3.decoder(e4, Cn.decoder, u3, "value");
              })), l2 && t3.interpretNumericEntities && u3 === "iso-8859-1" && (l2 = En(l2)), p2.indexOf("[]=") > -1 && (l2 = Nn(l2) ? [l2] : l2), kn.call(r3, c2) ? r3[c2] = Tn.combine(r3[c2], l2) : r3[c2] = l2;
            }
          return r3;
        }(e2, n2) : e2, i2 = n2.plainObjects ? Object.create(null) : {}, o2 = Object.keys(r2), s2 = 0; s2 < o2.length; ++s2) {
          var a2 = o2[s2], u2 = Mn(a2, r2[a2], n2, typeof e2 == "string");
          i2 = Tn.merge(i2, u2, n2);
        }
        return Tn.compact(i2);
      }, stringify: function(e2, t2) {
        var n2, r2 = e2, i2 = function(e3) {
          if (!e3)
            return Sn;
          if (e3.encoder !== null && e3.encoder !== void 0 && typeof e3.encoder != "function")
            throw new TypeError("Encoder has to be a function.");
          var t3 = e3.charset || Sn.charset;
          if (e3.charset !== void 0 && e3.charset !== "utf-8" && e3.charset !== "iso-8859-1")
            throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
          var n3 = dn.default;
          if (e3.format !== void 0) {
            if (!gn.call(dn.formatters, e3.format))
              throw new TypeError("Unknown format option provided.");
            n3 = e3.format;
          }
          var r3 = dn.formatters[n3], i3 = Sn.filter;
          return (typeof e3.filter == "function" || bn(e3.filter)) && (i3 = e3.filter), { addQueryPrefix: typeof e3.addQueryPrefix == "boolean" ? e3.addQueryPrefix : Sn.addQueryPrefix, allowDots: e3.allowDots === void 0 ? Sn.allowDots : !!e3.allowDots, charset: t3, charsetSentinel: typeof e3.charsetSentinel == "boolean" ? e3.charsetSentinel : Sn.charsetSentinel, delimiter: e3.delimiter === void 0 ? Sn.delimiter : e3.delimiter, encode: typeof e3.encode == "boolean" ? e3.encode : Sn.encode, encoder: typeof e3.encoder == "function" ? e3.encoder : Sn.encoder, encodeValuesOnly: typeof e3.encodeValuesOnly == "boolean" ? e3.encodeValuesOnly : Sn.encodeValuesOnly, filter: i3, format: n3, formatter: r3, serializeDate: typeof e3.serializeDate == "function" ? e3.serializeDate : Sn.serializeDate, skipNulls: typeof e3.skipNulls == "boolean" ? e3.skipNulls : Sn.skipNulls, sort: typeof e3.sort == "function" ? e3.sort : null, strictNullHandling: typeof e3.strictNullHandling == "boolean" ? e3.strictNullHandling : Sn.strictNullHandling };
        }(t2);
        typeof i2.filter == "function" ? r2 = (0, i2.filter)("", r2) : bn(i2.filter) && (n2 = i2.filter);
        var o2, s2 = [];
        if (typeof r2 != "object" || r2 === null)
          return "";
        o2 = t2 && t2.arrayFormat in yn ? t2.arrayFormat : t2 && "indices" in t2 ? t2.indices ? "indices" : "repeat" : "indices";
        var a2 = yn[o2];
        n2 || (n2 = Object.keys(r2)), i2.sort && n2.sort(i2.sort);
        for (var u2 = 0; u2 < n2.length; ++u2) {
          var c2 = n2[u2];
          i2.skipNulls && r2[c2] === null || _n(s2, wn(r2[c2], c2, a2, i2.strictNullHandling, i2.skipNulls, i2.encode ? i2.encoder : null, i2.filter, i2.sort, i2.allowDots, i2.serializeDate, i2.format, i2.formatter, i2.encodeValuesOnly, i2.charset));
        }
        var l2 = s2.join(i2.delimiter), p2 = i2.addQueryPrefix === true ? "?" : "";
        return i2.charsetSentinel && (i2.charset === "iso-8859-1" ? p2 += "utf8=%26%2310003%3B&" : p2 += "utf8=%E2%9C%93&"), l2.length > 0 ? p2 + l2 : "";
      } };
      function Rn(e2) {
        return Rn = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        }, Rn(e2);
      }
      var Un = function(e2) {
        return e2 !== null && Rn(e2) === "object";
      };
      function xn(e2) {
        return xn = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && typeof Symbol == "function" && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        }, xn(e2);
      }
      var Dn = Un, In = Gn;
      function Gn(e2) {
        if (e2)
          return function(e3) {
            for (var t2 in Gn.prototype)
              Object.prototype.hasOwnProperty.call(Gn.prototype, t2) && (e3[t2] = Gn.prototype[t2]);
            return e3;
          }(e2);
      }
      Gn.prototype.clearTimeout = function() {
        return clearTimeout(this._timer), clearTimeout(this._responseTimeoutTimer), clearTimeout(this._uploadTimeoutTimer), delete this._timer, delete this._responseTimeoutTimer, delete this._uploadTimeoutTimer, this;
      }, Gn.prototype.parse = function(e2) {
        return this._parser = e2, this;
      }, Gn.prototype.responseType = function(e2) {
        return this._responseType = e2, this;
      }, Gn.prototype.serialize = function(e2) {
        return this._serializer = e2, this;
      }, Gn.prototype.timeout = function(e2) {
        if (!e2 || xn(e2) !== "object")
          return this._timeout = e2, this._responseTimeout = 0, this._uploadTimeout = 0, this;
        for (var t2 in e2)
          if (Object.prototype.hasOwnProperty.call(e2, t2))
            switch (t2) {
              case "deadline":
                this._timeout = e2.deadline;
                break;
              case "response":
                this._responseTimeout = e2.response;
                break;
              case "upload":
                this._uploadTimeout = e2.upload;
                break;
              default:
                console.warn("Unknown timeout option", t2);
            }
        return this;
      }, Gn.prototype.retry = function(e2, t2) {
        return arguments.length !== 0 && e2 !== true || (e2 = 1), e2 <= 0 && (e2 = 0), this._maxRetries = e2, this._retries = 0, this._retryCallback = t2, this;
      };
      var Kn = new Set(["ETIMEDOUT", "ECONNRESET", "EADDRINUSE", "ECONNREFUSED", "EPIPE", "ENOTFOUND", "ENETUNREACH", "EAI_AGAIN"]), Fn = new Set([408, 413, 429, 500, 502, 503, 504, 521, 522, 524]);
      Gn.prototype._shouldRetry = function(e2, t2) {
        if (!this._maxRetries || this._retries++ >= this._maxRetries)
          return false;
        if (this._retryCallback)
          try {
            var n2 = this._retryCallback(e2, t2);
            if (n2 === true)
              return true;
            if (n2 === false)
              return false;
          } catch (e3) {
            console.error(e3);
          }
        if (t2 && t2.status && Fn.has(t2.status))
          return true;
        if (e2) {
          if (e2.code && Kn.has(e2.code))
            return true;
          if (e2.timeout && e2.code === "ECONNABORTED")
            return true;
          if (e2.crossDomain)
            return true;
        }
        return false;
      }, Gn.prototype._retry = function() {
        return this.clearTimeout(), this.req && (this.req = null, this.req = this.request()), this._aborted = false, this.timedout = false, this.timedoutError = null, this._end();
      }, Gn.prototype.then = function(e2, t2) {
        var n2 = this;
        if (!this._fullfilledPromise) {
          var r2 = this;
          this._endCalled && console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"), this._fullfilledPromise = new Promise(function(e3, t3) {
            r2.on("abort", function() {
              if (!(n2._maxRetries && n2._maxRetries > n2._retries))
                if (n2.timedout && n2.timedoutError)
                  t3(n2.timedoutError);
                else {
                  var e4 = new Error("Aborted");
                  e4.code = "ABORTED", e4.status = n2.status, e4.method = n2.method, e4.url = n2.url, t3(e4);
                }
            }), r2.end(function(n3, r3) {
              n3 ? t3(n3) : e3(r3);
            });
          });
        }
        return this._fullfilledPromise.then(e2, t2);
      }, Gn.prototype.catch = function(e2) {
        return this.then(void 0, e2);
      }, Gn.prototype.use = function(e2) {
        return e2(this), this;
      }, Gn.prototype.ok = function(e2) {
        if (typeof e2 != "function")
          throw new Error("Callback required");
        return this._okCallback = e2, this;
      }, Gn.prototype._isResponseOK = function(e2) {
        return !!e2 && (this._okCallback ? this._okCallback(e2) : e2.status >= 200 && e2.status < 300);
      }, Gn.prototype.get = function(e2) {
        return this._header[e2.toLowerCase()];
      }, Gn.prototype.getHeader = Gn.prototype.get, Gn.prototype.set = function(e2, t2) {
        if (Dn(e2)) {
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && this.set(n2, e2[n2]);
          return this;
        }
        return this._header[e2.toLowerCase()] = t2, this.header[e2] = t2, this;
      }, Gn.prototype.unset = function(e2) {
        return delete this._header[e2.toLowerCase()], delete this.header[e2], this;
      }, Gn.prototype.field = function(e2, t2) {
        if (e2 == null)
          throw new Error(".field(name, val) name can not be empty");
        if (this._data)
          throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
        if (Dn(e2)) {
          for (var n2 in e2)
            Object.prototype.hasOwnProperty.call(e2, n2) && this.field(n2, e2[n2]);
          return this;
        }
        if (Array.isArray(t2)) {
          for (var r2 in t2)
            Object.prototype.hasOwnProperty.call(t2, r2) && this.field(e2, t2[r2]);
          return this;
        }
        if (t2 == null)
          throw new Error(".field(name, val) val can not be empty");
        return typeof t2 == "boolean" && (t2 = String(t2)), this._getFormData().append(e2, t2), this;
      }, Gn.prototype.abort = function() {
        return this._aborted || (this._aborted = true, this.xhr && this.xhr.abort(), this.req && this.req.abort(), this.clearTimeout(), this.emit("abort")), this;
      }, Gn.prototype._auth = function(e2, t2, n2, r2) {
        switch (n2.type) {
          case "basic":
            this.set("Authorization", "Basic ".concat(r2("".concat(e2, ":").concat(t2))));
            break;
          case "auto":
            this.username = e2, this.password = t2;
            break;
          case "bearer":
            this.set("Authorization", "Bearer ".concat(e2));
        }
        return this;
      }, Gn.prototype.withCredentials = function(e2) {
        return e2 === void 0 && (e2 = true), this._withCredentials = e2, this;
      }, Gn.prototype.redirects = function(e2) {
        return this._maxRedirects = e2, this;
      }, Gn.prototype.maxResponseSize = function(e2) {
        if (typeof e2 != "number")
          throw new TypeError("Invalid argument");
        return this._maxResponseSize = e2, this;
      }, Gn.prototype.toJSON = function() {
        return { method: this.method, url: this.url, data: this._data, headers: this._header };
      }, Gn.prototype.send = function(e2) {
        var t2 = Dn(e2), n2 = this._header["content-type"];
        if (this._formData)
          throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
        if (t2 && !this._data)
          Array.isArray(e2) ? this._data = [] : this._isHost(e2) || (this._data = {});
        else if (e2 && this._data && this._isHost(this._data))
          throw new Error("Can't merge these send calls");
        if (t2 && Dn(this._data))
          for (var r2 in e2)
            Object.prototype.hasOwnProperty.call(e2, r2) && (this._data[r2] = e2[r2]);
        else
          typeof e2 == "string" ? (n2 || this.type("form"), (n2 = this._header["content-type"]) && (n2 = n2.toLowerCase().trim()), this._data = n2 === "application/x-www-form-urlencoded" ? this._data ? "".concat(this._data, "&").concat(e2) : e2 : (this._data || "") + e2) : this._data = e2;
        return !t2 || this._isHost(e2) || n2 || this.type("json"), this;
      }, Gn.prototype.sortQuery = function(e2) {
        return this._sort = e2 === void 0 || e2, this;
      }, Gn.prototype._finalizeQueryString = function() {
        var e2 = this._query.join("&");
        if (e2 && (this.url += (this.url.includes("?") ? "&" : "?") + e2), this._query.length = 0, this._sort) {
          var t2 = this.url.indexOf("?");
          if (t2 >= 0) {
            var n2 = this.url.slice(t2 + 1).split("&");
            typeof this._sort == "function" ? n2.sort(this._sort) : n2.sort(), this.url = this.url.slice(0, t2) + "?" + n2.join("&");
          }
        }
      }, Gn.prototype._appendQueryString = function() {
        console.warn("Unsupported");
      }, Gn.prototype._timeoutError = function(e2, t2, n2) {
        if (!this._aborted) {
          var r2 = new Error("".concat(e2 + t2, "ms exceeded"));
          r2.timeout = t2, r2.code = "ECONNABORTED", r2.errno = n2, this.timedout = true, this.timedoutError = r2, this.abort(), this.callback(r2);
        }
      }, Gn.prototype._setTimeouts = function() {
        var e2 = this;
        this._timeout && !this._timer && (this._timer = setTimeout(function() {
          e2._timeoutError("Timeout of ", e2._timeout, "ETIME");
        }, this._timeout)), this._responseTimeout && !this._responseTimeoutTimer && (this._responseTimeoutTimer = setTimeout(function() {
          e2._timeoutError("Response timeout of ", e2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout));
      };
      var Ln = {};
      function Bn(e2, t2) {
        var n2;
        if (typeof Symbol == "undefined" || e2[Symbol.iterator] == null) {
          if (Array.isArray(e2) || (n2 = function(e3, t3) {
            if (!e3)
              return;
            if (typeof e3 == "string")
              return Hn(e3, t3);
            var n3 = Object.prototype.toString.call(e3).slice(8, -1);
            n3 === "Object" && e3.constructor && (n3 = e3.constructor.name);
            if (n3 === "Map" || n3 === "Set")
              return Array.from(e3);
            if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
              return Hn(e3, t3);
          }(e2)) || t2 && e2 && typeof e2.length == "number") {
            n2 && (e2 = n2);
            var r2 = 0, i2 = function() {
            };
            return { s: i2, n: function() {
              return r2 >= e2.length ? { done: true } : { done: false, value: e2[r2++] };
            }, e: function(e3) {
              throw e3;
            }, f: i2 };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o2, s2 = true, a2 = false;
        return { s: function() {
          n2 = e2[Symbol.iterator]();
        }, n: function() {
          var e3 = n2.next();
          return s2 = e3.done, e3;
        }, e: function(e3) {
          a2 = true, o2 = e3;
        }, f: function() {
          try {
            s2 || n2.return == null || n2.return();
          } finally {
            if (a2)
              throw o2;
          }
        } };
      }
      function Hn(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      Ln.type = function(e2) {
        return e2.split(/ *; */).shift();
      }, Ln.params = function(e2) {
        var t2, n2 = {}, r2 = Bn(e2.split(/ *; */));
        try {
          for (r2.s(); !(t2 = r2.n()).done; ) {
            var i2 = t2.value.split(/ *= */), o2 = i2.shift(), s2 = i2.shift();
            o2 && s2 && (n2[o2] = s2);
          }
        } catch (e3) {
          r2.e(e3);
        } finally {
          r2.f();
        }
        return n2;
      }, Ln.parseLinks = function(e2) {
        var t2, n2 = {}, r2 = Bn(e2.split(/ *, */));
        try {
          for (r2.s(); !(t2 = r2.n()).done; ) {
            var i2 = t2.value.split(/ *; */), o2 = i2[0].slice(1, -1);
            n2[i2[1].split(/ *= */)[1].slice(1, -1)] = o2;
          }
        } catch (e3) {
          r2.e(e3);
        } finally {
          r2.f();
        }
        return n2;
      }, Ln.cleanHeader = function(e2, t2) {
        return delete e2["content-type"], delete e2["content-length"], delete e2["transfer-encoding"], delete e2.host, t2 && (delete e2.authorization, delete e2.cookie), e2;
      };
      var qn = Ln, zn = Vn;
      function Vn(e2) {
        if (e2)
          return function(e3) {
            for (var t2 in Vn.prototype)
              Object.prototype.hasOwnProperty.call(Vn.prototype, t2) && (e3[t2] = Vn.prototype[t2]);
            return e3;
          }(e2);
      }
      function Jn(e2) {
        return function(e3) {
          if (Array.isArray(e3))
            return Wn(e3);
        }(e2) || function(e3) {
          if (typeof Symbol != "undefined" && Symbol.iterator in Object(e3))
            return Array.from(e3);
        }(e2) || function(e3, t2) {
          if (!e3)
            return;
          if (typeof e3 == "string")
            return Wn(e3, t2);
          var n2 = Object.prototype.toString.call(e3).slice(8, -1);
          n2 === "Object" && e3.constructor && (n2 = e3.constructor.name);
          if (n2 === "Map" || n2 === "Set")
            return Array.from(e3);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return Wn(e3, t2);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function Wn(e2, t2) {
        (t2 == null || t2 > e2.length) && (t2 = e2.length);
        for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
          r2[n2] = e2[n2];
        return r2;
      }
      function Xn() {
        this._defaults = [];
      }
      Vn.prototype.get = function(e2) {
        return this.header[e2.toLowerCase()];
      }, Vn.prototype._setHeaderProperties = function(e2) {
        var t2 = e2["content-type"] || "";
        this.type = qn.type(t2);
        var n2 = qn.params(t2);
        for (var r2 in n2)
          Object.prototype.hasOwnProperty.call(n2, r2) && (this[r2] = n2[r2]);
        this.links = {};
        try {
          e2.link && (this.links = qn.parseLinks(e2.link));
        } catch (e3) {
        }
      }, Vn.prototype._setStatusProperties = function(e2) {
        var t2 = e2 / 100 | 0;
        this.statusCode = e2, this.status = this.statusCode, this.statusType = t2, this.info = t2 === 1, this.ok = t2 === 2, this.redirect = t2 === 3, this.clientError = t2 === 4, this.serverError = t2 === 5, this.error = (t2 === 4 || t2 === 5) && this.toError(), this.created = e2 === 201, this.accepted = e2 === 202, this.noContent = e2 === 204, this.badRequest = e2 === 400, this.unauthorized = e2 === 401, this.notAcceptable = e2 === 406, this.forbidden = e2 === 403, this.notFound = e2 === 404, this.unprocessableEntity = e2 === 422;
      }, ["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects", "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert", "disableTLSCerts"].forEach(function(e2) {
        Xn.prototype[e2] = function() {
          for (var t2 = arguments.length, n2 = new Array(t2), r2 = 0; r2 < t2; r2++)
            n2[r2] = arguments[r2];
          return this._defaults.push({ fn: e2, args: n2 }), this;
        };
      }), Xn.prototype._setDefaults = function(e2) {
        this._defaults.forEach(function(t2) {
          e2[t2.fn].apply(e2, Jn(t2.args));
        });
      };
      var $n = Xn;
      !function(e2, t2) {
        function n2(e3) {
          return n2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e4) {
            return typeof e4;
          } : function(e4) {
            return e4 && typeof Symbol == "function" && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
          }, n2(e3);
        }
        var r2;
        typeof window != "undefined" ? r2 = window : typeof self == "undefined" ? (console.warn("Using browser-only version of superagent in non-browser environment"), r2 = void 0) : r2 = self;
        var i2 = Bt.exports, o2 = Ht, s2 = jn, a2 = In, u2 = Un, c2 = zn, l2 = $n;
        function p2() {
        }
        e2.exports = function(e3, n3) {
          return typeof n3 == "function" ? new t2.Request("GET", e3).end(n3) : arguments.length === 1 ? new t2.Request("GET", e3) : new t2.Request(e3, n3);
        };
        var h2 = t2 = e2.exports;
        t2.Request = m2, h2.getXHR = function() {
          if (r2.XMLHttpRequest && (!r2.location || r2.location.protocol !== "file:" || !r2.ActiveXObject))
            return new XMLHttpRequest();
          try {
            return new ActiveXObject("Microsoft.XMLHTTP");
          } catch (e3) {
          }
          try {
            return new ActiveXObject("Msxml2.XMLHTTP.6.0");
          } catch (e3) {
          }
          try {
            return new ActiveXObject("Msxml2.XMLHTTP.3.0");
          } catch (e3) {
          }
          try {
            return new ActiveXObject("Msxml2.XMLHTTP");
          } catch (e3) {
          }
          throw new Error("Browser-only version of superagent could not find XHR");
        };
        var f2 = "".trim ? function(e3) {
          return e3.trim();
        } : function(e3) {
          return e3.replace(/(^\s*|\s*$)/g, "");
        };
        function d2(e3) {
          if (!u2(e3))
            return e3;
          var t3 = [];
          for (var n3 in e3)
            Object.prototype.hasOwnProperty.call(e3, n3) && g2(t3, n3, e3[n3]);
          return t3.join("&");
        }
        function g2(e3, t3, n3) {
          if (n3 !== void 0)
            if (n3 !== null)
              if (Array.isArray(n3))
                n3.forEach(function(n4) {
                  g2(e3, t3, n4);
                });
              else if (u2(n3))
                for (var r3 in n3)
                  Object.prototype.hasOwnProperty.call(n3, r3) && g2(e3, "".concat(t3, "[").concat(r3, "]"), n3[r3]);
              else
                e3.push(encodeURI(t3) + "=" + encodeURIComponent(n3));
            else
              e3.push(encodeURI(t3));
        }
        function y2(e3) {
          for (var t3, n3, r3 = {}, i3 = e3.split("&"), o3 = 0, s3 = i3.length; o3 < s3; ++o3)
            (n3 = (t3 = i3[o3]).indexOf("=")) === -1 ? r3[decodeURIComponent(t3)] = "" : r3[decodeURIComponent(t3.slice(0, n3))] = decodeURIComponent(t3.slice(n3 + 1));
          return r3;
        }
        function b2(e3) {
          return /[/+]json($|[^-\w])/i.test(e3);
        }
        function v2(e3) {
          this.req = e3, this.xhr = this.req.xhr, this.text = this.req.method !== "HEAD" && (this.xhr.responseType === "" || this.xhr.responseType === "text") || this.xhr.responseType === void 0 ? this.xhr.responseText : null, this.statusText = this.req.xhr.statusText;
          var t3 = this.xhr.status;
          t3 === 1223 && (t3 = 204), this._setStatusProperties(t3), this.headers = function(e4) {
            for (var t4, n3, r3, i3, o3 = e4.split(/\r?\n/), s3 = {}, a3 = 0, u3 = o3.length; a3 < u3; ++a3)
              (t4 = (n3 = o3[a3]).indexOf(":")) !== -1 && (r3 = n3.slice(0, t4).toLowerCase(), i3 = f2(n3.slice(t4 + 1)), s3[r3] = i3);
            return s3;
          }(this.xhr.getAllResponseHeaders()), this.header = this.headers, this.header["content-type"] = this.xhr.getResponseHeader("content-type"), this._setHeaderProperties(this.header), this.text === null && e3._responseType ? this.body = this.xhr.response : this.body = this.req.method === "HEAD" ? null : this._parseBody(this.text ? this.text : this.xhr.response);
        }
        function m2(e3, t3) {
          var n3 = this;
          this._query = this._query || [], this.method = e3, this.url = t3, this.header = {}, this._header = {}, this.on("end", function() {
            var e4, t4 = null, r3 = null;
            try {
              r3 = new v2(n3);
            } catch (e5) {
              return (t4 = new Error("Parser is unable to parse the response")).parse = true, t4.original = e5, n3.xhr ? (t4.rawResponse = n3.xhr.responseType === void 0 ? n3.xhr.responseText : n3.xhr.response, t4.status = n3.xhr.status ? n3.xhr.status : null, t4.statusCode = t4.status) : (t4.rawResponse = null, t4.status = null), n3.callback(t4);
            }
            n3.emit("response", r3);
            try {
              n3._isResponseOK(r3) || (e4 = new Error(r3.statusText || r3.text || "Unsuccessful HTTP response"));
            } catch (t5) {
              e4 = t5;
            }
            e4 ? (e4.original = t4, e4.response = r3, e4.status = r3.status, n3.callback(e4, r3)) : n3.callback(null, r3);
          });
        }
        function _2(e3, t3, n3) {
          var r3 = h2("DELETE", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.send(t3), n3 && r3.end(n3), r3;
        }
        h2.serializeObject = d2, h2.parseString = y2, h2.types = { html: "text/html", json: "application/json", xml: "text/xml", urlencoded: "application/x-www-form-urlencoded", form: "application/x-www-form-urlencoded", "form-data": "application/x-www-form-urlencoded" }, h2.serialize = { "application/x-www-form-urlencoded": s2.stringify, "application/json": o2 }, h2.parse = { "application/x-www-form-urlencoded": y2, "application/json": JSON.parse }, c2(v2.prototype), v2.prototype._parseBody = function(e3) {
          var t3 = h2.parse[this.type];
          return this.req._parser ? this.req._parser(this, e3) : (!t3 && b2(this.type) && (t3 = h2.parse["application/json"]), t3 && e3 && (e3.length > 0 || e3 instanceof Object) ? t3(e3) : null);
        }, v2.prototype.toError = function() {
          var e3 = this.req, t3 = e3.method, n3 = e3.url, r3 = "cannot ".concat(t3, " ").concat(n3, " (").concat(this.status, ")"), i3 = new Error(r3);
          return i3.status = this.status, i3.method = t3, i3.url = n3, i3;
        }, h2.Response = v2, i2(m2.prototype), a2(m2.prototype), m2.prototype.type = function(e3) {
          return this.set("Content-Type", h2.types[e3] || e3), this;
        }, m2.prototype.accept = function(e3) {
          return this.set("Accept", h2.types[e3] || e3), this;
        }, m2.prototype.auth = function(e3, t3, r3) {
          arguments.length === 1 && (t3 = ""), n2(t3) === "object" && t3 !== null && (r3 = t3, t3 = ""), r3 || (r3 = { type: typeof btoa == "function" ? "basic" : "auto" });
          var i3 = function(e4) {
            if (typeof btoa == "function")
              return btoa(e4);
            throw new Error("Cannot use basic auth, btoa is not a function");
          };
          return this._auth(e3, t3, r3, i3);
        }, m2.prototype.query = function(e3) {
          return typeof e3 != "string" && (e3 = d2(e3)), e3 && this._query.push(e3), this;
        }, m2.prototype.attach = function(e3, t3, n3) {
          if (t3) {
            if (this._data)
              throw new Error("superagent can't mix .send() and .attach()");
            this._getFormData().append(e3, t3, n3 || t3.name);
          }
          return this;
        }, m2.prototype._getFormData = function() {
          return this._formData || (this._formData = new r2.FormData()), this._formData;
        }, m2.prototype.callback = function(e3, t3) {
          if (this._shouldRetry(e3, t3))
            return this._retry();
          var n3 = this._callback;
          this.clearTimeout(), e3 && (this._maxRetries && (e3.retries = this._retries - 1), this.emit("error", e3)), n3(e3, t3);
        }, m2.prototype.crossDomainError = function() {
          var e3 = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");
          e3.crossDomain = true, e3.status = this.status, e3.method = this.method, e3.url = this.url, this.callback(e3);
        }, m2.prototype.agent = function() {
          return console.warn("This is not supported in browser version of superagent"), this;
        }, m2.prototype.ca = m2.prototype.agent, m2.prototype.buffer = m2.prototype.ca, m2.prototype.write = function() {
          throw new Error("Streaming is not supported in browser version of superagent");
        }, m2.prototype.pipe = m2.prototype.write, m2.prototype._isHost = function(e3) {
          return e3 && n2(e3) === "object" && !Array.isArray(e3) && Object.prototype.toString.call(e3) !== "[object Object]";
        }, m2.prototype.end = function(e3) {
          this._endCalled && console.warn("Warning: .end() was called twice. This is not supported in superagent"), this._endCalled = true, this._callback = e3 || p2, this._finalizeQueryString(), this._end();
        }, m2.prototype._setUploadTimeout = function() {
          var e3 = this;
          this._uploadTimeout && !this._uploadTimeoutTimer && (this._uploadTimeoutTimer = setTimeout(function() {
            e3._timeoutError("Upload timeout of ", e3._uploadTimeout, "ETIMEDOUT");
          }, this._uploadTimeout));
        }, m2.prototype._end = function() {
          if (this._aborted)
            return this.callback(new Error("The request has been aborted even before .end() was called"));
          var e3 = this;
          this.xhr = h2.getXHR();
          var t3 = this.xhr, n3 = this._formData || this._data;
          this._setTimeouts(), t3.onreadystatechange = function() {
            var n4 = t3.readyState;
            if (n4 >= 2 && e3._responseTimeoutTimer && clearTimeout(e3._responseTimeoutTimer), n4 === 4) {
              var r4;
              try {
                r4 = t3.status;
              } catch (e4) {
                r4 = 0;
              }
              if (!r4) {
                if (e3.timedout || e3._aborted)
                  return;
                return e3.crossDomainError();
              }
              e3.emit("end");
            }
          };
          var r3 = function(t4, n4) {
            n4.total > 0 && (n4.percent = n4.loaded / n4.total * 100, n4.percent === 100 && clearTimeout(e3._uploadTimeoutTimer)), n4.direction = t4, e3.emit("progress", n4);
          };
          if (this.hasListeners("progress"))
            try {
              t3.addEventListener("progress", r3.bind(null, "download")), t3.upload && t3.upload.addEventListener("progress", r3.bind(null, "upload"));
            } catch (e4) {
            }
          t3.upload && this._setUploadTimeout();
          try {
            this.username && this.password ? t3.open(this.method, this.url, true, this.username, this.password) : t3.open(this.method, this.url, true);
          } catch (e4) {
            return this.callback(e4);
          }
          if (this._withCredentials && (t3.withCredentials = true), !this._formData && this.method !== "GET" && this.method !== "HEAD" && typeof n3 != "string" && !this._isHost(n3)) {
            var i3 = this._header["content-type"], o3 = this._serializer || h2.serialize[i3 ? i3.split(";")[0] : ""];
            !o3 && b2(i3) && (o3 = h2.serialize["application/json"]), o3 && (n3 = o3(n3));
          }
          for (var s3 in this.header)
            this.header[s3] !== null && Object.prototype.hasOwnProperty.call(this.header, s3) && t3.setRequestHeader(s3, this.header[s3]);
          this._responseType && (t3.responseType = this._responseType), this.emit("request", this), t3.send(n3 === void 0 ? null : n3);
        }, h2.agent = function() {
          return new l2();
        }, ["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function(e3) {
          l2.prototype[e3.toLowerCase()] = function(t3, n3) {
            var r3 = new h2.Request(e3, t3);
            return this._setDefaults(r3), n3 && r3.end(n3), r3;
          };
        }), l2.prototype.del = l2.prototype.delete, h2.get = function(e3, t3, n3) {
          var r3 = h2("GET", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.query(t3), n3 && r3.end(n3), r3;
        }, h2.head = function(e3, t3, n3) {
          var r3 = h2("HEAD", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.query(t3), n3 && r3.end(n3), r3;
        }, h2.options = function(e3, t3, n3) {
          var r3 = h2("OPTIONS", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.send(t3), n3 && r3.end(n3), r3;
        }, h2.del = _2, h2.delete = _2, h2.patch = function(e3, t3, n3) {
          var r3 = h2("PATCH", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.send(t3), n3 && r3.end(n3), r3;
        }, h2.post = function(e3, t3, n3) {
          var r3 = h2("POST", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.send(t3), n3 && r3.end(n3), r3;
        }, h2.put = function(e3, t3, n3) {
          var r3 = h2("PUT", e3);
          return typeof t3 == "function" && (n3 = t3, t3 = null), t3 && r3.send(t3), n3 && r3.end(n3), r3;
        };
      }(Lt, Lt.exports);
      var Qn = Lt.exports;
      function Yn(e2) {
        var t2 = new Date().getTime(), n2 = new Date().toISOString(), r2 = console && console.log ? console : window && window.console && window.console.log ? window.console : console;
        r2.log("<<<<<"), r2.log("[".concat(n2, "]"), "\n", e2.url, "\n", e2.qs), r2.log("-----"), e2.on("response", function(n3) {
          var i2 = new Date().getTime() - t2, o2 = new Date().toISOString();
          r2.log(">>>>>>"), r2.log("[".concat(o2, " / ").concat(i2, "]"), "\n", e2.url, "\n", e2.qs, "\n", n3.text), r2.log("-----");
        });
      }
      function Zn(e2, t2, n2) {
        var r2 = this;
        this._config.logVerbosity && (e2 = e2.use(Yn)), this._config.proxy && this._modules.proxy && (e2 = this._modules.proxy.call(this, e2)), this._config.keepAlive && this._modules.keepAlive && (e2 = this._modules.keepAlive(e2));
        var i2 = e2;
        if (t2.abortSignal)
          var o2 = t2.abortSignal.subscribe(function() {
            i2.abort(), o2();
          });
        return t2.forceBuffered === true ? i2 = typeof Blob == "undefined" ? i2.buffer().responseType("arraybuffer") : i2.responseType("arraybuffer") : t2.forceBuffered === false && (i2 = i2.buffer(false)), (i2 = i2.timeout(t2.timeout)).on("abort", function() {
          return n2({ category: A.PNUnknownCategory, error: true, operation: t2.operation, errorData: new Error("Aborted") }, null);
        }), i2.end(function(e3, i3) {
          var o3, s2 = {};
          if (s2.error = e3 !== null, s2.operation = t2.operation, i3 && i3.status && (s2.statusCode = i3.status), e3) {
            if (e3.response && e3.response.text && !r2._config.logVerbosity)
              try {
                s2.errorData = JSON.parse(e3.response.text);
              } catch (t3) {
                s2.errorData = e3;
              }
            else
              s2.errorData = e3;
            return s2.category = r2._detectErrorCategory(e3), n2(s2, null);
          }
          if (t2.ignoreBody)
            o3 = { headers: i3.headers, redirects: i3.redirects, response: i3 };
          else
            try {
              o3 = JSON.parse(i3.text);
            } catch (e4) {
              return s2.errorData = i3, s2.error = true, n2(s2, null);
            }
          return o3.error && o3.error === 1 && o3.status && o3.message && o3.service ? (s2.errorData = o3, s2.statusCode = o3.status, s2.error = true, s2.category = r2._detectErrorCategory(s2), n2(s2, null)) : (o3.error && o3.error.message && (s2.errorData = o3.error), n2(s2, o3));
        }), i2;
      }
      function er(e2, t2, n2) {
        return i(this, void 0, void 0, function() {
          var r2;
          return o(this, function(i2) {
            switch (i2.label) {
              case 0:
                return r2 = Qn.post(e2), t2.forEach(function(e3) {
                  var t3 = e3.key, n3 = e3.value;
                  r2 = r2.field(t3, n3);
                }), r2.attach("file", n2, { contentType: "application/octet-stream" }), [4, r2];
              case 1:
                return [2, i2.sent()];
            }
          });
        });
      }
      function tr(e2, t2, n2) {
        var r2 = Qn.get(this.getStandardOrigin() + t2.url).set(t2.headers).query(e2);
        return Zn.call(this, r2, t2, n2);
      }
      function nr(e2, t2, n2) {
        var r2 = Qn.get(this.getStandardOrigin() + t2.url).set(t2.headers).query(e2);
        return Zn.call(this, r2, t2, n2);
      }
      function rr(e2, t2, n2, r2) {
        var i2 = Qn.post(this.getStandardOrigin() + n2.url).query(e2).set(n2.headers).send(t2);
        return Zn.call(this, i2, n2, r2);
      }
      function ir(e2, t2, n2, r2) {
        var i2 = Qn.patch(this.getStandardOrigin() + n2.url).query(e2).set(n2.headers).send(t2);
        return Zn.call(this, i2, n2, r2);
      }
      function or(e2, t2, n2) {
        var r2 = Qn.delete(this.getStandardOrigin() + t2.url).set(t2.headers).query(e2);
        return Zn.call(this, r2, t2, n2);
      }
      function sr(e2, t2) {
        var n2 = new Uint8Array(e2.byteLength + t2.byteLength);
        return n2.set(new Uint8Array(e2), 0), n2.set(new Uint8Array(t2), e2.byteLength), n2.buffer;
      }
      var ar, ur = function() {
        function e2() {
        }
        return Object.defineProperty(e2.prototype, "algo", { get: function() {
          return "aes-256-cbc";
        }, enumerable: false, configurable: true }), e2.prototype.encrypt = function(e3, t2) {
          return i(this, void 0, void 0, function() {
            var n2;
            return o(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return [4, this.getKey(e3)];
                case 1:
                  if (n2 = r2.sent(), t2 instanceof ArrayBuffer)
                    return [2, this.encryptArrayBuffer(n2, t2)];
                  if (typeof t2 == "string")
                    return [2, this.encryptString(n2, t2)];
                  throw new Error("Cannot encrypt this file. In browsers file encryption supports only string or ArrayBuffer");
              }
            });
          });
        }, e2.prototype.decrypt = function(e3, t2) {
          return i(this, void 0, void 0, function() {
            var n2;
            return o(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return [4, this.getKey(e3)];
                case 1:
                  if (n2 = r2.sent(), t2 instanceof ArrayBuffer)
                    return [2, this.decryptArrayBuffer(n2, t2)];
                  if (typeof t2 == "string")
                    return [2, this.decryptString(n2, t2)];
                  throw new Error("Cannot decrypt this file. In browsers file decryption supports only string or ArrayBuffer");
              }
            });
          });
        }, e2.prototype.encryptFile = function(e3, t2, n2) {
          return i(this, void 0, void 0, function() {
            var r2, i2, s2;
            return o(this, function(o2) {
              switch (o2.label) {
                case 0:
                  return [4, this.getKey(e3)];
                case 1:
                  return r2 = o2.sent(), [4, t2.toArrayBuffer()];
                case 2:
                  return i2 = o2.sent(), [4, this.encryptArrayBuffer(r2, i2)];
                case 3:
                  return s2 = o2.sent(), [2, n2.create({ name: t2.name, mimeType: "application/octet-stream", data: s2 })];
              }
            });
          });
        }, e2.prototype.decryptFile = function(e3, t2, n2) {
          return i(this, void 0, void 0, function() {
            var r2, i2, s2;
            return o(this, function(o2) {
              switch (o2.label) {
                case 0:
                  return [4, this.getKey(e3)];
                case 1:
                  return r2 = o2.sent(), [4, t2.toArrayBuffer()];
                case 2:
                  return i2 = o2.sent(), [4, this.decryptArrayBuffer(r2, i2)];
                case 3:
                  return s2 = o2.sent(), [2, n2.create({ name: t2.name, data: s2 })];
              }
            });
          });
        }, e2.prototype.getKey = function(e3) {
          return i(this, void 0, void 0, function() {
            var t2, n2, r2;
            return o(this, function(i2) {
              switch (i2.label) {
                case 0:
                  return t2 = Buffer.from(e3), [4, crypto.subtle.digest("SHA-256", t2.buffer)];
                case 1:
                  return n2 = i2.sent(), r2 = Buffer.from(Buffer.from(n2).toString("hex").slice(0, 32), "utf8").buffer, [2, crypto.subtle.importKey("raw", r2, "AES-CBC", true, ["encrypt", "decrypt"])];
              }
            });
          });
        }, e2.prototype.encryptArrayBuffer = function(e3, t2) {
          return i(this, void 0, void 0, function() {
            var n2, r2, i2;
            return o(this, function(o2) {
              switch (o2.label) {
                case 0:
                  return n2 = crypto.getRandomValues(new Uint8Array(16)), r2 = sr, i2 = [n2.buffer], [4, crypto.subtle.encrypt({ name: "AES-CBC", iv: n2 }, e3, t2)];
                case 1:
                  return [2, r2.apply(void 0, i2.concat([o2.sent()]))];
              }
            });
          });
        }, e2.prototype.decryptArrayBuffer = function(e3, t2) {
          return i(this, void 0, void 0, function() {
            var n2;
            return o(this, function(r2) {
              return n2 = t2.slice(0, 16), [2, crypto.subtle.decrypt({ name: "AES-CBC", iv: n2 }, e3, t2.slice(16))];
            });
          });
        }, e2.prototype.encryptString = function(e3, t2) {
          return i(this, void 0, void 0, function() {
            var n2, r2, i2, s2;
            return o(this, function(o2) {
              switch (o2.label) {
                case 0:
                  return n2 = crypto.getRandomValues(new Uint8Array(16)), r2 = Buffer.from(t2).buffer, [4, crypto.subtle.encrypt({ name: "AES-CBC", iv: n2 }, e3, r2)];
                case 1:
                  return i2 = o2.sent(), s2 = sr(n2.buffer, i2), [2, Buffer.from(s2).toString("utf8")];
              }
            });
          });
        }, e2.prototype.decryptString = function(e3, t2) {
          return i(this, void 0, void 0, function() {
            var n2, r2, i2, s2;
            return o(this, function(o2) {
              switch (o2.label) {
                case 0:
                  return n2 = Buffer.from(t2), r2 = n2.slice(0, 16), i2 = n2.slice(16), [4, crypto.subtle.decrypt({ name: "AES-CBC", iv: r2 }, e3, i2)];
                case 1:
                  return s2 = o2.sent(), [2, Buffer.from(s2).toString("utf8")];
              }
            });
          });
        }, e2.IV_LENGTH = 16, e2;
      }(), cr = (ar = function() {
        function e2(e3) {
          if (e3 instanceof File)
            this.data = e3, this.name = this.data.name, this.mimeType = this.data.type;
          else if (e3.data) {
            var t2 = e3.data;
            this.data = new File([t2], e3.name, { type: e3.mimeType }), this.name = e3.name, e3.mimeType && (this.mimeType = e3.mimeType);
          }
          if (this.data === void 0)
            throw new Error("Couldn't construct a file out of supplied options.");
          if (this.name === void 0)
            throw new Error("Couldn't guess filename out of the options. Please provide one.");
        }
        return e2.create = function(e3) {
          return new this(e3);
        }, e2.prototype.toBuffer = function() {
          return i(this, void 0, void 0, function() {
            return o(this, function(e3) {
              throw new Error("This feature is only supported in Node.js environments.");
            });
          });
        }, e2.prototype.toStream = function() {
          return i(this, void 0, void 0, function() {
            return o(this, function(e3) {
              throw new Error("This feature is only supported in Node.js environments.");
            });
          });
        }, e2.prototype.toFileUri = function() {
          return i(this, void 0, void 0, function() {
            return o(this, function(e3) {
              throw new Error("This feature is only supported in react native environments.");
            });
          });
        }, e2.prototype.toBlob = function() {
          return i(this, void 0, void 0, function() {
            return o(this, function(e3) {
              return [2, this.data];
            });
          });
        }, e2.prototype.toArrayBuffer = function() {
          return i(this, void 0, void 0, function() {
            var e3 = this;
            return o(this, function(t2) {
              return [2, new Promise(function(t3, n2) {
                var r2 = new FileReader();
                r2.addEventListener("load", function() {
                  if (r2.result instanceof ArrayBuffer)
                    return t3(r2.result);
                }), r2.addEventListener("error", function() {
                  n2(r2.error);
                }), r2.readAsArrayBuffer(e3.data);
              })];
            });
          });
        }, e2.prototype.toString = function() {
          return i(this, void 0, void 0, function() {
            var e3 = this;
            return o(this, function(t2) {
              return [2, new Promise(function(t3, n2) {
                var r2 = new FileReader();
                r2.addEventListener("load", function() {
                  if (typeof r2.result == "string")
                    return t3(r2.result);
                }), r2.addEventListener("error", function() {
                  n2(r2.error);
                }), r2.readAsBinaryString(e3.data);
              })];
            });
          });
        }, e2.prototype.toFile = function() {
          return i(this, void 0, void 0, function() {
            return o(this, function(e3) {
              return [2, this.data];
            });
          });
        }, e2;
      }(), ar.supportsFile = typeof File != "undefined", ar.supportsBlob = typeof Blob != "undefined", ar.supportsArrayBuffer = typeof ArrayBuffer != "undefined", ar.supportsBuffer = false, ar.supportsStream = false, ar.supportsString = true, ar.supportsEncryptFile = true, ar.supportsFileUri = false, ar);
      function lr(e2) {
        if (!navigator || !navigator.sendBeacon)
          return false;
        navigator.sendBeacon(e2);
      }
      function pr(e2) {
        for (var t2 = P.enc.Base64.parse(e2).words, n2 = new ArrayBuffer(4 * t2.length), r2 = new Uint8Array(n2), i2 = 0, o2 = 0, s2 = 0; s2 < t2.length; s2 += 1) {
          var a2 = t2[s2];
          r2[o2 = 4 * s2] = (4278190080 & a2) >> 24, r2[o2 + 1] = (16711680 & a2) >> 16, r2[o2 + 2] = (65280 & a2) >> 8, r2[o2 + 3] = 255 & a2;
        }
        for (var u2 = o2 + 3; u2 >= o2; u2 -= 1)
          r2[u2] === 0 && i2 < 3 && (i2 += 1);
        return i2 > 0 ? r2.buffer.slice(0, r2.byteLength - i2) : r2.buffer;
      }
      function hr(e2) {
        var t2 = function(e3) {
          return e3 && typeof e3 == "object" && e3.constructor === Object;
        };
        if (!t2(e2))
          return e2;
        var n2 = {};
        return Object.keys(e2).forEach(function(r2) {
          var i2 = function(e3) {
            return typeof e3 == "string" || e3 instanceof String;
          }(r2), o2 = r2, s2 = e2[r2];
          Array.isArray(r2) || i2 && r2.indexOf(",") >= 0 ? o2 = (i2 ? r2.split(",") : r2).reduce(function(e3, t3) {
            return e3 += String.fromCharCode(t3);
          }, "") : (function(e3) {
            return typeof e3 == "number" && isFinite(e3);
          }(r2) || i2 && !isNaN(r2)) && (o2 = String.fromCharCode(i2 ? parseInt(r2, 10) : 10));
          n2[o2] = t2(s2) ? hr(s2) : s2;
        }), n2;
      }
      var fr = function(e2) {
        function n2(t2) {
          var n3 = this, r2 = t2.listenToBrowserNetworkEvents, i2 = r2 === void 0 || r2;
          return t2.sdkFamily = "Web", t2.networking = new Kt({ del: or, get: nr, post: rr, patch: ir, sendBeacon: lr, getfile: tr, postfile: er }), t2.cbor = new Ft(function(e3) {
            return hr(p.decode(e3));
          }, pr), t2.PubNubFile = cr, t2.cryptography = new ur(), n3 = e2.call(this, t2) || this, i2 && (window.addEventListener("offline", function() {
            n3.networkDownDetected();
          }), window.addEventListener("online", function() {
            n3.networkUpDetected();
          })), n3;
        }
        return t(n2, e2), n2;
      }(Gt);
      return fr;
    });
  }
});

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var PubNub = require_pubnub_min();
var pubNub = new PubNub({
  publishKey: "pub-c-7261f184-c21c-452f-96c8-2e1c9009f393",
  subscribeKey: "sub-c-9c19f004-c791-43b5-83f8-1e8c6f31f60d",
  uuid: ""
});
var DEFAULT_SETTINGS = {
  syncKey: ""
};
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "upload-vault",
        name: "Upload vault to other devices",
        callback: () => uploadVault(this.settings.syncKey)
      });
      this.addCommand({
        id: "copy-sync-key",
        name: "Copy sync key",
        callback: () => copySyncKey()
      });
      this.addCommand({
        id: "generate-sync-key-qr-code",
        name: "Generate sync key QR Code",
        callback: () => null
      });
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.registerDomEvent(document, "click", (evt) => {
        console.log("click", evt);
      });
      this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Sync Settings" });
    let keySetting = new import_obsidian.Setting(containerEl).setName("Sync Key").setDesc("Use this key to sync between devices with the matching key.").addButton((button) => button.setButtonText("Generate Key").onClick((evt) => __async(this, null, function* () {
      this.plugin.settings.syncKey = uuidv4();
      new import_obsidian.Notice("Generated sync key!");
      yield this.plugin.saveSettings();
    }))).addButton((button) => button.setButtonText("Copy").onClick((evt) => copySyncKey())).addButton((button) => button.setButtonText("QR Code [WIP]").onClick((evt) => null)).addButton((button) => button.setButtonText("Paste Key").onClick((evt) => __async(this, null, function* () {
      return this.plugin.settings.syncKey = yield navigator.clipboard.readText();
    })));
  }
};
function uploadVault(syncKey) {
  pubNub.uuid = syncKey;
}
function copySyncKey() {
  navigator.clipboard.writeText(this.plugin.settings.syncKey).then((_) => null);
  new import_obsidian.Notice(this.plugin.settings.syncKey !== null ? "Copied sync key!" : "No sync key to copy!");
}
function uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
}
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
/*! lil-uuid - v0.1 - MIT License - https://github.com/lil-js/uuid */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3B1Ym51Yi9kaXN0L3dlYi9wdWJudWIubWluLmpzIiwgIm1haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZikuUHViTnViPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtcbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG4gICAgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuICAgIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbiAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuICAgIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcbiAgICBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovdmFyIGU9ZnVuY3Rpb24odCxuKXtyZXR1cm4gZT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxuKSYmKGVbbl09dFtuXSl9LGUodCxuKX07ZnVuY3Rpb24gdCh0LG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPXR9ZSh0LG4pLHQucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX12YXIgbj1mdW5jdGlvbigpe3JldHVybiBuPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBpIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGkpJiYoZVtpXT10W2ldKTtyZXR1cm4gZX0sbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2Z1bmN0aW9uIHIoZSx0KXt2YXIgbj17fTtmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmdC5pbmRleE9mKHIpPDAmJihuW3JdPWVbcl0pO2lmKG51bGwhPWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBpPTA7Zm9yKHI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtpPHIubGVuZ3RoO2krKyl0LmluZGV4T2YocltpXSk8MCYmT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUscltpXSkmJihuW3JbaV1dPWVbcltpXV0pfXJldHVybiBufWZ1bmN0aW9uIGkoZSx0LG4scil7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKGksbyl7ZnVuY3Rpb24gcyhlKXt0cnl7dShyLm5leHQoZSkpfWNhdGNoKGUpe28oZSl9fWZ1bmN0aW9uIGEoZSl7dHJ5e3Uoci50aHJvdyhlKSl9Y2F0Y2goZSl7byhlKX19ZnVuY3Rpb24gdShlKXt2YXIgdDtlLmRvbmU/aShlLnZhbHVlKToodD1lLnZhbHVlLHQgaW5zdGFuY2VvZiBuP3Q6bmV3IG4oKGZ1bmN0aW9uKGUpe2UodCl9KSkpLnRoZW4ocyxhKX11KChyPXIuYXBwbHkoZSx0fHxbXSkpLm5leHQoKSl9KSl9ZnVuY3Rpb24gbyhlLHQpe3ZhciBuLHIsaSxvLHM9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmaVswXSl0aHJvdyBpWzFdO3JldHVybiBpWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIG89e25leHQ6YSgwKSx0aHJvdzphKDEpLHJldHVybjphKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihvW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG87ZnVuY3Rpb24gYShvKXtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtzOyl0cnl7aWYobj0xLHImJihpPTImb1swXT9yLnJldHVybjpvWzBdP3IudGhyb3d8fCgoaT1yLnJldHVybikmJmkuY2FsbChyKSwwKTpyLm5leHQpJiYhKGk9aS5jYWxsKHIsb1sxXSkpLmRvbmUpcmV0dXJuIGk7c3dpdGNoKHI9MCxpJiYobz1bMiZvWzBdLGkudmFsdWVdKSxvWzBdKXtjYXNlIDA6Y2FzZSAxOmk9bzticmVhaztjYXNlIDQ6cmV0dXJuIHMubGFiZWwrKyx7dmFsdWU6b1sxXSxkb25lOiExfTtjYXNlIDU6cy5sYWJlbCsrLHI9b1sxXSxvPVswXTtjb250aW51ZTtjYXNlIDc6bz1zLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGk9cy50cnlzLChpPWkubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pfHw2IT09b1swXSYmMiE9PW9bMF0pKXtzPTA7Y29udGludWV9aWYoMz09PW9bMF0mJighaXx8b1sxXT5pWzBdJiZvWzFdPGlbM10pKXtzLmxhYmVsPW9bMV07YnJlYWt9aWYoNj09PW9bMF0mJnMubGFiZWw8aVsxXSl7cy5sYWJlbD1pWzFdLGk9bzticmVha31pZihpJiZzLmxhYmVsPGlbMl0pe3MubGFiZWw9aVsyXSxzLm9wcy5wdXNoKG8pO2JyZWFrfWlbMl0mJnMub3BzLnBvcCgpLHMudHJ5cy5wb3AoKTtjb250aW51ZX1vPXQuY2FsbChlLHMpfWNhdGNoKGUpe289WzYsZV0scj0wfWZpbmFsbHl7bj1pPTB9aWYoNSZvWzBdKXRocm93IG9bMV07cmV0dXJue3ZhbHVlOm9bMF0/b1sxXTp2b2lkIDAsZG9uZTohMH19KFtvLGFdKX19fWZ1bmN0aW9uIHMoZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Isbj10JiZlW3RdLHI9MDtpZihuKXJldHVybiBuLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJnI+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW3IrK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX1mdW5jdGlvbiBhKGUsdCl7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIW4pcmV0dXJuIGU7dmFyIHIsaSxvPW4uY2FsbChlKSxzPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKHI9by5uZXh0KCkpLmRvbmU7KXMucHVzaChyLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtyJiYhci5kb25lJiYobj1vLnJldHVybikmJm4uY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIHN9ZnVuY3Rpb24gdShlLHQsbil7aWYobnx8Mj09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKHZhciByLGk9MCxvPXQubGVuZ3RoO2k8bztpKyspIXImJmkgaW4gdHx8KHJ8fChyPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQsMCxpKSkscltpXT10W2ldKTtyZXR1cm4gZS5jb25jYXQocnx8QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCkpfXZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp7fSxsPXtleHBvcnRzOnt9fTshZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHQsbil7dmFyIHI9TWF0aC5wb3coMiwtMjQpLGk9TWF0aC5wb3coMiwzMiksbz1NYXRoLnBvdygyLDUzKTt2YXIgcz17ZW5jb2RlOmZ1bmN0aW9uKGUpe3ZhciB0LHI9bmV3IEFycmF5QnVmZmVyKDI1Nikscz1uZXcgRGF0YVZpZXcociksYT0wO2Z1bmN0aW9uIHUoZSl7Zm9yKHZhciBuPXIuYnl0ZUxlbmd0aCxpPWErZTtuPGk7KW4qPTI7aWYobiE9PXIuYnl0ZUxlbmd0aCl7dmFyIG89cztyPW5ldyBBcnJheUJ1ZmZlcihuKSxzPW5ldyBEYXRhVmlldyhyKTtmb3IodmFyIHU9YSszPj4yLGM9MDtjPHU7KytjKXMuc2V0VWludDMyKDQqYyxvLmdldFVpbnQzMig0KmMpKX1yZXR1cm4gdD1lLHN9ZnVuY3Rpb24gYygpe2ErPXR9ZnVuY3Rpb24gbChlKXtjKHUoMSkuc2V0VWludDgoYSxlKSl9ZnVuY3Rpb24gcChlKXtmb3IodmFyIHQ9dShlLmxlbmd0aCksbj0wO248ZS5sZW5ndGg7KytuKXQuc2V0VWludDgoYStuLGVbbl0pO2MoKX1mdW5jdGlvbiBoKGUsdCl7dDwyND9sKGU8PDV8dCk6dDwyNTY/KGwoZTw8NXwyNCksbCh0KSk6dDw2NTUzNj8obChlPDw1fDI1KSxmdW5jdGlvbihlKXtjKHUoMikuc2V0VWludDE2KGEsZSkpfSh0KSk6dDw0Mjk0OTY3Mjk2PyhsKGU8PDV8MjYpLGZ1bmN0aW9uKGUpe2ModSg0KS5zZXRVaW50MzIoYSxlKSl9KHQpKToobChlPDw1fDI3KSxmdW5jdGlvbihlKXt2YXIgdD1lJWksbj0oZS10KS9pLHI9dSg4KTtyLnNldFVpbnQzMihhLG4pLHIuc2V0VWludDMyKGErNCx0KSxjKCl9KHQpKX1pZihmdW5jdGlvbiBlKHQpe3ZhciByO2lmKCExPT09dClyZXR1cm4gbCgyNDQpO2lmKCEwPT09dClyZXR1cm4gbCgyNDUpO2lmKG51bGw9PT10KXJldHVybiBsKDI0Nik7aWYodD09PW4pcmV0dXJuIGwoMjQ3KTtzd2l0Y2godHlwZW9mIHQpe2Nhc2VcIm51bWJlclwiOmlmKE1hdGguZmxvb3IodCk9PT10KXtpZigwPD10JiZ0PD1vKXJldHVybiBoKDAsdCk7aWYoLW88PXQmJnQ8MClyZXR1cm4gaCgxLC0odCsxKSl9cmV0dXJuIGwoMjUxKSxmdW5jdGlvbihlKXtjKHUoOCkuc2V0RmxvYXQ2NChhLGUpKX0odCk7Y2FzZVwic3RyaW5nXCI6dmFyIGk9W107Zm9yKHI9MDtyPHQubGVuZ3RoOysrcil7dmFyIHM9dC5jaGFyQ29kZUF0KHIpO3M8MTI4P2kucHVzaChzKTpzPDIwNDg/KGkucHVzaCgxOTJ8cz4+NiksaS5wdXNoKDEyOHw2MyZzKSk6czw1NTI5Nj8oaS5wdXNoKDIyNHxzPj4xMiksaS5wdXNoKDEyOHxzPj42JjYzKSxpLnB1c2goMTI4fDYzJnMpKToocz0oMTAyMyZzKTw8MTAsc3w9MTAyMyZ0LmNoYXJDb2RlQXQoKytyKSxzKz02NTUzNixpLnB1c2goMjQwfHM+PjE4KSxpLnB1c2goMTI4fHM+PjEyJjYzKSxpLnB1c2goMTI4fHM+PjYmNjMpLGkucHVzaCgxMjh8NjMmcykpfXJldHVybiBoKDMsaS5sZW5ndGgpLHAoaSk7ZGVmYXVsdDp2YXIgZjtpZihBcnJheS5pc0FycmF5KHQpKWZvcihoKDQsZj10Lmxlbmd0aCkscj0wO3I8ZjsrK3IpZSh0W3JdKTtlbHNlIGlmKHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KWgoMix0Lmxlbmd0aCkscCh0KTtlbHNle3ZhciBkPU9iamVjdC5rZXlzKHQpO2ZvcihoKDUsZj1kLmxlbmd0aCkscj0wO3I8ZjsrK3Ipe3ZhciBnPWRbcl07ZShnKSxlKHRbZ10pfX19fShlKSxcInNsaWNlXCJpbiByKXJldHVybiByLnNsaWNlKDAsYSk7Zm9yKHZhciBmPW5ldyBBcnJheUJ1ZmZlcihhKSxkPW5ldyBEYXRhVmlldyhmKSxnPTA7ZzxhOysrZylkLnNldFVpbnQ4KGcscy5nZXRVaW50OChnKSk7cmV0dXJuIGZ9LGRlY29kZTpmdW5jdGlvbihlLHQsbyl7dmFyIHM9bmV3IERhdGFWaWV3KGUpLGE9MDtmdW5jdGlvbiB1KGUsdCl7cmV0dXJuIGErPXQsZX1mdW5jdGlvbiBjKHQpe3JldHVybiB1KG5ldyBVaW50OEFycmF5KGUsYSx0KSx0KX1mdW5jdGlvbiBsKCl7cmV0dXJuIHUocy5nZXRVaW50OChhKSwxKX1mdW5jdGlvbiBwKCl7cmV0dXJuIHUocy5nZXRVaW50MTYoYSksMil9ZnVuY3Rpb24gaCgpe3JldHVybiB1KHMuZ2V0VWludDMyKGEpLDQpfWZ1bmN0aW9uIGYoKXtyZXR1cm4gMjU1PT09cy5nZXRVaW50OChhKSYmKGErPTEsITApfWZ1bmN0aW9uIGQoZSl7aWYoZTwyNClyZXR1cm4gZTtpZigyND09PWUpcmV0dXJuIGwoKTtpZigyNT09PWUpcmV0dXJuIHAoKTtpZigyNj09PWUpcmV0dXJuIGgoKTtpZigyNz09PWUpcmV0dXJuIGgoKSppK2goKTtpZigzMT09PWUpcmV0dXJuLTE7dGhyb3dcIkludmFsaWQgbGVuZ3RoIGVuY29kaW5nXCJ9ZnVuY3Rpb24gZyhlKXt2YXIgdD1sKCk7aWYoMjU1PT09dClyZXR1cm4tMTt2YXIgbj1kKDMxJnQpO2lmKG48MHx8dD4+NSE9PWUpdGhyb3dcIkludmFsaWQgaW5kZWZpbml0ZSBsZW5ndGggZWxlbWVudFwiO3JldHVybiBufWZ1bmN0aW9uIHkoZSx0KXtmb3IodmFyIG49MDtuPHQ7KytuKXt2YXIgcj1sKCk7MTI4JnImJihyPDIyND8ocj0oMzEmcik8PDZ8NjMmbCgpLHQtPTEpOnI8MjQwPyhyPSgxNSZyKTw8MTJ8KDYzJmwoKSk8PDZ8NjMmbCgpLHQtPTIpOihyPSgxNSZyKTw8MTh8KDYzJmwoKSk8PDEyfCg2MyZsKCkpPDw2fDYzJmwoKSx0LT0zKSkscjw2NTUzNj9lLnB1c2gocik6KHItPTY1NTM2LGUucHVzaCg1NTI5NnxyPj4xMCksZS5wdXNoKDU2MzIwfDEwMjMmcikpfX1cImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiYodD1mdW5jdGlvbihlKXtyZXR1cm4gZX0pLFwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJihvPWZ1bmN0aW9uKCl7cmV0dXJuIG59KTt2YXIgYj1mdW5jdGlvbiBlKCl7dmFyIGksaCxiPWwoKSx2PWI+PjUsbT0zMSZiO2lmKDc9PT12KXN3aXRjaChtKXtjYXNlIDI1OnJldHVybiBmdW5jdGlvbigpe3ZhciBlPW5ldyBBcnJheUJ1ZmZlcig0KSx0PW5ldyBEYXRhVmlldyhlKSxuPXAoKSxpPTMyNzY4Jm4sbz0zMTc0NCZuLHM9MTAyMyZuO2lmKDMxNzQ0PT09bylvPTI2MTEyMDtlbHNlIGlmKDAhPT1vKW8rPTExNDY4ODtlbHNlIGlmKDAhPT1zKXJldHVybiBzKnI7cmV0dXJuIHQuc2V0VWludDMyKDAsaTw8MTZ8bzw8MTN8czw8MTMpLHQuZ2V0RmxvYXQzMigwKX0oKTtjYXNlIDI2OnJldHVybiB1KHMuZ2V0RmxvYXQzMihhKSw0KTtjYXNlIDI3OnJldHVybiB1KHMuZ2V0RmxvYXQ2NChhKSw4KX1pZigoaD1kKG0pKTwwJiYodjwyfHw2PHYpKXRocm93XCJJbnZhbGlkIGxlbmd0aFwiO3N3aXRjaCh2KXtjYXNlIDA6cmV0dXJuIGg7Y2FzZSAxOnJldHVybi0xLWg7Y2FzZSAyOmlmKGg8MCl7Zm9yKHZhciBfPVtdLE89MDsoaD1nKHYpKT49MDspTys9aCxfLnB1c2goYyhoKSk7dmFyIFA9bmV3IFVpbnQ4QXJyYXkoTyksUz0wO2ZvcihpPTA7aTxfLmxlbmd0aDsrK2kpUC5zZXQoX1tpXSxTKSxTKz1fW2ldLmxlbmd0aDtyZXR1cm4gUH1yZXR1cm4gYyhoKTtjYXNlIDM6dmFyIHc9W107aWYoaDwwKWZvcig7KGg9Zyh2KSk+PTA7KXkodyxoKTtlbHNlIHkodyxoKTtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHcpO2Nhc2UgNDp2YXIgVDtpZihoPDApZm9yKFQ9W107IWYoKTspVC5wdXNoKGUoKSk7ZWxzZSBmb3IoVD1uZXcgQXJyYXkoaCksaT0wO2k8aDsrK2kpVFtpXT1lKCk7cmV0dXJuIFQ7Y2FzZSA1OnZhciBrPXt9O2ZvcihpPTA7aTxofHxoPDAmJiFmKCk7KytpKXtrW2UoKV09ZSgpfXJldHVybiBrO2Nhc2UgNjpyZXR1cm4gdChlKCksaCk7Y2FzZSA3OnN3aXRjaChoKXtjYXNlIDIwOnJldHVybiExO2Nhc2UgMjE6cmV0dXJuITA7Y2FzZSAyMjpyZXR1cm4gbnVsbDtjYXNlIDIzOnJldHVybiBuO2RlZmF1bHQ6cmV0dXJuIG8oaCl9fX0oKTtpZihhIT09ZS5ieXRlTGVuZ3RoKXRocm93XCJSZW1haW5pbmcgYnl0ZXNcIjtyZXR1cm4gYn19O2UuZXhwb3J0cz9lLmV4cG9ydHM9czp0LkNCT1J8fCh0LkNCT1I9cyl9KGMpfShsKTt2YXIgcD1sLmV4cG9ydHMsaD17ZXhwb3J0czp7fX07XG4vKiEgbGlsLXV1aWQgLSB2MC4xIC0gTUlUIExpY2Vuc2UgLSBodHRwczovL2dpdGh1Yi5jb20vbGlsLWpzL3V1aWQgKi9cbiFmdW5jdGlvbihlLHQpeyFmdW5jdGlvbihlKXt2YXIgdD1cIjAuMS4wXCIsbj17MzovXlswLTlBLUZdezh9LVswLTlBLUZdezR9LTNbMC05QS1GXXszfS1bMC05QS1GXXs0fS1bMC05QS1GXXsxMn0kL2ksNDovXlswLTlBLUZdezh9LVswLTlBLUZdezR9LTRbMC05QS1GXXszfS1bODlBQl1bMC05QS1GXXszfS1bMC05QS1GXXsxMn0kL2ksNTovXlswLTlBLUZdezh9LVswLTlBLUZdezR9LTVbMC05QS1GXXszfS1bODlBQl1bMC05QS1GXXszfS1bMC05QS1GXXsxMn0kL2ksYWxsOi9eWzAtOUEtRl17OH0tWzAtOUEtRl17NH0tWzAtOUEtRl17NH0tWzAtOUEtRl17NH0tWzAtOUEtRl17MTJ9JC9pfTtmdW5jdGlvbiByKCl7dmFyIGUsdCxuPVwiXCI7Zm9yKGU9MDtlPDMyO2UrKyl0PTE2Kk1hdGgucmFuZG9tKCl8MCw4IT09ZSYmMTIhPT1lJiYxNiE9PWUmJjIwIT09ZXx8KG4rPVwiLVwiKSxuKz0oMTI9PT1lPzQ6MTY9PT1lPzMmdHw4OnQpLnRvU3RyaW5nKDE2KTtyZXR1cm4gbn1mdW5jdGlvbiBpKGUsdCl7dmFyIHI9blt0fHxcImFsbFwiXTtyZXR1cm4gciYmci50ZXN0KGUpfHwhMX1yLmlzVVVJRD1pLHIuVkVSU0lPTj10LGUudXVpZD1yLGUuaXNVVUlEPWl9KHQpLG51bGwhPT1lJiYoZS5leHBvcnRzPXQudXVpZCl9KGgsaC5leHBvcnRzKTt2YXIgZixkLGcseSxiLHY9aC5leHBvcnRzLG09ZnVuY3Rpb24oKXtyZXR1cm4gdi51dWlkP3YudXVpZCgpOnYoKX0sXz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQsbixyLGk9ZS5zZXR1cDtpZih0aGlzLl9QTlNES1N1ZmZpeD17fSx0aGlzLmluc3RhbmNlSWQ9XCJwbi1cIi5jb25jYXQobSgpKSx0aGlzLnNlY3JldEtleT1pLnNlY3JldEtleXx8aS5zZWNyZXRfa2V5LHRoaXMuc3Vic2NyaWJlS2V5PWkuc3Vic2NyaWJlS2V5fHxpLnN1YnNjcmliZV9rZXksdGhpcy5wdWJsaXNoS2V5PWkucHVibGlzaEtleXx8aS5wdWJsaXNoX2tleSx0aGlzLnNka05hbWU9aS5zZGtOYW1lLHRoaXMuc2RrRmFtaWx5PWkuc2RrRmFtaWx5LHRoaXMucGFydG5lcklkPWkucGFydG5lcklkLHRoaXMuc2V0QXV0aEtleShpLmF1dGhLZXkpLHRoaXMuc2V0Q2lwaGVyS2V5KGkuY2lwaGVyS2V5KSx0aGlzLnNldEZpbHRlckV4cHJlc3Npb24oaS5maWx0ZXJFeHByZXNzaW9uKSxcInN0cmluZ1wiIT10eXBlb2YgaS5vcmlnaW4mJiFBcnJheS5pc0FycmF5KGkub3JpZ2luKSYmdm9pZCAwIT09aS5vcmlnaW4pdGhyb3cgbmV3IEVycm9yKFwiT3JpZ2luIG11c3QgYmUgZWl0aGVyIHVuZGVmaW5lZCwgYSBzdHJpbmcgb3IgYSBsaXN0IG9mIHN0cmluZ3MuXCIpO3RoaXMub3JpZ2luPWkub3JpZ2lufHxBcnJheS5mcm9tKHtsZW5ndGg6MjB9LChmdW5jdGlvbihlLHQpe3JldHVyblwicHNcIi5jb25jYXQodCsxLFwiLnBuZHNuLmNvbVwiKX0pKSx0aGlzLnNlY3VyZT1pLnNzbHx8ITEsdGhpcy5yZXN0b3JlPWkucmVzdG9yZXx8ITEsdGhpcy5wcm94eT1pLnByb3h5LHRoaXMua2VlcEFsaXZlPWkua2VlcEFsaXZlLHRoaXMua2VlcEFsaXZlU2V0dGluZ3M9aS5rZWVwQWxpdmVTZXR0aW5ncyx0aGlzLmF1dG9OZXR3b3JrRGV0ZWN0aW9uPWkuYXV0b05ldHdvcmtEZXRlY3Rpb258fCExLHRoaXMuZGVkdXBlT25TdWJzY3JpYmU9aS5kZWR1cGVPblN1YnNjcmliZXx8ITEsdGhpcy5tYXhpbXVtQ2FjaGVTaXplPWkubWF4aW11bUNhY2hlU2l6ZXx8MTAwLHRoaXMuY3VzdG9tRW5jcnlwdD1pLmN1c3RvbUVuY3J5cHQsdGhpcy5jdXN0b21EZWNyeXB0PWkuY3VzdG9tRGVjcnlwdCx0aGlzLmZpbGVVcGxvYWRQdWJsaXNoUmV0cnlMaW1pdD1udWxsIT09KHQ9aS5maWxlVXBsb2FkUHVibGlzaFJldHJ5TGltaXQpJiZ2b2lkIDAhPT10P3Q6NSx0aGlzLnVzZVJhbmRvbUlWcz1udWxsPT09KG49aS51c2VSYW5kb21JVnMpfHx2b2lkIDA9PT1ufHxuLHRoaXMuZW5hYmxlU3Vic2NyaWJlQmV0YT1udWxsIT09KHI9aS5lbmFibGVTdWJzY3JpYmVCZXRhKSYmdm9pZCAwIT09ciYmcixcInVuZGVmaW5lZFwiIT10eXBlb2YgbG9jYXRpb24mJlwiaHR0cHM6XCI9PT1sb2NhdGlvbi5wcm90b2NvbCYmKHRoaXMuc2VjdXJlPSEwKSx0aGlzLmxvZ1ZlcmJvc2l0eT1pLmxvZ1ZlcmJvc2l0eXx8ITEsdGhpcy5zdXBwcmVzc0xlYXZlRXZlbnRzPWkuc3VwcHJlc3NMZWF2ZUV2ZW50c3x8ITEsdGhpcy5hbm5vdW5jZUZhaWxlZEhlYXJ0YmVhdHM9aS5hbm5vdW5jZUZhaWxlZEhlYXJ0YmVhdHN8fCEwLHRoaXMuYW5ub3VuY2VTdWNjZXNzZnVsSGVhcnRiZWF0cz1pLmFubm91bmNlU3VjY2Vzc2Z1bEhlYXJ0YmVhdHN8fCExLHRoaXMudXNlSW5zdGFuY2VJZD1pLnVzZUluc3RhbmNlSWR8fCExLHRoaXMudXNlUmVxdWVzdElkPWkudXNlUmVxdWVzdElkfHwhMSx0aGlzLnJlcXVlc3RNZXNzYWdlQ291bnRUaHJlc2hvbGQ9aS5yZXF1ZXN0TWVzc2FnZUNvdW50VGhyZXNob2xkLHRoaXMuc2V0VHJhbnNhY3Rpb25UaW1lb3V0KGkudHJhbnNhY3Rpb25hbFJlcXVlc3RUaW1lb3V0fHwxNWUzKSx0aGlzLnNldFN1YnNjcmliZVRpbWVvdXQoaS5zdWJzY3JpYmVSZXF1ZXN0VGltZW91dHx8MzFlNCksdGhpcy5zZXRTZW5kQmVhY29uQ29uZmlnKGkudXNlU2VuZEJlYWNvbnx8ITApLGkucHJlc2VuY2VUaW1lb3V0P3RoaXMuc2V0UHJlc2VuY2VUaW1lb3V0KGkucHJlc2VuY2VUaW1lb3V0KTp0aGlzLl9wcmVzZW5jZVRpbWVvdXQ9MzAwLG51bGwhPWkuaGVhcnRiZWF0SW50ZXJ2YWwmJnRoaXMuc2V0SGVhcnRiZWF0SW50ZXJ2YWwoaS5oZWFydGJlYXRJbnRlcnZhbCksdGhpcy5zZXRVVUlEKGkudXVpZCl9cmV0dXJuIGUucHJvdG90eXBlLmdldEF1dGhLZXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hdXRoS2V5fSxlLnByb3RvdHlwZS5zZXRBdXRoS2V5PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmF1dGhLZXk9ZSx0aGlzfSxlLnByb3RvdHlwZS5zZXRDaXBoZXJLZXk9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2lwaGVyS2V5PWUsdGhpc30sZS5wcm90b3R5cGUuZ2V0VVVJRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLlVVSUR9LGUucHJvdG90eXBlLnNldFVVSUQ9ZnVuY3Rpb24oZSl7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlfHwwPT09ZS50cmltKCkubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdXVpZCBwYXJhbWV0ZXIuIFByb3ZpZGUgYSB2YWxpZCBzdHJpbmcgdXVpZFwiKTtyZXR1cm4gdGhpcy5VVUlEPWUsdGhpc30sZS5wcm90b3R5cGUuZ2V0RmlsdGVyRXhwcmVzc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbHRlckV4cHJlc3Npb259LGUucHJvdG90eXBlLnNldEZpbHRlckV4cHJlc3Npb249ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZmlsdGVyRXhwcmVzc2lvbj1lLHRoaXN9LGUucHJvdG90eXBlLmdldFByZXNlbmNlVGltZW91dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcmVzZW5jZVRpbWVvdXR9LGUucHJvdG90eXBlLnNldFByZXNlbmNlVGltZW91dD1mdW5jdGlvbihlKXtyZXR1cm4gZT49MjA/dGhpcy5fcHJlc2VuY2VUaW1lb3V0PWU6KHRoaXMuX3ByZXNlbmNlVGltZW91dD0yMCxjb25zb2xlLmxvZyhcIldBUk5JTkc6IFByZXNlbmNlIHRpbWVvdXQgaXMgbGVzcyB0aGFuIHRoZSBtaW5pbXVtLiBVc2luZyBtaW5pbXVtIHZhbHVlOiBcIix0aGlzLl9wcmVzZW5jZVRpbWVvdXQpKSx0aGlzLnNldEhlYXJ0YmVhdEludGVydmFsKHRoaXMuX3ByZXNlbmNlVGltZW91dC8yLTEpLHRoaXN9LGUucHJvdG90eXBlLnNldFByb3h5PWZ1bmN0aW9uKGUpe3RoaXMucHJveHk9ZX0sZS5wcm90b3R5cGUuZ2V0SGVhcnRiZWF0SW50ZXJ2YWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faGVhcnRiZWF0SW50ZXJ2YWx9LGUucHJvdG90eXBlLnNldEhlYXJ0YmVhdEludGVydmFsPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9oZWFydGJlYXRJbnRlcnZhbD1lLHRoaXN9LGUucHJvdG90eXBlLmdldFN1YnNjcmliZVRpbWVvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3Vic2NyaWJlUmVxdWVzdFRpbWVvdXR9LGUucHJvdG90eXBlLnNldFN1YnNjcmliZVRpbWVvdXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3N1YnNjcmliZVJlcXVlc3RUaW1lb3V0PWUsdGhpc30sZS5wcm90b3R5cGUuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RyYW5zYWN0aW9uYWxSZXF1ZXN0VGltZW91dH0sZS5wcm90b3R5cGUuc2V0VHJhbnNhY3Rpb25UaW1lb3V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl90cmFuc2FjdGlvbmFsUmVxdWVzdFRpbWVvdXQ9ZSx0aGlzfSxlLnByb3RvdHlwZS5pc1NlbmRCZWFjb25FbmFibGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3VzZVNlbmRCZWFjb259LGUucHJvdG90eXBlLnNldFNlbmRCZWFjb25Db25maWc9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3VzZVNlbmRCZWFjb249ZSx0aGlzfSxlLnByb3RvdHlwZS5nZXRWZXJzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuXCI3LjEuMVwifSxlLnByb3RvdHlwZS5fYWRkUG5zZGtTdWZmaXg9ZnVuY3Rpb24oZSx0KXt0aGlzLl9QTlNES1N1ZmZpeFtlXT10fSxlLnByb3RvdHlwZS5fZ2V0UG5zZGtTdWZmaXg9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gT2JqZWN0LmtleXModGhpcy5fUE5TREtTdWZmaXgpLnJlZHVjZSgoZnVuY3Rpb24obixyKXtyZXR1cm4gbitlK3QuX1BOU0RLU3VmZml4W3JdfSksXCJcIil9LGV9KCksTz1PfHxmdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9bi5saWI9e30saT1mdW5jdGlvbigpe30sbz1yLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihlKXtpLnByb3RvdHlwZT10aGlzO3ZhciB0PW5ldyBpO3JldHVybiBlJiZ0Lm1peEluKGUpLHQuaGFzT3duUHJvcGVydHkoXCJpbml0XCIpfHwodC5pbml0PWZ1bmN0aW9uKCl7dC4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KSx0LmluaXQucHJvdG90eXBlPXQsdC4kc3VwZXI9dGhpcyx0fSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmV4dGVuZCgpO3JldHVybiBlLmluaXQuYXBwbHkoZSxhcmd1bWVudHMpLGV9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBlKWUuaGFzT3duUHJvcGVydHkodCkmJih0aGlzW3RdPWVbdF0pO2UuaGFzT3duUHJvcGVydHkoXCJ0b1N0cmluZ1wiKSYmKHRoaXMudG9TdHJpbmc9ZS50b1N0cmluZyl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpfX0scz1yLldvcmRBcnJheT1vLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihlLHQpe2U9dGhpcy53b3Jkcz1lfHxbXSx0aGlzLnNpZ0J5dGVzPW51bGwhPXQ/dDo0KmUubGVuZ3RofSx0b1N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4oZXx8dSkuc3RyaW5naWZ5KHRoaXMpfSxjb25jYXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy53b3JkcyxuPWUud29yZHMscj10aGlzLnNpZ0J5dGVzO2lmKGU9ZS5zaWdCeXRlcyx0aGlzLmNsYW1wKCksciU0KWZvcih2YXIgaT0wO2k8ZTtpKyspdFtyK2k+Pj4yXXw9KG5baT4+PjJdPj4+MjQtaSU0KjgmMjU1KTw8MjQtKHIraSklNCo4O2Vsc2UgaWYoNjU1MzU8bi5sZW5ndGgpZm9yKGk9MDtpPGU7aSs9NCl0W3IraT4+PjJdPW5baT4+PjJdO2Vsc2UgdC5wdXNoLmFwcGx5KHQsbik7cmV0dXJuIHRoaXMuc2lnQnl0ZXMrPWUsdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLndvcmRzLG49dGhpcy5zaWdCeXRlczt0W24+Pj4yXSY9NDI5NDk2NzI5NTw8MzItbiU0KjgsdC5sZW5ndGg9ZS5jZWlsKG4vNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9by5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCksZX0scmFuZG9tOmZ1bmN0aW9uKHQpe2Zvcih2YXIgbj1bXSxyPTA7cjx0O3IrPTQpbi5wdXNoKDQyOTQ5NjcyOTYqZS5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChuLHQpfX0pLGE9bi5lbmM9e30sdT1hLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe3ZhciB0PWUud29yZHM7ZT1lLnNpZ0J5dGVzO2Zvcih2YXIgbj1bXSxyPTA7cjxlO3IrKyl7dmFyIGk9dFtyPj4+Ml0+Pj4yNC1yJTQqOCYyNTU7bi5wdXNoKChpPj4+NCkudG9TdHJpbmcoMTYpKSxuLnB1c2goKDE1JmkpLnRvU3RyaW5nKDE2KSl9cmV0dXJuIG4uam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUubGVuZ3RoLG49W10scj0wO3I8dDtyKz0yKW5bcj4+PjNdfD1wYXJzZUludChlLnN1YnN0cihyLDIpLDE2KTw8MjQtciU4KjQ7cmV0dXJuIG5ldyBzLmluaXQobix0LzIpfX0sYz1hLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe3ZhciB0PWUud29yZHM7ZT1lLnNpZ0J5dGVzO2Zvcih2YXIgbj1bXSxyPTA7cjxlO3IrKyluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh0W3I+Pj4yXT4+PjI0LXIlNCo4JjI1NSkpO3JldHVybiBuLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmxlbmd0aCxuPVtdLHI9MDtyPHQ7cisrKW5bcj4+PjJdfD0oMjU1JmUuY2hhckNvZGVBdChyKSk8PDI0LXIlNCo4O3JldHVybiBuZXcgcy5pbml0KG4sdCl9fSxsPWEuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShjLnN0cmluZ2lmeShlKSkpfWNhdGNoKGUpe3Rocm93IEVycm9yKFwiTWFsZm9ybWVkIFVURi04IGRhdGFcIil9fSxwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gYy5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZSkpKX19LHA9ci5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtPW8uZXh0ZW5kKHtyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9bmV3IHMuaW5pdCx0aGlzLl9uRGF0YUJ5dGVzPTB9LF9hcHBlbmQ6ZnVuY3Rpb24oZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWwucGFyc2UoZSkpLHRoaXMuX2RhdGEuY29uY2F0KGUpLHRoaXMuX25EYXRhQnl0ZXMrPWUuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMuX2RhdGEscj1uLndvcmRzLGk9bi5zaWdCeXRlcyxvPXRoaXMuYmxvY2tTaXplLGE9aS8oNCpvKTtpZih0PShhPXQ/ZS5jZWlsKGEpOmUubWF4KCgwfGEpLXRoaXMuX21pbkJ1ZmZlclNpemUsMCkpKm8saT1lLm1pbig0KnQsaSksdCl7Zm9yKHZhciB1PTA7dTx0O3UrPW8pdGhpcy5fZG9Qcm9jZXNzQmxvY2socix1KTt1PXIuc3BsaWNlKDAsdCksbi5zaWdCeXRlcy09aX1yZXR1cm4gbmV3IHMuaW5pdCh1LGkpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPW8uY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gZS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCksZX0sX21pbkJ1ZmZlclNpemU6MH0pO3IuSGFzaGVyPXAuZXh0ZW5kKHtjZmc6by5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGUpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChlKSx0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7cC5yZXNldC5jYWxsKHRoaXMpLHRoaXMuX2RvUmVzZXQoKX0sdXBkYXRlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9hcHBlbmQoZSksdGhpcy5fcHJvY2VzcygpLHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKGUpe3JldHVybiBlJiZ0aGlzLl9hcHBlbmQoZSksdGhpcy5fZG9GaW5hbGl6ZSgpfSxibG9ja1NpemU6MTYsX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGUuaW5pdChuKS5maW5hbGl6ZSh0KX19LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe3JldHVybiBuZXcgaC5ITUFDLmluaXQoZSxuKS5maW5hbGl6ZSh0KX19fSk7dmFyIGg9bi5hbGdvPXt9O3JldHVybiBufShNYXRoKTshZnVuY3Rpb24oZSl7Zm9yKHZhciB0PU8sbj0oaT10LmxpYikuV29yZEFycmF5LHI9aS5IYXNoZXIsaT10LmFsZ28sbz1bXSxzPVtdLGE9ZnVuY3Rpb24oZSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGUtKDB8ZSkpfDB9LHU9MixjPTA7NjQ+Yzspe3ZhciBsO2U6e2w9dTtmb3IodmFyIHA9ZS5zcXJ0KGwpLGg9MjtoPD1wO2grKylpZighKGwlaCkpe2w9ITE7YnJlYWsgZX1sPSEwfWwmJig4PmMmJihvW2NdPWEoZS5wb3codSwuNSkpKSxzW2NdPWEoZS5wb3codSwxLzMpKSxjKyspLHUrK312YXIgZj1bXTtpPWkuU0hBMjU2PXIuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IG4uaW5pdChvLnNsaWNlKDApKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXRoaXMuX2hhc2gud29yZHMscj1uWzBdLGk9blsxXSxvPW5bMl0sYT1uWzNdLHU9bls0XSxjPW5bNV0sbD1uWzZdLHA9bls3XSxoPTA7NjQ+aDtoKyspe2lmKDE2PmgpZltoXT0wfGVbdCtoXTtlbHNle3ZhciBkPWZbaC0xNV0sZz1mW2gtMl07ZltoXT0oKGQ8PDI1fGQ+Pj43KV4oZDw8MTR8ZD4+PjE4KV5kPj4+MykrZltoLTddKygoZzw8MTV8Zz4+PjE3KV4oZzw8MTN8Zz4+PjE5KV5nPj4+MTApK2ZbaC0xNl19ZD1wKygodTw8MjZ8dT4+PjYpXih1PDwyMXx1Pj4+MTEpXih1PDw3fHU+Pj4yNSkpKyh1JmNefnUmbCkrc1toXStmW2hdLGc9KChyPDwzMHxyPj4+MileKHI8PDE5fHI+Pj4xMyleKHI8PDEwfHI+Pj4yMikpKyhyJmleciZvXmkmbykscD1sLGw9YyxjPXUsdT1hK2R8MCxhPW8sbz1pLGk9cixyPWQrZ3wwfW5bMF09blswXStyfDAsblsxXT1uWzFdK2l8MCxuWzJdPW5bMl0rb3wwLG5bM109blszXSthfDAsbls0XT1uWzRdK3V8MCxuWzVdPW5bNV0rY3wwLG5bNl09bls2XStsfDAsbls3XT1uWzddK3B8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kYXRhLG49dC53b3JkcyxyPTgqdGhpcy5fbkRhdGFCeXRlcyxpPTgqdC5zaWdCeXRlcztyZXR1cm4gbltpPj4+NV18PTEyODw8MjQtaSUzMixuWzE0KyhpKzY0Pj4+OTw8NCldPWUuZmxvb3Ioci80Mjk0OTY3Mjk2KSxuWzE1KyhpKzY0Pj4+OTw8NCldPXIsdC5zaWdCeXRlcz00Km4ubGVuZ3RoLHRoaXMuX3Byb2Nlc3MoKSx0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPXIuY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gZS5faGFzaD10aGlzLl9oYXNoLmNsb25lKCksZX19KTt0LlNIQTI1Nj1yLl9jcmVhdGVIZWxwZXIoaSksdC5IbWFjU0hBMjU2PXIuX2NyZWF0ZUhtYWNIZWxwZXIoaSl9KE1hdGgpLGQ9KGY9TykuZW5jLlV0ZjgsZi5hbGdvLkhNQUM9Zi5saWIuQmFzZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZSx0KXtlPXRoaXMuX2hhc2hlcj1uZXcgZS5pbml0LFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1kLnBhcnNlKHQpKTt2YXIgbj1lLmJsb2NrU2l6ZSxyPTQqbjt0LnNpZ0J5dGVzPnImJih0PWUuZmluYWxpemUodCkpLHQuY2xhbXAoKTtmb3IodmFyIGk9dGhpcy5fb0tleT10LmNsb25lKCksbz10aGlzLl9pS2V5PXQuY2xvbmUoKSxzPWkud29yZHMsYT1vLndvcmRzLHU9MDt1PG47dSsrKXNbdV1ePTE1NDk1NTY4MjgsYVt1XV49OTA5NTIyNDg2O2kuc2lnQnl0ZXM9by5zaWdCeXRlcz1yLHRoaXMucmVzZXQoKX0scmVzZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9oYXNoZXI7ZS5yZXNldCgpLGUudXBkYXRlKHRoaXMuX2lLZXkpfSx1cGRhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2hhc2hlci51cGRhdGUoZSksdGhpc30sZmluYWxpemU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5faGFzaGVyO3JldHVybiBlPXQuZmluYWxpemUoZSksdC5yZXNldCgpLHQuZmluYWxpemUodGhpcy5fb0tleS5jbG9uZSgpLmNvbmNhdChlKSl9fSkseT0oZz1PKS5saWIuV29yZEFycmF5LGcuZW5jLkJhc2U2ND17c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe3ZhciB0PWUud29yZHMsbj1lLnNpZ0J5dGVzLHI9dGhpcy5fbWFwO2UuY2xhbXAoKSxlPVtdO2Zvcih2YXIgaT0wO2k8bjtpKz0zKWZvcih2YXIgbz0odFtpPj4+Ml0+Pj4yNC1pJTQqOCYyNTUpPDwxNnwodFtpKzE+Pj4yXT4+PjI0LShpKzEpJTQqOCYyNTUpPDw4fHRbaSsyPj4+Ml0+Pj4yNC0oaSsyKSU0KjgmMjU1LHM9MDs0PnMmJmkrLjc1KnM8bjtzKyspZS5wdXNoKHIuY2hhckF0KG8+Pj42KigzLXMpJjYzKSk7aWYodD1yLmNoYXJBdCg2NCkpZm9yKDtlLmxlbmd0aCU0OyllLnB1c2godCk7cmV0dXJuIGUuam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGgsbj10aGlzLl9tYXA7KHI9bi5jaGFyQXQoNjQpKSYmLTEhPShyPWUuaW5kZXhPZihyKSkmJih0PXIpO2Zvcih2YXIgcj1bXSxpPTAsbz0wO288dDtvKyspaWYobyU0KXt2YXIgcz1uLmluZGV4T2YoZS5jaGFyQXQoby0xKSk8PG8lNCoyLGE9bi5pbmRleE9mKGUuY2hhckF0KG8pKT4+PjYtbyU0KjI7cltpPj4+Ml18PShzfGEpPDwyNC1pJTQqOCxpKyt9cmV0dXJuIHkuY3JlYXRlKHIsaSl9LF9tYXA6XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwifSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCxuLHIsaSxvLHMpe3JldHVybigoZT1lKyh0Jm58fnQmcikraStzKTw8b3xlPj4+MzItbykrdH1mdW5jdGlvbiBuKGUsdCxuLHIsaSxvLHMpe3JldHVybigoZT1lKyh0JnJ8biZ+cikraStzKTw8b3xlPj4+MzItbykrdH1mdW5jdGlvbiByKGUsdCxuLHIsaSxvLHMpe3JldHVybigoZT1lKyh0Xm5ecikraStzKTw8b3xlPj4+MzItbykrdH1mdW5jdGlvbiBpKGUsdCxuLHIsaSxvLHMpe3JldHVybigoZT1lKyhuXih0fH5yKSkraStzKTw8b3xlPj4+MzItbykrdH1mb3IodmFyIG89TyxzPSh1PW8ubGliKS5Xb3JkQXJyYXksYT11Lkhhc2hlcix1PW8uYWxnbyxjPVtdLGw9MDs2ND5sO2wrKyljW2xdPTQyOTQ5NjcyOTYqZS5hYnMoZS5zaW4obCsxKSl8MDt1PXUuTUQ1PWEuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IHMuaW5pdChbMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4XSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLG8pe2Zvcih2YXIgcz0wOzE2PnM7cysrKXt2YXIgYT1lW3U9bytzXTtlW3VdPTE2NzExOTM1JihhPDw4fGE+Pj4yNCl8NDI3ODI1NTM2MCYoYTw8MjR8YT4+PjgpfXM9dGhpcy5faGFzaC53b3Jkczt2YXIgdT1lW28rMF0sbD0oYT1lW28rMV0sZVtvKzJdKSxwPWVbbyszXSxoPWVbbys0XSxmPWVbbys1XSxkPWVbbys2XSxnPWVbbys3XSx5PWVbbys4XSxiPWVbbys5XSx2PWVbbysxMF0sbT1lW28rMTFdLF89ZVtvKzEyXSxPPWVbbysxM10sUD1lW28rMTRdLFM9ZVtvKzE1XSx3PXQodz1zWzBdLE49c1sxXSxrPXNbMl0sVD1zWzNdLHUsNyxjWzBdKSxUPXQoVCx3LE4sayxhLDEyLGNbMV0pLGs9dChrLFQsdyxOLGwsMTcsY1syXSksTj10KE4sayxULHcscCwyMixjWzNdKTt3PXQodyxOLGssVCxoLDcsY1s0XSksVD10KFQsdyxOLGssZiwxMixjWzVdKSxrPXQoayxULHcsTixkLDE3LGNbNl0pLE49dChOLGssVCx3LGcsMjIsY1s3XSksdz10KHcsTixrLFQseSw3LGNbOF0pLFQ9dChULHcsTixrLGIsMTIsY1s5XSksaz10KGssVCx3LE4sdiwxNyxjWzEwXSksTj10KE4sayxULHcsbSwyMixjWzExXSksdz10KHcsTixrLFQsXyw3LGNbMTJdKSxUPXQoVCx3LE4sayxPLDEyLGNbMTNdKSxrPXQoayxULHcsTixQLDE3LGNbMTRdKSx3PW4odyxOPXQoTixrLFQsdyxTLDIyLGNbMTVdKSxrLFQsYSw1LGNbMTZdKSxUPW4oVCx3LE4sayxkLDksY1sxN10pLGs9bihrLFQsdyxOLG0sMTQsY1sxOF0pLE49bihOLGssVCx3LHUsMjAsY1sxOV0pLHc9bih3LE4sayxULGYsNSxjWzIwXSksVD1uKFQsdyxOLGssdiw5LGNbMjFdKSxrPW4oayxULHcsTixTLDE0LGNbMjJdKSxOPW4oTixrLFQsdyxoLDIwLGNbMjNdKSx3PW4odyxOLGssVCxiLDUsY1syNF0pLFQ9bihULHcsTixrLFAsOSxjWzI1XSksaz1uKGssVCx3LE4scCwxNCxjWzI2XSksTj1uKE4sayxULHcseSwyMCxjWzI3XSksdz1uKHcsTixrLFQsTyw1LGNbMjhdKSxUPW4oVCx3LE4sayxsLDksY1syOV0pLGs9bihrLFQsdyxOLGcsMTQsY1szMF0pLHc9cih3LE49bihOLGssVCx3LF8sMjAsY1szMV0pLGssVCxmLDQsY1szMl0pLFQ9cihULHcsTixrLHksMTEsY1szM10pLGs9cihrLFQsdyxOLG0sMTYsY1szNF0pLE49cihOLGssVCx3LFAsMjMsY1szNV0pLHc9cih3LE4sayxULGEsNCxjWzM2XSksVD1yKFQsdyxOLGssaCwxMSxjWzM3XSksaz1yKGssVCx3LE4sZywxNixjWzM4XSksTj1yKE4sayxULHcsdiwyMyxjWzM5XSksdz1yKHcsTixrLFQsTyw0LGNbNDBdKSxUPXIoVCx3LE4sayx1LDExLGNbNDFdKSxrPXIoayxULHcsTixwLDE2LGNbNDJdKSxOPXIoTixrLFQsdyxkLDIzLGNbNDNdKSx3PXIodyxOLGssVCxiLDQsY1s0NF0pLFQ9cihULHcsTixrLF8sMTEsY1s0NV0pLGs9cihrLFQsdyxOLFMsMTYsY1s0Nl0pLHc9aSh3LE49cihOLGssVCx3LGwsMjMsY1s0N10pLGssVCx1LDYsY1s0OF0pLFQ9aShULHcsTixrLGcsMTAsY1s0OV0pLGs9aShrLFQsdyxOLFAsMTUsY1s1MF0pLE49aShOLGssVCx3LGYsMjEsY1s1MV0pLHc9aSh3LE4sayxULF8sNixjWzUyXSksVD1pKFQsdyxOLGsscCwxMCxjWzUzXSksaz1pKGssVCx3LE4sdiwxNSxjWzU0XSksTj1pKE4sayxULHcsYSwyMSxjWzU1XSksdz1pKHcsTixrLFQseSw2LGNbNTZdKSxUPWkoVCx3LE4sayxTLDEwLGNbNTddKSxrPWkoayxULHcsTixkLDE1LGNbNThdKSxOPWkoTixrLFQsdyxPLDIxLGNbNTldKSx3PWkodyxOLGssVCxoLDYsY1s2MF0pLFQ9aShULHcsTixrLG0sMTAsY1s2MV0pLGs9aShrLFQsdyxOLGwsMTUsY1s2Ml0pLE49aShOLGssVCx3LGIsMjEsY1s2M10pO3NbMF09c1swXSt3fDAsc1sxXT1zWzFdK058MCxzWzJdPXNbMl0ra3wwLHNbM109c1szXStUfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZGF0YSxuPXQud29yZHMscj04KnRoaXMuX25EYXRhQnl0ZXMsaT04KnQuc2lnQnl0ZXM7bltpPj4+NV18PTEyODw8MjQtaSUzMjt2YXIgbz1lLmZsb29yKHIvNDI5NDk2NzI5Nik7Zm9yKG5bMTUrKGkrNjQ+Pj45PDw0KV09MTY3MTE5MzUmKG88PDh8bz4+PjI0KXw0Mjc4MjU1MzYwJihvPDwyNHxvPj4+OCksblsxNCsoaSs2ND4+Pjk8PDQpXT0xNjcxMTkzNSYocjw8OHxyPj4+MjQpfDQyNzgyNTUzNjAmKHI8PDI0fHI+Pj44KSx0LnNpZ0J5dGVzPTQqKG4ubGVuZ3RoKzEpLHRoaXMuX3Byb2Nlc3MoKSxuPSh0PXRoaXMuX2hhc2gpLndvcmRzLHI9MDs0PnI7cisrKWk9bltyXSxuW3JdPTE2NzExOTM1JihpPDw4fGk+Pj4yNCl8NDI3ODI1NTM2MCYoaTw8MjR8aT4+PjgpO3JldHVybiB0fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPWEuY2xvbmUuY2FsbCh0aGlzKTtyZXR1cm4gZS5faGFzaD10aGlzLl9oYXNoLmNsb25lKCksZX19KSxvLk1ENT1hLl9jcmVhdGVIZWxwZXIodSksby5IbWFjTUQ1PWEuX2NyZWF0ZUhtYWNIZWxwZXIodSl9KE1hdGgpLGZ1bmN0aW9uKCl7dmFyIGUsdD1PLG49KGU9dC5saWIpLkJhc2Uscj1lLldvcmRBcnJheSxpPShlPXQuYWxnbykuRXZwS0RGPW4uZXh0ZW5kKHtjZmc6bi5leHRlbmQoe2tleVNpemU6NCxoYXNoZXI6ZS5NRDUsaXRlcmF0aW9uczoxfSksaW5pdDpmdW5jdGlvbihlKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoZSl9LGNvbXB1dGU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49KGE9dGhpcy5jZmcpLmhhc2hlci5jcmVhdGUoKSxpPXIuY3JlYXRlKCksbz1pLndvcmRzLHM9YS5rZXlTaXplLGE9YS5pdGVyYXRpb25zO28ubGVuZ3RoPHM7KXt1JiZuLnVwZGF0ZSh1KTt2YXIgdT1uLnVwZGF0ZShlKS5maW5hbGl6ZSh0KTtuLnJlc2V0KCk7Zm9yKHZhciBjPTE7YzxhO2MrKyl1PW4uZmluYWxpemUodSksbi5yZXNldCgpO2kuY29uY2F0KHUpfXJldHVybiBpLnNpZ0J5dGVzPTQqcyxpfX0pO3QuRXZwS0RGPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gaS5jcmVhdGUobikuY29tcHV0ZShlLHQpfX0oKSxPLmxpYi5DaXBoZXJ8fGZ1bmN0aW9uKGUpe3ZhciB0PShmPU8pLmxpYixuPXQuQmFzZSxyPXQuV29yZEFycmF5LGk9dC5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtLG89Zi5lbmMuQmFzZTY0LHM9Zi5hbGdvLkV2cEtERixhPXQuQ2lwaGVyPWkuZXh0ZW5kKHtjZmc6bi5leHRlbmQoKSxjcmVhdGVFbmNyeXB0b3I6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fRU5DX1hGT1JNX01PREUsZSx0KX0sY3JlYXRlRGVjcnlwdG9yOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0RFQ19YRk9STV9NT0RFLGUsdCl9LGluaXQ6ZnVuY3Rpb24oZSx0LG4pe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChuKSx0aGlzLl94Zm9ybU1vZGU9ZSx0aGlzLl9rZXk9dCx0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7aS5yZXNldC5jYWxsKHRoaXMpLHRoaXMuX2RvUmVzZXQoKX0scHJvY2VzczpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYXBwZW5kKGUpLHRoaXMuX3Byb2Nlc3MoKX0sZmluYWxpemU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJnRoaXMuX2FwcGVuZChlKSx0aGlzLl9kb0ZpbmFsaXplKCl9LGtleVNpemU6NCxpdlNpemU6NCxfRU5DX1hGT1JNX01PREU6MSxfREVDX1hGT1JNX01PREU6MixfY3JlYXRlSGVscGVyOmZ1bmN0aW9uKGUpe3JldHVybntlbmNyeXB0OmZ1bmN0aW9uKHQsbixyKXtyZXR1cm4oXCJzdHJpbmdcIj09dHlwZW9mIG4/ZDpoKS5lbmNyeXB0KGUsdCxuLHIpfSxkZWNyeXB0OmZ1bmN0aW9uKHQsbixyKXtyZXR1cm4oXCJzdHJpbmdcIj09dHlwZW9mIG4/ZDpoKS5kZWNyeXB0KGUsdCxuLHIpfX19fSk7dC5TdHJlYW1DaXBoZXI9YS5leHRlbmQoe19kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Byb2Nlc3MoITApfSxibG9ja1NpemU6MX0pO3ZhciB1PWYubW9kZT17fSxjPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLl9pdjtyP3RoaXMuX2l2PXVuZGVmaW5lZDpyPXRoaXMuX3ByZXZCbG9jaztmb3IodmFyIGk9MDtpPG47aSsrKWVbdCtpXV49cltpXX0sbD0odC5CbG9ja0NpcGhlck1vZGU9bi5leHRlbmQoe2NyZWF0ZUVuY3J5cHRvcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoZSx0KX0sY3JlYXRlRGVjcnlwdG9yOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuRGVjcnlwdG9yLmNyZWF0ZShlLHQpfSxpbml0OmZ1bmN0aW9uKGUsdCl7dGhpcy5fY2lwaGVyPWUsdGhpcy5faXY9dH19KSkuZXh0ZW5kKCk7bC5FbmNyeXB0b3I9bC5leHRlbmQoe3Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuX2NpcGhlcixyPW4uYmxvY2tTaXplO2MuY2FsbCh0aGlzLGUsdCxyKSxuLmVuY3J5cHRCbG9jayhlLHQpLHRoaXMuX3ByZXZCbG9jaz1lLnNsaWNlKHQsdCtyKX19KSxsLkRlY3J5cHRvcj1sLmV4dGVuZCh7cHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fY2lwaGVyLHI9bi5ibG9ja1NpemUsaT1lLnNsaWNlKHQsdCtyKTtuLmRlY3J5cHRCbG9jayhlLHQpLGMuY2FsbCh0aGlzLGUsdCxyKSx0aGlzLl9wcmV2QmxvY2s9aX19KSx1PXUuQ0JDPWwsbD0oZi5wYWQ9e30pLlBrY3M3PXtwYWQ6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4saT0obj0obj00KnQpLWUuc2lnQnl0ZXMlbik8PDI0fG48PDE2fG48PDh8bixvPVtdLHM9MDtzPG47cys9NClvLnB1c2goaSk7bj1yLmNyZWF0ZShvLG4pLGUuY29uY2F0KG4pfSx1bnBhZDpmdW5jdGlvbihlKXtlLnNpZ0J5dGVzLT0yNTUmZS53b3Jkc1tlLnNpZ0J5dGVzLTE+Pj4yXX19LHQuQmxvY2tDaXBoZXI9YS5leHRlbmQoe2NmZzphLmNmZy5leHRlbmQoe21vZGU6dSxwYWRkaW5nOmx9KSxyZXNldDpmdW5jdGlvbigpe2EucmVzZXQuY2FsbCh0aGlzKTt2YXIgZT0odD10aGlzLmNmZykuaXYsdD10Lm1vZGU7aWYodGhpcy5feGZvcm1Nb2RlPT10aGlzLl9FTkNfWEZPUk1fTU9ERSl2YXIgbj10LmNyZWF0ZUVuY3J5cHRvcjtlbHNlIG49dC5jcmVhdGVEZWNyeXB0b3IsdGhpcy5fbWluQnVmZmVyU2l6ZT0xO3RoaXMuX21vZGU9bi5jYWxsKHQsdGhpcyxlJiZlLndvcmRzKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGUsdCl7dGhpcy5fbW9kZS5wcm9jZXNzQmxvY2soZSx0KX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNmZy5wYWRkaW5nO2lmKHRoaXMuX3hmb3JtTW9kZT09dGhpcy5fRU5DX1hGT1JNX01PREUpe2UucGFkKHRoaXMuX2RhdGEsdGhpcy5ibG9ja1NpemUpO3ZhciB0PXRoaXMuX3Byb2Nlc3MoITApfWVsc2UgdD10aGlzLl9wcm9jZXNzKCEwKSxlLnVucGFkKHQpO3JldHVybiB0fSxibG9ja1NpemU6NH0pO3ZhciBwPXQuQ2lwaGVyUGFyYW1zPW4uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGUpe3RoaXMubWl4SW4oZSl9LHRvU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybihlfHx0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpfX0pLGg9KHU9KGYuZm9ybWF0PXt9KS5PcGVuU1NMPXtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jaXBoZXJ0ZXh0O3JldHVybigoZT1lLnNhbHQpP3IuY3JlYXRlKFsxMzk4ODkzNjg0LDE3MDEwNzY4MzFdKS5jb25jYXQoZSkuY29uY2F0KHQpOnQpLnRvU3RyaW5nKG8pfSxwYXJzZTpmdW5jdGlvbihlKXt2YXIgdD0oZT1vLnBhcnNlKGUpKS53b3JkcztpZigxMzk4ODkzNjg0PT10WzBdJiYxNzAxMDc2ODMxPT10WzFdKXt2YXIgbj1yLmNyZWF0ZSh0LnNsaWNlKDIsNCkpO3Quc3BsaWNlKDAsNCksZS5zaWdCeXRlcy09MTZ9cmV0dXJuIHAuY3JlYXRlKHtjaXBoZXJ0ZXh0OmUsc2FsdDpufSl9fSx0LlNlcmlhbGl6YWJsZUNpcGhlcj1uLmV4dGVuZCh7Y2ZnOm4uZXh0ZW5kKHtmb3JtYXQ6dX0pLGVuY3J5cHQ6ZnVuY3Rpb24oZSx0LG4scil7cj10aGlzLmNmZy5leHRlbmQocik7dmFyIGk9ZS5jcmVhdGVFbmNyeXB0b3IobixyKTtyZXR1cm4gdD1pLmZpbmFsaXplKHQpLGk9aS5jZmcscC5jcmVhdGUoe2NpcGhlcnRleHQ6dCxrZXk6bixpdjppLml2LGFsZ29yaXRobTplLG1vZGU6aS5tb2RlLHBhZGRpbmc6aS5wYWRkaW5nLGJsb2NrU2l6ZTplLmJsb2NrU2l6ZSxmb3JtYXR0ZXI6ci5mb3JtYXR9KX0sZGVjcnlwdDpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gcj10aGlzLmNmZy5leHRlbmQociksdD10aGlzLl9wYXJzZSh0LHIuZm9ybWF0KSxlLmNyZWF0ZURlY3J5cHRvcihuLHIpLmZpbmFsaXplKHQuY2lwaGVydGV4dCl9LF9wYXJzZTpmdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3QucGFyc2UoZSx0aGlzKTplfX0pKSxmPShmLmtkZj17fSkuT3BlblNTTD17ZXhlY3V0ZTpmdW5jdGlvbihlLHQsbixpKXtyZXR1cm4gaXx8KGk9ci5yYW5kb20oOCkpLGU9cy5jcmVhdGUoe2tleVNpemU6dCtufSkuY29tcHV0ZShlLGkpLG49ci5jcmVhdGUoZS53b3Jkcy5zbGljZSh0KSw0Km4pLGUuc2lnQnl0ZXM9NCp0LHAuY3JlYXRlKHtrZXk6ZSxpdjpuLHNhbHQ6aX0pfX0sZD10LlBhc3N3b3JkQmFzZWRDaXBoZXI9aC5leHRlbmQoe2NmZzpoLmNmZy5leHRlbmQoe2tkZjpmfSksZW5jcnlwdDpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbj0ocj10aGlzLmNmZy5leHRlbmQocikpLmtkZi5leGVjdXRlKG4sZS5rZXlTaXplLGUuaXZTaXplKSxyLml2PW4uaXYsKGU9aC5lbmNyeXB0LmNhbGwodGhpcyxlLHQsbi5rZXkscikpLm1peEluKG4pLGV9LGRlY3J5cHQ6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHI9dGhpcy5jZmcuZXh0ZW5kKHIpLHQ9dGhpcy5fcGFyc2UodCxyLmZvcm1hdCksbj1yLmtkZi5leGVjdXRlKG4sZS5rZXlTaXplLGUuaXZTaXplLHQuc2FsdCksci5pdj1uLml2LGguZGVjcnlwdC5jYWxsKHRoaXMsZSx0LG4ua2V5LHIpfX0pfSgpLGZ1bmN0aW9uKCl7Zm9yKHZhciBlPU8sdD1lLmxpYi5CbG9ja0NpcGhlcixuPWUuYWxnbyxyPVtdLGk9W10sbz1bXSxzPVtdLGE9W10sdT1bXSxjPVtdLGw9W10scD1bXSxoPVtdLGY9W10sZD0wOzI1Nj5kO2QrKylmW2RdPTEyOD5kP2Q8PDE6ZDw8MV4yODM7dmFyIGc9MCx5PTA7Zm9yKGQ9MDsyNTY+ZDtkKyspe3ZhciBiPShiPXleeTw8MV55PDwyXnk8PDNeeTw8NCk+Pj44XjI1NSZiXjk5O3JbZ109YixpW2JdPWc7dmFyIHY9ZltnXSxtPWZbdl0sXz1mW21dLFA9MjU3KmZbYl1eMTY4NDMwMDgqYjtvW2ddPVA8PDI0fFA+Pj44LHNbZ109UDw8MTZ8UD4+PjE2LGFbZ109UDw8OHxQPj4+MjQsdVtnXT1QLFA9MTY4NDMwMDkqX142NTUzNyptXjI1Nyp2XjE2ODQzMDA4KmcsY1tiXT1QPDwyNHxQPj4+OCxsW2JdPVA8PDE2fFA+Pj4xNixwW2JdPVA8PDh8UD4+PjI0LGhbYl09UCxnPyhnPXZeZltmW2ZbX152XV1dLHlePWZbZlt5XV0pOmc9eT0xfXZhciBTPVswLDEsMiw0LDgsMTYsMzIsNjQsMTI4LDI3LDU0XTtuPW4uQUVTPXQuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgZT0obj10aGlzLl9rZXkpLndvcmRzLHQ9bi5zaWdCeXRlcy80LG49NCooKHRoaXMuX25Sb3VuZHM9dCs2KSsxKSxpPXRoaXMuX2tleVNjaGVkdWxlPVtdLG89MDtvPG47bysrKWlmKG88dClpW29dPWVbb107ZWxzZXt2YXIgcz1pW28tMV07byV0PzY8dCYmND09byV0JiYocz1yW3M+Pj4yNF08PDI0fHJbcz4+PjE2JjI1NV08PDE2fHJbcz4+PjgmMjU1XTw8OHxyWzI1NSZzXSk6KHM9clsocz1zPDw4fHM+Pj4yNCk+Pj4yNF08PDI0fHJbcz4+PjE2JjI1NV08PDE2fHJbcz4+PjgmMjU1XTw8OHxyWzI1NSZzXSxzXj1TW28vdHwwXTw8MjQpLGlbb109aVtvLXRdXnN9Zm9yKGU9dGhpcy5faW52S2V5U2NoZWR1bGU9W10sdD0wO3Q8bjt0Kyspbz1uLXQscz10JTQ/aVtvXTppW28tNF0sZVt0XT00PnR8fDQ+PW8/czpjW3Jbcz4+PjI0XV1ebFtyW3M+Pj4xNiYyNTVdXV5wW3Jbcz4+PjgmMjU1XV1eaFtyWzI1NSZzXV19LGVuY3J5cHRCbG9jazpmdW5jdGlvbihlLHQpe3RoaXMuX2RvQ3J5cHRCbG9jayhlLHQsdGhpcy5fa2V5U2NoZWR1bGUsbyxzLGEsdSxyKX0sZGVjcnlwdEJsb2NrOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZVt0KzFdO2VbdCsxXT1lW3QrM10sZVt0KzNdPW4sdGhpcy5fZG9DcnlwdEJsb2NrKGUsdCx0aGlzLl9pbnZLZXlTY2hlZHVsZSxjLGwscCxoLGkpLG49ZVt0KzFdLGVbdCsxXT1lW3QrM10sZVt0KzNdPW59LF9kb0NyeXB0QmxvY2s6ZnVuY3Rpb24oZSx0LG4scixpLG8scyxhKXtmb3IodmFyIHU9dGhpcy5fblJvdW5kcyxjPWVbdF1eblswXSxsPWVbdCsxXV5uWzFdLHA9ZVt0KzJdXm5bMl0saD1lW3QrM11eblszXSxmPTQsZD0xO2Q8dTtkKyspe3ZhciBnPXJbYz4+PjI0XV5pW2w+Pj4xNiYyNTVdXm9bcD4+PjgmMjU1XV5zWzI1NSZoXV5uW2YrK10seT1yW2w+Pj4yNF1eaVtwPj4+MTYmMjU1XV5vW2g+Pj44JjI1NV1ec1syNTUmY11ebltmKytdLGI9cltwPj4+MjRdXmlbaD4+PjE2JjI1NV1eb1tjPj4+OCYyNTVdXnNbMjU1JmxdXm5bZisrXTtoPXJbaD4+PjI0XV5pW2M+Pj4xNiYyNTVdXm9bbD4+PjgmMjU1XV5zWzI1NSZwXV5uW2YrK10sYz1nLGw9eSxwPWJ9Zz0oYVtjPj4+MjRdPDwyNHxhW2w+Pj4xNiYyNTVdPDwxNnxhW3A+Pj44JjI1NV08PDh8YVsyNTUmaF0pXm5bZisrXSx5PShhW2w+Pj4yNF08PDI0fGFbcD4+PjE2JjI1NV08PDE2fGFbaD4+PjgmMjU1XTw8OHxhWzI1NSZjXSlebltmKytdLGI9KGFbcD4+PjI0XTw8MjR8YVtoPj4+MTYmMjU1XTw8MTZ8YVtjPj4+OCYyNTVdPDw4fGFbMjU1JmxdKV5uW2YrK10saD0oYVtoPj4+MjRdPDwyNHxhW2M+Pj4xNiYyNTVdPDwxNnxhW2w+Pj44JjI1NV08PDh8YVsyNTUmcF0pXm5bZisrXSxlW3RdPWcsZVt0KzFdPXksZVt0KzJdPWIsZVt0KzNdPWh9LGtleVNpemU6OH0pO2UuQUVTPXQuX2NyZWF0ZUhlbHBlcihuKX0oKSxPLm1vZGUuRUNCPSgoYj1PLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCkpLkVuY3J5cHRvcj1iLmV4dGVuZCh7cHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGUsdCl7dGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhlLHQpfX0pLGIuRGVjcnlwdG9yPWIuZXh0ZW5kKHtwcm9jZXNzQmxvY2s6ZnVuY3Rpb24oZSx0KXt0aGlzLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGUsdCl9fSksYik7dmFyIFA9TztmdW5jdGlvbiBTKGUpe3ZhciB0LG49W107Zm9yKHQ9MDt0PGUubGVuZ3RoO3QrPTEpblt0LzR8MF18PWVbdF08PDI0LTgqdDtyZXR1cm4gUC5saWIuV29yZEFycmF5LmNyZWF0ZShuLGUubGVuZ3RoKX12YXIgdz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9ZS5jb25maWc7dGhpcy5fY29uZmlnPXQsdGhpcy5faXY9XCIwMTIzNDU2Nzg5MDEyMzQ1XCIsdGhpcy5fYWxsb3dlZEtleUVuY29kaW5ncz1bXCJoZXhcIixcInV0ZjhcIixcImJhc2U2NFwiLFwiYmluYXJ5XCJdLHRoaXMuX2FsbG93ZWRLZXlMZW5ndGhzPVsxMjgsMjU2XSx0aGlzLl9hbGxvd2VkTW9kZXM9W1wiZWNiXCIsXCJjYmNcIl0sdGhpcy5fZGVmYXVsdE9wdGlvbnM9e2VuY3J5cHRLZXk6ITAsa2V5RW5jb2Rpbmc6XCJ1dGY4XCIsa2V5TGVuZ3RoOjI1Nixtb2RlOlwiY2JjXCJ9fXJldHVybiBlLnByb3RvdHlwZS5ITUFDU0hBMjU2PWZ1bmN0aW9uKGUpe3JldHVybiBQLkhtYWNTSEEyNTYoZSx0aGlzLl9jb25maWcuc2VjcmV0S2V5KS50b1N0cmluZyhQLmVuYy5CYXNlNjQpfSxlLnByb3RvdHlwZS5TSEEyNTY9ZnVuY3Rpb24oZSl7cmV0dXJuIFAuU0hBMjU2KGUpLnRvU3RyaW5nKFAuZW5jLkhleCl9LGUucHJvdG90eXBlLl9wYXJzZU9wdGlvbnM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZXx8e307cmV0dXJuIHQuaGFzT3duUHJvcGVydHkoXCJlbmNyeXB0S2V5XCIpfHwodC5lbmNyeXB0S2V5PXRoaXMuX2RlZmF1bHRPcHRpb25zLmVuY3J5cHRLZXkpLHQuaGFzT3duUHJvcGVydHkoXCJrZXlFbmNvZGluZ1wiKXx8KHQua2V5RW5jb2Rpbmc9dGhpcy5fZGVmYXVsdE9wdGlvbnMua2V5RW5jb2RpbmcpLHQuaGFzT3duUHJvcGVydHkoXCJrZXlMZW5ndGhcIil8fCh0LmtleUxlbmd0aD10aGlzLl9kZWZhdWx0T3B0aW9ucy5rZXlMZW5ndGgpLHQuaGFzT3duUHJvcGVydHkoXCJtb2RlXCIpfHwodC5tb2RlPXRoaXMuX2RlZmF1bHRPcHRpb25zLm1vZGUpLC0xPT09dGhpcy5fYWxsb3dlZEtleUVuY29kaW5ncy5pbmRleE9mKHQua2V5RW5jb2RpbmcudG9Mb3dlckNhc2UoKSkmJih0LmtleUVuY29kaW5nPXRoaXMuX2RlZmF1bHRPcHRpb25zLmtleUVuY29kaW5nKSwtMT09PXRoaXMuX2FsbG93ZWRLZXlMZW5ndGhzLmluZGV4T2YocGFyc2VJbnQodC5rZXlMZW5ndGgsMTApKSYmKHQua2V5TGVuZ3RoPXRoaXMuX2RlZmF1bHRPcHRpb25zLmtleUxlbmd0aCksLTE9PT10aGlzLl9hbGxvd2VkTW9kZXMuaW5kZXhPZih0Lm1vZGUudG9Mb3dlckNhc2UoKSkmJih0Lm1vZGU9dGhpcy5fZGVmYXVsdE9wdGlvbnMubW9kZSksdH0sZS5wcm90b3R5cGUuX2RlY29kZUtleT1mdW5jdGlvbihlLHQpe3JldHVyblwiYmFzZTY0XCI9PT10LmtleUVuY29kaW5nP1AuZW5jLkJhc2U2NC5wYXJzZShlKTpcImhleFwiPT09dC5rZXlFbmNvZGluZz9QLmVuYy5IZXgucGFyc2UoZSk6ZX0sZS5wcm90b3R5cGUuX2dldFBhZGRlZEtleT1mdW5jdGlvbihlLHQpe3JldHVybiBlPXRoaXMuX2RlY29kZUtleShlLHQpLHQuZW5jcnlwdEtleT9QLmVuYy5VdGY4LnBhcnNlKHRoaXMuU0hBMjU2KGUpLnNsaWNlKDAsMzIpKTplfSxlLnByb3RvdHlwZS5fZ2V0TW9kZT1mdW5jdGlvbihlKXtyZXR1cm5cImVjYlwiPT09ZS5tb2RlP1AubW9kZS5FQ0I6UC5tb2RlLkNCQ30sZS5wcm90b3R5cGUuX2dldElWPWZ1bmN0aW9uKGUpe3JldHVyblwiY2JjXCI9PT1lLm1vZGU/UC5lbmMuVXRmOC5wYXJzZSh0aGlzLl9pdik6bnVsbH0sZS5wcm90b3R5cGUuX2dldFJhbmRvbUlWPWZ1bmN0aW9uKCl7cmV0dXJuIFAubGliLldvcmRBcnJheS5yYW5kb20oMTYpfSxlLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5fY29uZmlnLmN1c3RvbUVuY3J5cHQ/dGhpcy5fY29uZmlnLmN1c3RvbUVuY3J5cHQoZSk6dGhpcy5wbkVuY3J5cHQoZSx0LG4pfSxlLnByb3RvdHlwZS5kZWNyeXB0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5fY29uZmlnLmN1c3RvbURlY3J5cHQ/dGhpcy5fY29uZmlnLmN1c3RvbURlY3J5cHQoZSk6dGhpcy5wbkRlY3J5cHQoZSx0LG4pfSxlLnByb3RvdHlwZS5wbkVuY3J5cHQ9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0JiYhdGhpcy5fY29uZmlnLmNpcGhlcktleSlyZXR1cm4gZTtuPXRoaXMuX3BhcnNlT3B0aW9ucyhuKTt2YXIgcj10aGlzLl9nZXRNb2RlKG4pLGk9dGhpcy5fZ2V0UGFkZGVkS2V5KHR8fHRoaXMuX2NvbmZpZy5jaXBoZXJLZXksbik7aWYodGhpcy5fY29uZmlnLnVzZVJhbmRvbUlWcyl7dmFyIG89dGhpcy5fZ2V0UmFuZG9tSVYoKSxzPVAuQUVTLmVuY3J5cHQoZSxpLHtpdjpvLG1vZGU6cn0pLmNpcGhlcnRleHQ7cmV0dXJuIG8uY2xvbmUoKS5jb25jYXQocy5jbG9uZSgpKS50b1N0cmluZyhQLmVuYy5CYXNlNjQpfXZhciBhPXRoaXMuX2dldElWKG4pO3JldHVybiBQLkFFUy5lbmNyeXB0KGUsaSx7aXY6YSxtb2RlOnJ9KS5jaXBoZXJ0ZXh0LnRvU3RyaW5nKFAuZW5jLkJhc2U2NCl8fGV9LGUucHJvdG90eXBlLnBuRGVjcnlwdD1mdW5jdGlvbihlLHQsbil7aWYoIXQmJiF0aGlzLl9jb25maWcuY2lwaGVyS2V5KXJldHVybiBlO249dGhpcy5fcGFyc2VPcHRpb25zKG4pO3ZhciByPXRoaXMuX2dldE1vZGUobiksaT10aGlzLl9nZXRQYWRkZWRLZXkodHx8dGhpcy5fY29uZmlnLmNpcGhlcktleSxuKTtpZih0aGlzLl9jb25maWcudXNlUmFuZG9tSVZzKXt2YXIgbz1TKCh1PUJ1ZmZlci5mcm9tKGUsXCJiYXNlNjRcIikpLnNsaWNlKDAsMTYpKSxzPVModS5zbGljZSgxNikpO3RyeXt2YXIgYT1QLkFFUy5kZWNyeXB0KHtjaXBoZXJ0ZXh0OnN9LGkse2l2Om8sbW9kZTpyfSkudG9TdHJpbmcoUC5lbmMuVXRmOCk7cmV0dXJuIEpTT04ucGFyc2UoYSl9Y2F0Y2goZSl7cmV0dXJuIG51bGx9fWVsc2V7bz10aGlzLl9nZXRJVihuKTt0cnl7dmFyIHU9UC5lbmMuQmFzZTY0LnBhcnNlKGUpO2E9UC5BRVMuZGVjcnlwdCh7Y2lwaGVydGV4dDp1fSxpLHtpdjpvLG1vZGU6cn0pLnRvU3RyaW5nKFAuZW5jLlV0ZjgpO3JldHVybiBKU09OLnBhcnNlKGEpfWNhdGNoKGUpe3JldHVybiBudWxsfX19LGV9KCksVD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9ZS50aW1lRW5kcG9pbnQ7dGhpcy5fdGltZUVuZHBvaW50PXR9cmV0dXJuIGUucHJvdG90eXBlLm9uUmVjb25uZWN0aW9uPWZ1bmN0aW9uKGUpe3RoaXMuX3JlY29ubmVjdGlvbkNhbGxiYWNrPWV9LGUucHJvdG90eXBlLnN0YXJ0UG9sbGluZz1mdW5jdGlvbigpe3RoaXMuX3RpbWVUaW1lcj1zZXRJbnRlcnZhbCh0aGlzLl9wZXJmb3JtVGltZUxvb3AuYmluZCh0aGlzKSwzZTMpfSxlLnByb3RvdHlwZS5zdG9wUG9sbGluZz1mdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwodGhpcy5fdGltZVRpbWVyKX0sZS5wcm90b3R5cGUuX3BlcmZvcm1UaW1lTG9vcD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fdGltZUVuZHBvaW50KChmdW5jdGlvbih0KXt0LmVycm9yfHwoY2xlYXJJbnRlcnZhbChlLl90aW1lVGltZXIpLGUuX3JlY29ubmVjdGlvbkNhbGxiYWNrKCkpfSkpfSxlfSgpLGs9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PWUuY29uZmlnO3RoaXMuaGFzaEhpc3Rvcnk9W10sdGhpcy5fY29uZmlnPXR9cmV0dXJuIGUucHJvdG90eXBlLmdldEtleT1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbihlKXt2YXIgdD0wO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gdDtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rPTEpdD0odDw8NSktdCtlLmNoYXJDb2RlQXQobiksdCY9dDtyZXR1cm4gdH0oSlNPTi5zdHJpbmdpZnkoZS5wYXlsb2FkKSkudG9TdHJpbmcoKSxuPWUucHVibGlzaE1ldGFEYXRhLnB1Ymxpc2hUaW1ldG9rZW47cmV0dXJuXCJcIi5jb25jYXQobixcIi1cIikuY29uY2F0KHQpfSxlLnByb3RvdHlwZS5pc0R1cGxpY2F0ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5oYXNoSGlzdG9yeS5pbmNsdWRlcyh0aGlzLmdldEtleShlKSl9LGUucHJvdG90eXBlLmFkZEVudHJ5PWZ1bmN0aW9uKGUpe3RoaXMuaGFzaEhpc3RvcnkubGVuZ3RoPj10aGlzLl9jb25maWcubWF4aW11bUNhY2hlU2l6ZSYmdGhpcy5oYXNoSGlzdG9yeS5zaGlmdCgpLHRoaXMuaGFzaEhpc3RvcnkucHVzaCh0aGlzLmdldEtleShlKSl9LGUucHJvdG90eXBlLmNsZWFySGlzdG9yeT1mdW5jdGlvbigpe3RoaXMuaGFzaEhpc3Rvcnk9W119LGV9KCk7ZnVuY3Rpb24gTihlKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGUpLnJlcGxhY2UoL1shfionKCldL2csKGZ1bmN0aW9uKGUpe3JldHVyblwiJVwiLmNvbmNhdChlLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpfSkpfWZ1bmN0aW9uIEMoZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdC5wdXNoKGUpfSkpLHR9KGUpLnNvcnQoKX12YXIgRT17c2lnblBhbUZyb21QYXJhbXM6ZnVuY3Rpb24oZSl7cmV0dXJuIEMoZSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cIlwiLmNvbmNhdCh0LFwiPVwiKS5jb25jYXQoTihlW3RdKSl9KSkuam9pbihcIiZcIil9LGVuZHNXaXRoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuLTEhPT1lLmluZGV4T2YodCx0aGlzLmxlbmd0aC10Lmxlbmd0aCl9LGNyZWF0ZVByb21pc2U6ZnVuY3Rpb24oKXt2YXIgZSx0O3JldHVybntwcm9taXNlOm5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe2U9bix0PXJ9KSkscmVqZWN0OnQsZnVsZmlsbDplfX0sZW5jb2RlU3RyaW5nOk59LEE9e1BOTmV0d29ya1VwQ2F0ZWdvcnk6XCJQTk5ldHdvcmtVcENhdGVnb3J5XCIsUE5OZXR3b3JrRG93bkNhdGVnb3J5OlwiUE5OZXR3b3JrRG93bkNhdGVnb3J5XCIsUE5OZXR3b3JrSXNzdWVzQ2F0ZWdvcnk6XCJQTk5ldHdvcmtJc3N1ZXNDYXRlZ29yeVwiLFBOVGltZW91dENhdGVnb3J5OlwiUE5UaW1lb3V0Q2F0ZWdvcnlcIixQTkJhZFJlcXVlc3RDYXRlZ29yeTpcIlBOQmFkUmVxdWVzdENhdGVnb3J5XCIsUE5BY2Nlc3NEZW5pZWRDYXRlZ29yeTpcIlBOQWNjZXNzRGVuaWVkQ2F0ZWdvcnlcIixQTlVua25vd25DYXRlZ29yeTpcIlBOVW5rbm93bkNhdGVnb3J5XCIsUE5SZWNvbm5lY3RlZENhdGVnb3J5OlwiUE5SZWNvbm5lY3RlZENhdGVnb3J5XCIsUE5Db25uZWN0ZWRDYXRlZ29yeTpcIlBOQ29ubmVjdGVkQ2F0ZWdvcnlcIixQTlJlcXVlc3RNZXNzYWdlQ291bnRFeGNlZWRlZENhdGVnb3J5OlwiUE5SZXF1ZXN0TWVzc2FnZUNvdW50RXhjZWVkZWRDYXRlZ29yeVwifSxNPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1lLnN1YnNjcmliZUVuZHBvaW50LG49ZS5sZWF2ZUVuZHBvaW50LHI9ZS5oZWFydGJlYXRFbmRwb2ludCxpPWUuc2V0U3RhdGVFbmRwb2ludCxvPWUudGltZUVuZHBvaW50LHM9ZS5nZXRGaWxlVXJsLGE9ZS5jb25maWcsdT1lLmNyeXB0byxjPWUubGlzdGVuZXJNYW5hZ2VyO3RoaXMuX2xpc3RlbmVyTWFuYWdlcj1jLHRoaXMuX2NvbmZpZz1hLHRoaXMuX2xlYXZlRW5kcG9pbnQ9bix0aGlzLl9oZWFydGJlYXRFbmRwb2ludD1yLHRoaXMuX3NldFN0YXRlRW5kcG9pbnQ9aSx0aGlzLl9zdWJzY3JpYmVFbmRwb2ludD10LHRoaXMuX2dldEZpbGVVcmw9cyx0aGlzLl9jcnlwdG89dSx0aGlzLl9jaGFubmVscz17fSx0aGlzLl9wcmVzZW5jZUNoYW5uZWxzPXt9LHRoaXMuX2hlYXJ0YmVhdENoYW5uZWxzPXt9LHRoaXMuX2hlYXJ0YmVhdENoYW5uZWxHcm91cHM9e30sdGhpcy5fY2hhbm5lbEdyb3Vwcz17fSx0aGlzLl9wcmVzZW5jZUNoYW5uZWxHcm91cHM9e30sdGhpcy5fcGVuZGluZ0NoYW5uZWxTdWJzY3JpcHRpb25zPVtdLHRoaXMuX3BlbmRpbmdDaGFubmVsR3JvdXBTdWJzY3JpcHRpb25zPVtdLHRoaXMuX2N1cnJlbnRUaW1ldG9rZW49MCx0aGlzLl9sYXN0VGltZXRva2VuPTAsdGhpcy5fc3RvcmVkVGltZXRva2VuPW51bGwsdGhpcy5fc3Vic2NyaXB0aW9uU3RhdHVzQW5ub3VuY2VkPSExLHRoaXMuX2lzT25saW5lPSEwLHRoaXMuX3JlY29ubmVjdGlvbk1hbmFnZXI9bmV3IFQoe3RpbWVFbmRwb2ludDpvfSksdGhpcy5fZGVkdXBpbmdNYW5hZ2VyPW5ldyBrKHtjb25maWc6YX0pfXJldHVybiBlLnByb3RvdHlwZS5hZGFwdFN0YXRlQ2hhbmdlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxyPWUuc3RhdGUsaT1lLmNoYW5uZWxzLG89dm9pZCAwPT09aT9bXTppLHM9ZS5jaGFubmVsR3JvdXBzLGE9dm9pZCAwPT09cz9bXTpzO3JldHVybiBvLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UgaW4gbi5fY2hhbm5lbHMmJihuLl9jaGFubmVsc1tlXS5zdGF0ZT1yKX0pKSxhLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UgaW4gbi5fY2hhbm5lbEdyb3VwcyYmKG4uX2NoYW5uZWxHcm91cHNbZV0uc3RhdGU9cil9KSksdGhpcy5fc2V0U3RhdGVFbmRwb2ludCh7c3RhdGU6cixjaGFubmVsczpvLGNoYW5uZWxHcm91cHM6YX0sdCl9LGUucHJvdG90eXBlLmFkYXB0UHJlc2VuY2VDaGFuZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuY29ubmVjdGVkLHI9ZS5jaGFubmVscyxpPXZvaWQgMD09PXI/W106cixvPWUuY2hhbm5lbEdyb3VwcyxzPXZvaWQgMD09PW8/W106bztuPyhpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuX2hlYXJ0YmVhdENoYW5uZWxzW2VdPXtzdGF0ZTp7fX19KSkscy5mb3JFYWNoKChmdW5jdGlvbihlKXt0Ll9oZWFydGJlYXRDaGFubmVsR3JvdXBzW2VdPXtzdGF0ZTp7fX19KSkpOihpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UgaW4gdC5faGVhcnRiZWF0Q2hhbm5lbHMmJmRlbGV0ZSB0Ll9oZWFydGJlYXRDaGFubmVsc1tlXX0pKSxzLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UgaW4gdC5faGVhcnRiZWF0Q2hhbm5lbEdyb3VwcyYmZGVsZXRlIHQuX2hlYXJ0YmVhdENoYW5uZWxHcm91cHNbZV19KSksITE9PT10aGlzLl9jb25maWcuc3VwcHJlc3NMZWF2ZUV2ZW50cyYmdGhpcy5fbGVhdmVFbmRwb2ludCh7Y2hhbm5lbHM6aSxjaGFubmVsR3JvdXBzOnN9LChmdW5jdGlvbihlKXt0Ll9saXN0ZW5lck1hbmFnZXIuYW5ub3VuY2VTdGF0dXMoZSl9KSkpLHRoaXMucmVjb25uZWN0KCl9LGUucHJvdG90eXBlLmFkYXB0U3Vic2NyaWJlQ2hhbmdlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLnRpbWV0b2tlbixyPWUuY2hhbm5lbHMsaT12b2lkIDA9PT1yP1tdOnIsbz1lLmNoYW5uZWxHcm91cHMscz12b2lkIDA9PT1vP1tdOm8sYT1lLndpdGhQcmVzZW5jZSx1PXZvaWQgMCE9PWEmJmEsYz1lLndpdGhIZWFydGJlYXRzLGw9dm9pZCAwIT09YyYmYzt0aGlzLl9jb25maWcuc3Vic2NyaWJlS2V5JiZcIlwiIT09dGhpcy5fY29uZmlnLnN1YnNjcmliZUtleT8obiYmKHRoaXMuX2xhc3RUaW1ldG9rZW49dGhpcy5fY3VycmVudFRpbWV0b2tlbix0aGlzLl9jdXJyZW50VGltZXRva2VuPW4pLFwiMFwiIT09dGhpcy5fY3VycmVudFRpbWV0b2tlbiYmMCE9PXRoaXMuX2N1cnJlbnRUaW1ldG9rZW4mJih0aGlzLl9zdG9yZWRUaW1ldG9rZW49dGhpcy5fY3VycmVudFRpbWV0b2tlbix0aGlzLl9jdXJyZW50VGltZXRva2VuPTApLGkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5fY2hhbm5lbHNbZV09e3N0YXRlOnt9fSx1JiYodC5fcHJlc2VuY2VDaGFubmVsc1tlXT17fSksKGx8fHQuX2NvbmZpZy5nZXRIZWFydGJlYXRJbnRlcnZhbCgpKSYmKHQuX2hlYXJ0YmVhdENoYW5uZWxzW2VdPXt9KSx0Ll9wZW5kaW5nQ2hhbm5lbFN1YnNjcmlwdGlvbnMucHVzaChlKX0pKSxzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuX2NoYW5uZWxHcm91cHNbZV09e3N0YXRlOnt9fSx1JiYodC5fcHJlc2VuY2VDaGFubmVsR3JvdXBzW2VdPXt9KSwobHx8dC5fY29uZmlnLmdldEhlYXJ0YmVhdEludGVydmFsKCkpJiYodC5faGVhcnRiZWF0Q2hhbm5lbEdyb3Vwc1tlXT17fSksdC5fcGVuZGluZ0NoYW5uZWxHcm91cFN1YnNjcmlwdGlvbnMucHVzaChlKX0pKSx0aGlzLl9zdWJzY3JpcHRpb25TdGF0dXNBbm5vdW5jZWQ9ITEsdGhpcy5yZWNvbm5lY3QoKSk6Y29uc29sZSYmY29uc29sZS5sb2cmJmNvbnNvbGUubG9nKFwic3Vic2NyaWJlIGtleSBtaXNzaW5nOyBhYm9ydGluZyBzdWJzY3JpYmVcIil9LGUucHJvdG90eXBlLmFkYXB0VW5zdWJzY3JpYmVDaGFuZ2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLHI9ZS5jaGFubmVscyxpPXZvaWQgMD09PXI/W106cixvPWUuY2hhbm5lbEdyb3VwcyxzPXZvaWQgMD09PW8/W106byxhPVtdLHU9W107aS5mb3JFYWNoKChmdW5jdGlvbihlKXtlIGluIG4uX2NoYW5uZWxzJiYoZGVsZXRlIG4uX2NoYW5uZWxzW2VdLGEucHVzaChlKSxlIGluIG4uX2hlYXJ0YmVhdENoYW5uZWxzJiZkZWxldGUgbi5faGVhcnRiZWF0Q2hhbm5lbHNbZV0pLGUgaW4gbi5fcHJlc2VuY2VDaGFubmVscyYmKGRlbGV0ZSBuLl9wcmVzZW5jZUNoYW5uZWxzW2VdLGEucHVzaChlKSl9KSkscy5mb3JFYWNoKChmdW5jdGlvbihlKXtlIGluIG4uX2NoYW5uZWxHcm91cHMmJihkZWxldGUgbi5fY2hhbm5lbEdyb3Vwc1tlXSx1LnB1c2goZSksZSBpbiBuLl9oZWFydGJlYXRDaGFubmVsR3JvdXBzJiZkZWxldGUgbi5faGVhcnRiZWF0Q2hhbm5lbEdyb3Vwc1tlXSksZSBpbiBuLl9wcmVzZW5jZUNoYW5uZWxHcm91cHMmJihkZWxldGUgbi5fcHJlc2VuY2VDaGFubmVsR3JvdXBzW2VdLHUucHVzaChlKSl9KSksMD09PWEubGVuZ3RoJiYwPT09dS5sZW5ndGh8fCghMSE9PXRoaXMuX2NvbmZpZy5zdXBwcmVzc0xlYXZlRXZlbnRzfHx0fHx0aGlzLl9sZWF2ZUVuZHBvaW50KHtjaGFubmVsczphLGNoYW5uZWxHcm91cHM6dX0sKGZ1bmN0aW9uKGUpe2UuYWZmZWN0ZWRDaGFubmVscz1hLGUuYWZmZWN0ZWRDaGFubmVsR3JvdXBzPXUsZS5jdXJyZW50VGltZXRva2VuPW4uX2N1cnJlbnRUaW1ldG9rZW4sZS5sYXN0VGltZXRva2VuPW4uX2xhc3RUaW1ldG9rZW4sbi5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlU3RhdHVzKGUpfSkpLDA9PT1PYmplY3Qua2V5cyh0aGlzLl9jaGFubmVscykubGVuZ3RoJiYwPT09T2JqZWN0LmtleXModGhpcy5fcHJlc2VuY2VDaGFubmVscykubGVuZ3RoJiYwPT09T2JqZWN0LmtleXModGhpcy5fY2hhbm5lbEdyb3VwcykubGVuZ3RoJiYwPT09T2JqZWN0LmtleXModGhpcy5fcHJlc2VuY2VDaGFubmVsR3JvdXBzKS5sZW5ndGgmJih0aGlzLl9sYXN0VGltZXRva2VuPTAsdGhpcy5fY3VycmVudFRpbWV0b2tlbj0wLHRoaXMuX3N0b3JlZFRpbWV0b2tlbj1udWxsLHRoaXMuX3JlZ2lvbj1udWxsLHRoaXMuX3JlY29ubmVjdGlvbk1hbmFnZXIuc3RvcFBvbGxpbmcoKSksdGhpcy5yZWNvbm5lY3QoKSl9LGUucHJvdG90eXBlLnVuc3Vic2NyaWJlQWxsPWZ1bmN0aW9uKGUpe3RoaXMuYWRhcHRVbnN1YnNjcmliZUNoYW5nZSh7Y2hhbm5lbHM6dGhpcy5nZXRTdWJzY3JpYmVkQ2hhbm5lbHMoKSxjaGFubmVsR3JvdXBzOnRoaXMuZ2V0U3Vic2NyaWJlZENoYW5uZWxHcm91cHMoKX0sZSl9LGUucHJvdG90eXBlLmdldEhlYXJ0YmVhdENoYW5uZWxzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2hlYXJ0YmVhdENoYW5uZWxzKX0sZS5wcm90b3R5cGUuZ2V0SGVhcnRiZWF0Q2hhbm5lbEdyb3Vwcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLl9oZWFydGJlYXRDaGFubmVsR3JvdXBzKX0sZS5wcm90b3R5cGUuZ2V0U3Vic2NyaWJlZENoYW5uZWxzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2NoYW5uZWxzKX0sZS5wcm90b3R5cGUuZ2V0U3Vic2NyaWJlZENoYW5uZWxHcm91cHM9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5fY2hhbm5lbEdyb3Vwcyl9LGUucHJvdG90eXBlLnJlY29ubmVjdD1mdW5jdGlvbigpe3RoaXMuX3N0YXJ0U3Vic2NyaWJlTG9vcCgpLHRoaXMuX3JlZ2lzdGVySGVhcnRiZWF0VGltZXIoKX0sZS5wcm90b3R5cGUuZGlzY29ubmVjdD1mdW5jdGlvbigpe3RoaXMuX3N0b3BTdWJzY3JpYmVMb29wKCksdGhpcy5fc3RvcEhlYXJ0YmVhdFRpbWVyKCksdGhpcy5fcmVjb25uZWN0aW9uTWFuYWdlci5zdG9wUG9sbGluZygpfSxlLnByb3RvdHlwZS5fcmVnaXN0ZXJIZWFydGJlYXRUaW1lcj1mdW5jdGlvbigpe3RoaXMuX3N0b3BIZWFydGJlYXRUaW1lcigpLDAhPT10aGlzLl9jb25maWcuZ2V0SGVhcnRiZWF0SW50ZXJ2YWwoKSYmdm9pZCAwIT09dGhpcy5fY29uZmlnLmdldEhlYXJ0YmVhdEludGVydmFsKCkmJih0aGlzLl9wZXJmb3JtSGVhcnRiZWF0TG9vcCgpLHRoaXMuX2hlYXJ0YmVhdFRpbWVyPXNldEludGVydmFsKHRoaXMuX3BlcmZvcm1IZWFydGJlYXRMb29wLmJpbmQodGhpcyksMWUzKnRoaXMuX2NvbmZpZy5nZXRIZWFydGJlYXRJbnRlcnZhbCgpKSl9LGUucHJvdG90eXBlLl9zdG9wSGVhcnRiZWF0VGltZXI9ZnVuY3Rpb24oKXt0aGlzLl9oZWFydGJlYXRUaW1lciYmKGNsZWFySW50ZXJ2YWwodGhpcy5faGVhcnRiZWF0VGltZXIpLHRoaXMuX2hlYXJ0YmVhdFRpbWVyPW51bGwpfSxlLnByb3RvdHlwZS5fcGVyZm9ybUhlYXJ0YmVhdExvb3A9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5nZXRIZWFydGJlYXRDaGFubmVscygpLG49dGhpcy5nZXRIZWFydGJlYXRDaGFubmVsR3JvdXBzKCkscj17fTtpZigwIT09dC5sZW5ndGh8fDAhPT1uLmxlbmd0aCl7dGhpcy5nZXRTdWJzY3JpYmVkQ2hhbm5lbHMoKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1lLl9jaGFubmVsc1t0XS5zdGF0ZTtPYmplY3Qua2V5cyhuKS5sZW5ndGgmJihyW3RdPW4pfSkpLHRoaXMuZ2V0U3Vic2NyaWJlZENoYW5uZWxHcm91cHMoKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1lLl9jaGFubmVsR3JvdXBzW3RdLnN0YXRlO09iamVjdC5rZXlzKG4pLmxlbmd0aCYmKHJbdF09bil9KSk7dGhpcy5faGVhcnRiZWF0RW5kcG9pbnQoe2NoYW5uZWxzOnQsY2hhbm5lbEdyb3VwczpuLHN0YXRlOnJ9LGZ1bmN0aW9uKHQpe3QuZXJyb3ImJmUuX2NvbmZpZy5hbm5vdW5jZUZhaWxlZEhlYXJ0YmVhdHMmJmUuX2xpc3RlbmVyTWFuYWdlci5hbm5vdW5jZVN0YXR1cyh0KSx0LmVycm9yJiZlLl9jb25maWcuYXV0b05ldHdvcmtEZXRlY3Rpb24mJmUuX2lzT25saW5lJiYoZS5faXNPbmxpbmU9ITEsZS5kaXNjb25uZWN0KCksZS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlTmV0d29ya0Rvd24oKSxlLnJlY29ubmVjdCgpKSwhdC5lcnJvciYmZS5fY29uZmlnLmFubm91bmNlU3VjY2Vzc2Z1bEhlYXJ0YmVhdHMmJmUuX2xpc3RlbmVyTWFuYWdlci5hbm5vdW5jZVN0YXR1cyh0KX0uYmluZCh0aGlzKSl9fSxlLnByb3RvdHlwZS5fc3RhcnRTdWJzY3JpYmVMb29wPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9zdG9wU3Vic2NyaWJlTG9vcCgpO3ZhciB0PXt9LG49W10scj1bXTtpZihPYmplY3Qua2V5cyh0aGlzLl9jaGFubmVscykuZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIGk9ZS5fY2hhbm5lbHNbcl0uc3RhdGU7T2JqZWN0LmtleXMoaSkubGVuZ3RoJiYodFtyXT1pKSxuLnB1c2gocil9KSksT2JqZWN0LmtleXModGhpcy5fcHJlc2VuY2VDaGFubmVscykuZm9yRWFjaCgoZnVuY3Rpb24oZSl7bi5wdXNoKFwiXCIuY29uY2F0KGUsXCItcG5wcmVzXCIpKX0pKSxPYmplY3Qua2V5cyh0aGlzLl9jaGFubmVsR3JvdXBzKS5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgaT1lLl9jaGFubmVsR3JvdXBzW25dLnN0YXRlO09iamVjdC5rZXlzKGkpLmxlbmd0aCYmKHRbbl09aSksci5wdXNoKG4pfSkpLE9iamVjdC5rZXlzKHRoaXMuX3ByZXNlbmNlQ2hhbm5lbEdyb3VwcykuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ci5wdXNoKFwiXCIuY29uY2F0KGUsXCItcG5wcmVzXCIpKX0pKSwwIT09bi5sZW5ndGh8fDAhPT1yLmxlbmd0aCl7dmFyIGk9e2NoYW5uZWxzOm4sY2hhbm5lbEdyb3VwczpyLHN0YXRlOnQsdGltZXRva2VuOnRoaXMuX2N1cnJlbnRUaW1ldG9rZW4sZmlsdGVyRXhwcmVzc2lvbjp0aGlzLl9jb25maWcuZmlsdGVyRXhwcmVzc2lvbixyZWdpb246dGhpcy5fcmVnaW9ufTt0aGlzLl9zdWJzY3JpYmVDYWxsPXRoaXMuX3N1YnNjcmliZUVuZHBvaW50KGksdGhpcy5fcHJvY2Vzc1N1YnNjcmliZVJlc3BvbnNlLmJpbmQodGhpcykpfX0sZS5wcm90b3R5cGUuX3Byb2Nlc3NTdWJzY3JpYmVSZXNwb25zZT1mdW5jdGlvbihlLHQpe3ZhciBpPXRoaXM7aWYoZS5lcnJvcil7aWYoZS5lcnJvckRhdGEmJlwiQWJvcnRlZFwiPT09ZS5lcnJvckRhdGEubWVzc2FnZSlyZXR1cm47ZS5jYXRlZ29yeT09PUEuUE5UaW1lb3V0Q2F0ZWdvcnk/dGhpcy5fc3RhcnRTdWJzY3JpYmVMb29wKCk6ZS5jYXRlZ29yeT09PUEuUE5OZXR3b3JrSXNzdWVzQ2F0ZWdvcnk/KHRoaXMuZGlzY29ubmVjdCgpLGUuZXJyb3ImJnRoaXMuX2NvbmZpZy5hdXRvTmV0d29ya0RldGVjdGlvbiYmdGhpcy5faXNPbmxpbmUmJih0aGlzLl9pc09ubGluZT0hMSx0aGlzLl9saXN0ZW5lck1hbmFnZXIuYW5ub3VuY2VOZXR3b3JrRG93bigpKSx0aGlzLl9yZWNvbm5lY3Rpb25NYW5hZ2VyLm9uUmVjb25uZWN0aW9uKChmdW5jdGlvbigpe2kuX2NvbmZpZy5hdXRvTmV0d29ya0RldGVjdGlvbiYmIWkuX2lzT25saW5lJiYoaS5faXNPbmxpbmU9ITAsaS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlTmV0d29ya1VwKCkpLGkucmVjb25uZWN0KCksaS5fc3Vic2NyaXB0aW9uU3RhdHVzQW5ub3VuY2VkPSEwO3ZhciB0PXtjYXRlZ29yeTpBLlBOUmVjb25uZWN0ZWRDYXRlZ29yeSxvcGVyYXRpb246ZS5vcGVyYXRpb24sbGFzdFRpbWV0b2tlbjppLl9sYXN0VGltZXRva2VuLGN1cnJlbnRUaW1ldG9rZW46aS5fY3VycmVudFRpbWV0b2tlbn07aS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlU3RhdHVzKHQpfSkpLHRoaXMuX3JlY29ubmVjdGlvbk1hbmFnZXIuc3RhcnRQb2xsaW5nKCksdGhpcy5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlU3RhdHVzKGUpKTplLmNhdGVnb3J5PT09QS5QTkJhZFJlcXVlc3RDYXRlZ29yeT8odGhpcy5fc3RvcEhlYXJ0YmVhdFRpbWVyKCksdGhpcy5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlU3RhdHVzKGUpKTp0aGlzLl9saXN0ZW5lck1hbmFnZXIuYW5ub3VuY2VTdGF0dXMoZSl9ZWxzZXtpZih0aGlzLl9zdG9yZWRUaW1ldG9rZW4/KHRoaXMuX2N1cnJlbnRUaW1ldG9rZW49dGhpcy5fc3RvcmVkVGltZXRva2VuLHRoaXMuX3N0b3JlZFRpbWV0b2tlbj1udWxsKToodGhpcy5fbGFzdFRpbWV0b2tlbj10aGlzLl9jdXJyZW50VGltZXRva2VuLHRoaXMuX2N1cnJlbnRUaW1ldG9rZW49dC5tZXRhZGF0YS50aW1ldG9rZW4pLCF0aGlzLl9zdWJzY3JpcHRpb25TdGF0dXNBbm5vdW5jZWQpe3ZhciBvPXt9O28uY2F0ZWdvcnk9QS5QTkNvbm5lY3RlZENhdGVnb3J5LG8ub3BlcmF0aW9uPWUub3BlcmF0aW9uLG8uYWZmZWN0ZWRDaGFubmVscz10aGlzLl9wZW5kaW5nQ2hhbm5lbFN1YnNjcmlwdGlvbnMsby5zdWJzY3JpYmVkQ2hhbm5lbHM9dGhpcy5nZXRTdWJzY3JpYmVkQ2hhbm5lbHMoKSxvLmFmZmVjdGVkQ2hhbm5lbEdyb3Vwcz10aGlzLl9wZW5kaW5nQ2hhbm5lbEdyb3VwU3Vic2NyaXB0aW9ucyxvLmxhc3RUaW1ldG9rZW49dGhpcy5fbGFzdFRpbWV0b2tlbixvLmN1cnJlbnRUaW1ldG9rZW49dGhpcy5fY3VycmVudFRpbWV0b2tlbix0aGlzLl9zdWJzY3JpcHRpb25TdGF0dXNBbm5vdW5jZWQ9ITAsdGhpcy5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlU3RhdHVzKG8pLHRoaXMuX3BlbmRpbmdDaGFubmVsU3Vic2NyaXB0aW9ucz1bXSx0aGlzLl9wZW5kaW5nQ2hhbm5lbEdyb3VwU3Vic2NyaXB0aW9ucz1bXX12YXIgcz10Lm1lc3NhZ2VzfHxbXSxhPXRoaXMuX2NvbmZpZyx1PWEucmVxdWVzdE1lc3NhZ2VDb3VudFRocmVzaG9sZCxjPWEuZGVkdXBlT25TdWJzY3JpYmU7aWYodSYmcy5sZW5ndGg+PXUpe3ZhciBsPXt9O2wuY2F0ZWdvcnk9QS5QTlJlcXVlc3RNZXNzYWdlQ291bnRFeGNlZWRlZENhdGVnb3J5LGwub3BlcmF0aW9uPWUub3BlcmF0aW9uLHRoaXMuX2xpc3RlbmVyTWFuYWdlci5hbm5vdW5jZVN0YXR1cyhsKX1zLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhbm5lbCxvPWUuc3Vic2NyaXB0aW9uTWF0Y2gscz1lLnB1Ymxpc2hNZXRhRGF0YTtpZih0PT09byYmKG89bnVsbCksYyl7aWYoaS5fZGVkdXBpbmdNYW5hZ2VyLmlzRHVwbGljYXRlKGUpKXJldHVybjtpLl9kZWR1cGluZ01hbmFnZXIuYWRkRW50cnkoZSl9aWYoRS5lbmRzV2l0aChlLmNoYW5uZWwsXCItcG5wcmVzXCIpKShnPXtjaGFubmVsOm51bGwsc3Vic2NyaXB0aW9uOm51bGx9KS5hY3R1YWxDaGFubmVsPW51bGwhPW8/dDpudWxsLGcuc3Vic2NyaWJlZENoYW5uZWw9bnVsbCE9bz9vOnQsdCYmKGcuY2hhbm5lbD10LnN1YnN0cmluZygwLHQubGFzdEluZGV4T2YoXCItcG5wcmVzXCIpKSksbyYmKGcuc3Vic2NyaXB0aW9uPW8uc3Vic3RyaW5nKDAsby5sYXN0SW5kZXhPZihcIi1wbnByZXNcIikpKSxnLmFjdGlvbj1lLnBheWxvYWQuYWN0aW9uLGcuc3RhdGU9ZS5wYXlsb2FkLmRhdGEsZy50aW1ldG9rZW49cy5wdWJsaXNoVGltZXRva2VuLGcub2NjdXBhbmN5PWUucGF5bG9hZC5vY2N1cGFuY3ksZy51dWlkPWUucGF5bG9hZC51dWlkLGcudGltZXN0YW1wPWUucGF5bG9hZC50aW1lc3RhbXAsZS5wYXlsb2FkLmpvaW4mJihnLmpvaW49ZS5wYXlsb2FkLmpvaW4pLGUucGF5bG9hZC5sZWF2ZSYmKGcubGVhdmU9ZS5wYXlsb2FkLmxlYXZlKSxlLnBheWxvYWQudGltZW91dCYmKGcudGltZW91dD1lLnBheWxvYWQudGltZW91dCksaS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlUHJlc2VuY2UoZyk7ZWxzZSBpZigxPT09ZS5tZXNzYWdlVHlwZSl7KGc9e2NoYW5uZWw6bnVsbCxzdWJzY3JpcHRpb246bnVsbH0pLmNoYW5uZWw9dCxnLnN1YnNjcmlwdGlvbj1vLGcudGltZXRva2VuPXMucHVibGlzaFRpbWV0b2tlbixnLnB1Ymxpc2hlcj1lLmlzc3VpbmdDbGllbnRJZCxlLnVzZXJNZXRhZGF0YSYmKGcudXNlck1ldGFkYXRhPWUudXNlck1ldGFkYXRhKSxnLm1lc3NhZ2U9ZS5wYXlsb2FkLGkuX2xpc3RlbmVyTWFuYWdlci5hbm5vdW5jZVNpZ25hbChnKX1lbHNlIGlmKDI9PT1lLm1lc3NhZ2VUeXBlKXtpZigoZz17Y2hhbm5lbDpudWxsLHN1YnNjcmlwdGlvbjpudWxsfSkuY2hhbm5lbD10LGcuc3Vic2NyaXB0aW9uPW8sZy50aW1ldG9rZW49cy5wdWJsaXNoVGltZXRva2VuLGcucHVibGlzaGVyPWUuaXNzdWluZ0NsaWVudElkLGUudXNlck1ldGFkYXRhJiYoZy51c2VyTWV0YWRhdGE9ZS51c2VyTWV0YWRhdGEpLGcubWVzc2FnZT17ZXZlbnQ6ZS5wYXlsb2FkLmV2ZW50LHR5cGU6ZS5wYXlsb2FkLnR5cGUsZGF0YTplLnBheWxvYWQuZGF0YX0saS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlT2JqZWN0cyhnKSxcInV1aWRcIj09PWUucGF5bG9hZC50eXBlKXt2YXIgYT1pLl9yZW5hbWVDaGFubmVsRmllbGQoZyk7aS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlVXNlcihuKG4oe30sYSkse21lc3NhZ2U6bihuKHt9LGEubWVzc2FnZSkse2V2ZW50OmkuX3JlbmFtZUV2ZW50KGEubWVzc2FnZS5ldmVudCksdHlwZTpcInVzZXJcIn0pfSkpfWVsc2UgaWYoXCJjaGFubmVsXCI9PT1lLnBheWxvYWQudHlwZSl7YT1pLl9yZW5hbWVDaGFubmVsRmllbGQoZyk7aS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlU3BhY2UobihuKHt9LGEpLHttZXNzYWdlOm4obih7fSxhLm1lc3NhZ2UpLHtldmVudDppLl9yZW5hbWVFdmVudChhLm1lc3NhZ2UuZXZlbnQpLHR5cGU6XCJzcGFjZVwifSl9KSl9ZWxzZSBpZihcIm1lbWJlcnNoaXBcIj09PWUucGF5bG9hZC50eXBlKXt2YXIgdT0oYT1pLl9yZW5hbWVDaGFubmVsRmllbGQoZykpLm1lc3NhZ2UuZGF0YSxsPXUudXVpZCxwPXUuY2hhbm5lbCxoPXIodSxbXCJ1dWlkXCIsXCJjaGFubmVsXCJdKTtoLnVzZXI9bCxoLnNwYWNlPXAsaS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlTWVtYmVyc2hpcChuKG4oe30sYSkse21lc3NhZ2U6bihuKHt9LGEubWVzc2FnZSkse2V2ZW50OmkuX3JlbmFtZUV2ZW50KGEubWVzc2FnZS5ldmVudCksZGF0YTpofSl9KSl9fWVsc2UgaWYoMz09PWUubWVzc2FnZVR5cGUpeyhnPXt9KS5jaGFubmVsPXQsZy5zdWJzY3JpcHRpb249byxnLnRpbWV0b2tlbj1zLnB1Ymxpc2hUaW1ldG9rZW4sZy5wdWJsaXNoZXI9ZS5pc3N1aW5nQ2xpZW50SWQsZy5kYXRhPXttZXNzYWdlVGltZXRva2VuOmUucGF5bG9hZC5kYXRhLm1lc3NhZ2VUaW1ldG9rZW4sYWN0aW9uVGltZXRva2VuOmUucGF5bG9hZC5kYXRhLmFjdGlvblRpbWV0b2tlbix0eXBlOmUucGF5bG9hZC5kYXRhLnR5cGUsdXVpZDplLmlzc3VpbmdDbGllbnRJZCx2YWx1ZTplLnBheWxvYWQuZGF0YS52YWx1ZX0sZy5ldmVudD1lLnBheWxvYWQuZXZlbnQsaS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlTWVzc2FnZUFjdGlvbihnKX1lbHNlIGlmKDQ9PT1lLm1lc3NhZ2VUeXBlKXsoZz17fSkuY2hhbm5lbD10LGcuc3Vic2NyaXB0aW9uPW8sZy50aW1ldG9rZW49cy5wdWJsaXNoVGltZXRva2VuLGcucHVibGlzaGVyPWUuaXNzdWluZ0NsaWVudElkO3ZhciBmPWUucGF5bG9hZDtpZihpLl9jb25maWcuY2lwaGVyS2V5KXt2YXIgZD1pLl9jcnlwdG8uZGVjcnlwdChlLnBheWxvYWQpO1wib2JqZWN0XCI9PXR5cGVvZiBkJiZudWxsIT09ZCYmKGY9ZCl9ZS51c2VyTWV0YWRhdGEmJihnLnVzZXJNZXRhZGF0YT1lLnVzZXJNZXRhZGF0YSksZy5tZXNzYWdlPWYubWVzc2FnZSxnLmZpbGU9e2lkOmYuZmlsZS5pZCxuYW1lOmYuZmlsZS5uYW1lLHVybDppLl9nZXRGaWxlVXJsKHtpZDpmLmZpbGUuaWQsbmFtZTpmLmZpbGUubmFtZSxjaGFubmVsOnR9KX0saS5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlRmlsZShnKX1lbHNle3ZhciBnOyhnPXtjaGFubmVsOm51bGwsc3Vic2NyaXB0aW9uOm51bGx9KS5hY3R1YWxDaGFubmVsPW51bGwhPW8/dDpudWxsLGcuc3Vic2NyaWJlZENoYW5uZWw9bnVsbCE9bz9vOnQsZy5jaGFubmVsPXQsZy5zdWJzY3JpcHRpb249byxnLnRpbWV0b2tlbj1zLnB1Ymxpc2hUaW1ldG9rZW4sZy5wdWJsaXNoZXI9ZS5pc3N1aW5nQ2xpZW50SWQsZS51c2VyTWV0YWRhdGEmJihnLnVzZXJNZXRhZGF0YT1lLnVzZXJNZXRhZGF0YSksaS5fY29uZmlnLmNpcGhlcktleT9nLm1lc3NhZ2U9aS5fY3J5cHRvLmRlY3J5cHQoZS5wYXlsb2FkKTpnLm1lc3NhZ2U9ZS5wYXlsb2FkLGkuX2xpc3RlbmVyTWFuYWdlci5hbm5vdW5jZU1lc3NhZ2UoZyl9fSkpLHRoaXMuX3JlZ2lvbj10Lm1ldGFkYXRhLnJlZ2lvbix0aGlzLl9zdGFydFN1YnNjcmliZUxvb3AoKX19LGUucHJvdG90eXBlLl9zdG9wU3Vic2NyaWJlTG9vcD1mdW5jdGlvbigpe3RoaXMuX3N1YnNjcmliZUNhbGwmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl9zdWJzY3JpYmVDYWxsLmFib3J0JiZ0aGlzLl9zdWJzY3JpYmVDYWxsLmFib3J0KCksdGhpcy5fc3Vic2NyaWJlQ2FsbD1udWxsKX0sZS5wcm90b3R5cGUuX3JlbmFtZUV2ZW50PWZ1bmN0aW9uKGUpe3JldHVyblwic2V0XCI9PT1lP1widXBkYXRlZFwiOlwicmVtb3ZlZFwifSxlLnByb3RvdHlwZS5fcmVuYW1lQ2hhbm5lbEZpZWxkPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhbm5lbCxuPXIoZSxbXCJjaGFubmVsXCJdKTtyZXR1cm4gbi5zcGFjZUlkPXQsbn0sZX0oKSxqPXtQTlRpbWVPcGVyYXRpb246XCJQTlRpbWVPcGVyYXRpb25cIixQTkhpc3RvcnlPcGVyYXRpb246XCJQTkhpc3RvcnlPcGVyYXRpb25cIixQTkRlbGV0ZU1lc3NhZ2VzT3BlcmF0aW9uOlwiUE5EZWxldGVNZXNzYWdlc09wZXJhdGlvblwiLFBORmV0Y2hNZXNzYWdlc09wZXJhdGlvbjpcIlBORmV0Y2hNZXNzYWdlc09wZXJhdGlvblwiLFBOTWVzc2FnZUNvdW50czpcIlBOTWVzc2FnZUNvdW50c09wZXJhdGlvblwiLFBOU3Vic2NyaWJlT3BlcmF0aW9uOlwiUE5TdWJzY3JpYmVPcGVyYXRpb25cIixQTlVuc3Vic2NyaWJlT3BlcmF0aW9uOlwiUE5VbnN1YnNjcmliZU9wZXJhdGlvblwiLFBOUHVibGlzaE9wZXJhdGlvbjpcIlBOUHVibGlzaE9wZXJhdGlvblwiLFBOU2lnbmFsT3BlcmF0aW9uOlwiUE5TaWduYWxPcGVyYXRpb25cIixQTkFkZE1lc3NhZ2VBY3Rpb25PcGVyYXRpb246XCJQTkFkZEFjdGlvbk9wZXJhdGlvblwiLFBOUmVtb3ZlTWVzc2FnZUFjdGlvbk9wZXJhdGlvbjpcIlBOUmVtb3ZlTWVzc2FnZUFjdGlvbk9wZXJhdGlvblwiLFBOR2V0TWVzc2FnZUFjdGlvbnNPcGVyYXRpb246XCJQTkdldE1lc3NhZ2VBY3Rpb25zT3BlcmF0aW9uXCIsUE5DcmVhdGVVc2VyT3BlcmF0aW9uOlwiUE5DcmVhdGVVc2VyT3BlcmF0aW9uXCIsUE5VcGRhdGVVc2VyT3BlcmF0aW9uOlwiUE5VcGRhdGVVc2VyT3BlcmF0aW9uXCIsUE5EZWxldGVVc2VyT3BlcmF0aW9uOlwiUE5EZWxldGVVc2VyT3BlcmF0aW9uXCIsUE5HZXRVc2VyT3BlcmF0aW9uOlwiUE5HZXRVc2Vyc09wZXJhdGlvblwiLFBOR2V0VXNlcnNPcGVyYXRpb246XCJQTkdldFVzZXJzT3BlcmF0aW9uXCIsUE5DcmVhdGVTcGFjZU9wZXJhdGlvbjpcIlBOQ3JlYXRlU3BhY2VPcGVyYXRpb25cIixQTlVwZGF0ZVNwYWNlT3BlcmF0aW9uOlwiUE5VcGRhdGVTcGFjZU9wZXJhdGlvblwiLFBORGVsZXRlU3BhY2VPcGVyYXRpb246XCJQTkRlbGV0ZVNwYWNlT3BlcmF0aW9uXCIsUE5HZXRTcGFjZU9wZXJhdGlvbjpcIlBOR2V0U3BhY2VzT3BlcmF0aW9uXCIsUE5HZXRTcGFjZXNPcGVyYXRpb246XCJQTkdldFNwYWNlc09wZXJhdGlvblwiLFBOR2V0TWVtYmVyc09wZXJhdGlvbjpcIlBOR2V0TWVtYmVyc09wZXJhdGlvblwiLFBOVXBkYXRlTWVtYmVyc09wZXJhdGlvbjpcIlBOVXBkYXRlTWVtYmVyc09wZXJhdGlvblwiLFBOR2V0TWVtYmVyc2hpcHNPcGVyYXRpb246XCJQTkdldE1lbWJlcnNoaXBzT3BlcmF0aW9uXCIsUE5VcGRhdGVNZW1iZXJzaGlwc09wZXJhdGlvbjpcIlBOVXBkYXRlTWVtYmVyc2hpcHNPcGVyYXRpb25cIixQTkxpc3RGaWxlc09wZXJhdGlvbjpcIlBOTGlzdEZpbGVzT3BlcmF0aW9uXCIsUE5HZW5lcmF0ZVVwbG9hZFVybE9wZXJhdGlvbjpcIlBOR2VuZXJhdGVVcGxvYWRVcmxPcGVyYXRpb25cIixQTlB1Ymxpc2hGaWxlT3BlcmF0aW9uOlwiUE5QdWJsaXNoRmlsZU9wZXJhdGlvblwiLFBOR2V0RmlsZVVybE9wZXJhdGlvbjpcIlBOR2V0RmlsZVVybE9wZXJhdGlvblwiLFBORG93bmxvYWRGaWxlT3BlcmF0aW9uOlwiUE5Eb3dubG9hZEZpbGVPcGVyYXRpb25cIixQTkdldEFsbFVVSURNZXRhZGF0YU9wZXJhdGlvbjpcIlBOR2V0QWxsVVVJRE1ldGFkYXRhT3BlcmF0aW9uXCIsUE5HZXRVVUlETWV0YWRhdGFPcGVyYXRpb246XCJQTkdldFVVSURNZXRhZGF0YU9wZXJhdGlvblwiLFBOU2V0VVVJRE1ldGFkYXRhT3BlcmF0aW9uOlwiUE5TZXRVVUlETWV0YWRhdGFPcGVyYXRpb25cIixQTlJlbW92ZVVVSURNZXRhZGF0YU9wZXJhdGlvbjpcIlBOUmVtb3ZlVVVJRE1ldGFkYXRhT3BlcmF0aW9uXCIsUE5HZXRBbGxDaGFubmVsTWV0YWRhdGFPcGVyYXRpb246XCJQTkdldEFsbENoYW5uZWxNZXRhZGF0YU9wZXJhdGlvblwiLFBOR2V0Q2hhbm5lbE1ldGFkYXRhT3BlcmF0aW9uOlwiUE5HZXRDaGFubmVsTWV0YWRhdGFPcGVyYXRpb25cIixQTlNldENoYW5uZWxNZXRhZGF0YU9wZXJhdGlvbjpcIlBOU2V0Q2hhbm5lbE1ldGFkYXRhT3BlcmF0aW9uXCIsUE5SZW1vdmVDaGFubmVsTWV0YWRhdGFPcGVyYXRpb246XCJQTlJlbW92ZUNoYW5uZWxNZXRhZGF0YU9wZXJhdGlvblwiLFBOU2V0TWVtYmVyc09wZXJhdGlvbjpcIlBOU2V0TWVtYmVyc09wZXJhdGlvblwiLFBOU2V0TWVtYmVyc2hpcHNPcGVyYXRpb246XCJQTlNldE1lbWJlcnNoaXBzT3BlcmF0aW9uXCIsUE5QdXNoTm90aWZpY2F0aW9uRW5hYmxlZENoYW5uZWxzT3BlcmF0aW9uOlwiUE5QdXNoTm90aWZpY2F0aW9uRW5hYmxlZENoYW5uZWxzT3BlcmF0aW9uXCIsUE5SZW1vdmVBbGxQdXNoTm90aWZpY2F0aW9uc09wZXJhdGlvbjpcIlBOUmVtb3ZlQWxsUHVzaE5vdGlmaWNhdGlvbnNPcGVyYXRpb25cIixQTldoZXJlTm93T3BlcmF0aW9uOlwiUE5XaGVyZU5vd09wZXJhdGlvblwiLFBOU2V0U3RhdGVPcGVyYXRpb246XCJQTlNldFN0YXRlT3BlcmF0aW9uXCIsUE5IZXJlTm93T3BlcmF0aW9uOlwiUE5IZXJlTm93T3BlcmF0aW9uXCIsUE5HZXRTdGF0ZU9wZXJhdGlvbjpcIlBOR2V0U3RhdGVPcGVyYXRpb25cIixQTkhlYXJ0YmVhdE9wZXJhdGlvbjpcIlBOSGVhcnRiZWF0T3BlcmF0aW9uXCIsUE5DaGFubmVsR3JvdXBzT3BlcmF0aW9uOlwiUE5DaGFubmVsR3JvdXBzT3BlcmF0aW9uXCIsUE5SZW1vdmVHcm91cE9wZXJhdGlvbjpcIlBOUmVtb3ZlR3JvdXBPcGVyYXRpb25cIixQTkNoYW5uZWxzRm9yR3JvdXBPcGVyYXRpb246XCJQTkNoYW5uZWxzRm9yR3JvdXBPcGVyYXRpb25cIixQTkFkZENoYW5uZWxzVG9Hcm91cE9wZXJhdGlvbjpcIlBOQWRkQ2hhbm5lbHNUb0dyb3VwT3BlcmF0aW9uXCIsUE5SZW1vdmVDaGFubmVsc0Zyb21Hcm91cE9wZXJhdGlvbjpcIlBOUmVtb3ZlQ2hhbm5lbHNGcm9tR3JvdXBPcGVyYXRpb25cIixQTkFjY2Vzc01hbmFnZXJHcmFudDpcIlBOQWNjZXNzTWFuYWdlckdyYW50XCIsUE5BY2Nlc3NNYW5hZ2VyR3JhbnRUb2tlbjpcIlBOQWNjZXNzTWFuYWdlckdyYW50VG9rZW5cIixQTkFjY2Vzc01hbmFnZXJBdWRpdDpcIlBOQWNjZXNzTWFuYWdlckF1ZGl0XCIsUE5BY2Nlc3NNYW5hZ2VyUmV2b2tlVG9rZW46XCJQTkFjY2Vzc01hbmFnZXJSZXZva2VUb2tlblwiLFBOSGFuZHNoYWtlT3BlcmF0aW9uOlwiUE5IYW5kc2hha2VPcGVyYXRpb25cIixQTlJlY2VpdmVNZXNzYWdlc09wZXJhdGlvbjpcIlBOUmVjZWl2ZU1lc3NhZ2VzT3BlcmF0aW9uXCJ9LFI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuX21heGltdW1TYW1wbGVzQ291bnQ9MTAwLHRoaXMuX3RyYWNrZWRMYXRlbmNpZXM9e30sdGhpcy5fbGF0ZW5jaWVzPXt9LHRoaXMuX21heGltdW1TYW1wbGVzQ291bnQ9ZS5tYXhpbXVtU2FtcGxlc0NvdW50fHx0aGlzLl9tYXhpbXVtU2FtcGxlc0NvdW50fXJldHVybiBlLnByb3RvdHlwZS5vcGVyYXRpb25zTGF0ZW5jeUZvclJlcXVlc3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e307cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2xhdGVuY2llcykuZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIHI9ZS5fbGF0ZW5jaWVzW25dLGk9ZS5fYXZlcmFnZUxhdGVuY3kocik7aT4wJiYodFtcImxfXCIuY29uY2F0KG4pXT1pKX0pKSx0fSxlLnByb3RvdHlwZS5zdGFydExhdGVuY3lNZWFzdXJlPWZ1bmN0aW9uKGUsdCl7ZSE9PWouUE5TdWJzY3JpYmVPcGVyYXRpb24mJnQmJih0aGlzLl90cmFja2VkTGF0ZW5jaWVzW3RdPURhdGUubm93KCkpfSxlLnByb3RvdHlwZS5zdG9wTGF0ZW5jeU1lYXN1cmU9ZnVuY3Rpb24oZSx0KXtpZihlIT09ai5QTlN1YnNjcmliZU9wZXJhdGlvbiYmdCl7dmFyIG49dGhpcy5fZW5kcG9pbnROYW1lKGUpLHI9dGhpcy5fbGF0ZW5jaWVzW25dLGk9dGhpcy5fdHJhY2tlZExhdGVuY2llc1t0XTtyfHwodGhpcy5fbGF0ZW5jaWVzW25dPVtdLHI9dGhpcy5fbGF0ZW5jaWVzW25dKSxyLnB1c2goRGF0ZS5ub3coKS1pKSxyLmxlbmd0aD50aGlzLl9tYXhpbXVtU2FtcGxlc0NvdW50JiZyLnNwbGljZSgwLHIubGVuZ3RoLXRoaXMuX21heGltdW1TYW1wbGVzQ291bnQpLGRlbGV0ZSB0aGlzLl90cmFja2VkTGF0ZW5jaWVzW3RdfX0sZS5wcm90b3R5cGUuX2F2ZXJhZ2VMYXRlbmN5PWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmZsb29yKGUucmVkdWNlKChmdW5jdGlvbihlLHQpe3JldHVybiBlK3R9KSwwKS9lLmxlbmd0aCl9LGUucHJvdG90eXBlLl9lbmRwb2ludE5hbWU9ZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbDtzd2l0Y2goZSl7Y2FzZSBqLlBOUHVibGlzaE9wZXJhdGlvbjp0PVwicHViXCI7YnJlYWs7Y2FzZSBqLlBOU2lnbmFsT3BlcmF0aW9uOnQ9XCJzaWdcIjticmVhaztjYXNlIGouUE5IaXN0b3J5T3BlcmF0aW9uOmNhc2Ugai5QTkZldGNoTWVzc2FnZXNPcGVyYXRpb246Y2FzZSBqLlBORGVsZXRlTWVzc2FnZXNPcGVyYXRpb246Y2FzZSBqLlBOTWVzc2FnZUNvdW50czp0PVwiaGlzdFwiO2JyZWFrO2Nhc2Ugai5QTlVuc3Vic2NyaWJlT3BlcmF0aW9uOmNhc2Ugai5QTldoZXJlTm93T3BlcmF0aW9uOmNhc2Ugai5QTkhlcmVOb3dPcGVyYXRpb246Y2FzZSBqLlBOSGVhcnRiZWF0T3BlcmF0aW9uOmNhc2Ugai5QTlNldFN0YXRlT3BlcmF0aW9uOmNhc2Ugai5QTkdldFN0YXRlT3BlcmF0aW9uOnQ9XCJwcmVzXCI7YnJlYWs7Y2FzZSBqLlBOQWRkQ2hhbm5lbHNUb0dyb3VwT3BlcmF0aW9uOmNhc2Ugai5QTlJlbW92ZUNoYW5uZWxzRnJvbUdyb3VwT3BlcmF0aW9uOmNhc2Ugai5QTkNoYW5uZWxHcm91cHNPcGVyYXRpb246Y2FzZSBqLlBOUmVtb3ZlR3JvdXBPcGVyYXRpb246Y2FzZSBqLlBOQ2hhbm5lbHNGb3JHcm91cE9wZXJhdGlvbjp0PVwiY2dcIjticmVhaztjYXNlIGouUE5QdXNoTm90aWZpY2F0aW9uRW5hYmxlZENoYW5uZWxzT3BlcmF0aW9uOmNhc2Ugai5QTlJlbW92ZUFsbFB1c2hOb3RpZmljYXRpb25zT3BlcmF0aW9uOnQ9XCJwdXNoXCI7YnJlYWs7Y2FzZSBqLlBOQ3JlYXRlVXNlck9wZXJhdGlvbjpjYXNlIGouUE5VcGRhdGVVc2VyT3BlcmF0aW9uOmNhc2Ugai5QTkRlbGV0ZVVzZXJPcGVyYXRpb246Y2FzZSBqLlBOR2V0VXNlck9wZXJhdGlvbjpjYXNlIGouUE5HZXRVc2Vyc09wZXJhdGlvbjpjYXNlIGouUE5DcmVhdGVTcGFjZU9wZXJhdGlvbjpjYXNlIGouUE5VcGRhdGVTcGFjZU9wZXJhdGlvbjpjYXNlIGouUE5EZWxldGVTcGFjZU9wZXJhdGlvbjpjYXNlIGouUE5HZXRTcGFjZU9wZXJhdGlvbjpjYXNlIGouUE5HZXRTcGFjZXNPcGVyYXRpb246Y2FzZSBqLlBOR2V0TWVtYmVyc09wZXJhdGlvbjpjYXNlIGouUE5VcGRhdGVNZW1iZXJzT3BlcmF0aW9uOmNhc2Ugai5QTkdldE1lbWJlcnNoaXBzT3BlcmF0aW9uOmNhc2Ugai5QTlVwZGF0ZU1lbWJlcnNoaXBzT3BlcmF0aW9uOnQ9XCJvYmpcIjticmVhaztjYXNlIGouUE5BZGRNZXNzYWdlQWN0aW9uT3BlcmF0aW9uOmNhc2Ugai5QTlJlbW92ZU1lc3NhZ2VBY3Rpb25PcGVyYXRpb246Y2FzZSBqLlBOR2V0TWVzc2FnZUFjdGlvbnNPcGVyYXRpb246dD1cIm1zZ2FcIjticmVhaztjYXNlIGouUE5BY2Nlc3NNYW5hZ2VyR3JhbnQ6Y2FzZSBqLlBOQWNjZXNzTWFuYWdlckF1ZGl0OnQ9XCJwYW1cIjticmVhaztjYXNlIGouUE5BY2Nlc3NNYW5hZ2VyR3JhbnRUb2tlbjpjYXNlIGouUE5BY2Nlc3NNYW5hZ2VyUmV2b2tlVG9rZW46dD1cInBhbXYzXCI7YnJlYWs7ZGVmYXVsdDp0PVwidGltZVwifXJldHVybiB0fSxlfSgpLFU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt0aGlzLl9wYXlsb2FkPWUsdGhpcy5fc2V0RGVmYXVsdFBheWxvYWRTdHJ1Y3R1cmUoKSx0aGlzLnRpdGxlPXQsdGhpcy5ib2R5PW59cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInBheWxvYWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BheWxvYWR9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidGl0bGVcIix7c2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3RpdGxlPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic3VidGl0bGVcIix7c2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3N1YnRpdGxlPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiYm9keVwiLHtzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fYm9keT1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImJhZGdlXCIse3NldDpmdW5jdGlvbihlKXt0aGlzLl9iYWRnZT1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNvdW5kXCIse3NldDpmdW5jdGlvbihlKXt0aGlzLl9zb3VuZD1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLl9zZXREZWZhdWx0UGF5bG9hZFN0cnVjdHVyZT1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oKXtyZXR1cm57fX0sZX0oKSx4PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHIoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiB0KHIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwiY29uZmlndXJhdGlvbnNcIix7c2V0OmZ1bmN0aW9uKGUpe2UmJmUubGVuZ3RoJiYodGhpcy5fY29uZmlndXJhdGlvbnM9ZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwibm90aWZpY2F0aW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wYXlsb2FkLmFwc30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJ0aXRsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGl0bGV9LHNldDpmdW5jdGlvbihlKXtlJiZlLmxlbmd0aCYmKHRoaXMuX3BheWxvYWQuYXBzLmFsZXJ0LnRpdGxlPWUsdGhpcy5fdGl0bGU9ZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwic3VidGl0bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N1YnRpdGxlfSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmZS5sZW5ndGgmJih0aGlzLl9wYXlsb2FkLmFwcy5hbGVydC5zdWJ0aXRsZT1lLHRoaXMuX3N1YnRpdGxlPWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcImJvZHlcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2JvZHl9LHNldDpmdW5jdGlvbihlKXtlJiZlLmxlbmd0aCYmKHRoaXMuX3BheWxvYWQuYXBzLmFsZXJ0LmJvZHk9ZSx0aGlzLl9ib2R5PWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcImJhZGdlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9iYWRnZX0sc2V0OmZ1bmN0aW9uKGUpe251bGwhPWUmJih0aGlzLl9wYXlsb2FkLmFwcy5iYWRnZT1lLHRoaXMuX2JhZGdlPWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcInNvdW5kXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zb3VuZH0sc2V0OmZ1bmN0aW9uKGUpe2UmJmUubGVuZ3RoJiYodGhpcy5fcGF5bG9hZC5hcHMuc291bmQ9ZSx0aGlzLl9zb3VuZD1lKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJzaWxlbnRcIix7c2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2lzU2lsZW50PWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksci5wcm90b3R5cGUuX3NldERlZmF1bHRQYXlsb2FkU3RydWN0dXJlPWZ1bmN0aW9uKCl7dGhpcy5fcGF5bG9hZC5hcHM9e2FsZXJ0Ont9fX0sci5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9bih7fSx0aGlzLl9wYXlsb2FkKSxyPXQuYXBzLGk9ci5hbGVydDtpZih0aGlzLl9pc1NpbGVudCYmKHJbXCJjb250ZW50LWF2YWlsYWJsZVwiXT0xKSxcImFwbnMyXCI9PT10aGlzLl9hcG5zUHVzaFR5cGUpe2lmKCF0aGlzLl9jb25maWd1cmF0aW9uc3x8IXRoaXMuX2NvbmZpZ3VyYXRpb25zLmxlbmd0aCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJBUE5TMiBjb25maWd1cmF0aW9uIGlzIG1pc3NpbmdcIik7dmFyIG89W107dGhpcy5fY29uZmlndXJhdGlvbnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7by5wdXNoKGUuX29iamVjdEZyb21BUE5TMkNvbmZpZ3VyYXRpb24odCkpfSkpLG8ubGVuZ3RoJiYodC5wbl9wdXNoPW8pfXJldHVybiBpJiZPYmplY3Qua2V5cyhpKS5sZW5ndGh8fGRlbGV0ZSByLmFsZXJ0LHRoaXMuX2lzU2lsZW50JiYoZGVsZXRlIHIuYWxlcnQsZGVsZXRlIHIuYmFkZ2UsZGVsZXRlIHIuc291bmQsaT17fSksdGhpcy5faXNTaWxlbnR8fE9iamVjdC5rZXlzKGkpLmxlbmd0aD90Om51bGx9LHIucHJvdG90eXBlLl9vYmplY3RGcm9tQVBOUzJDb25maWd1cmF0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoIWUudGFyZ2V0c3x8IWUudGFyZ2V0cy5sZW5ndGgpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiQXQgbGVhc3Qgb25lIEFQTlMyIHRhcmdldCBzaG91bGQgYmUgcHJvdmlkZWRcIik7dmFyIG49W107ZS50YXJnZXRzLmZvckVhY2goKGZ1bmN0aW9uKGUpe24ucHVzaCh0Ll9vYmplY3RGcm9tQVBOU1RhcmdldChlKSl9KSk7dmFyIHI9ZS5jb2xsYXBzZUlkLGk9ZS5leHBpcmF0aW9uRGF0ZSxvPXthdXRoX21ldGhvZDpcInRva2VuXCIsdGFyZ2V0czpuLHZlcnNpb246XCJ2MlwifTtyZXR1cm4gciYmci5sZW5ndGgmJihvLmNvbGxhcHNlX2lkPXIpLGkmJihvLmV4cGlyYXRpb249aS50b0lTT1N0cmluZygpKSxvfSxyLnByb3RvdHlwZS5fb2JqZWN0RnJvbUFQTlNUYXJnZXQ9ZnVuY3Rpb24oZSl7aWYoIWUudG9waWN8fCFlLnRvcGljLmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGFyZ2V0ICd0b3BpYycgdW5kZWZpbmVkLlwiKTt2YXIgdD1lLnRvcGljLG49ZS5lbnZpcm9ubWVudCxyPXZvaWQgMD09PW4/XCJkZXZlbG9wbWVudFwiOm4saT1lLmV4Y2x1ZGVkRGV2aWNlcyxvPXZvaWQgMD09PWk/W106aSxzPXt0b3BpYzp0LGVudmlyb25tZW50OnJ9O3JldHVybiBvLmxlbmd0aCYmKHMuZXhjbHVkZWRfZGV2aWNlcz1vKSxzfSxyfShVKSxEPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHIoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiB0KHIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwiYmFja0NvbnRlbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2JhY2tDb250ZW50fSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmZS5sZW5ndGgmJih0aGlzLl9wYXlsb2FkLmJhY2tfY29udGVudD1lLHRoaXMuX2JhY2tDb250ZW50PWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcImJhY2tUaXRsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmFja1RpdGxlfSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmZS5sZW5ndGgmJih0aGlzLl9wYXlsb2FkLmJhY2tfdGl0bGU9ZSx0aGlzLl9iYWNrVGl0bGU9ZSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwiY291bnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvdW50fSxzZXQ6ZnVuY3Rpb24oZSl7bnVsbCE9ZSYmKHRoaXMuX3BheWxvYWQuY291bnQ9ZSx0aGlzLl9jb3VudD1lKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJ0aXRsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGl0bGV9LHNldDpmdW5jdGlvbihlKXtlJiZlLmxlbmd0aCYmKHRoaXMuX3BheWxvYWQudGl0bGU9ZSx0aGlzLl90aXRsZT1lKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJ0eXBlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90eXBlfSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmZS5sZW5ndGgmJih0aGlzLl9wYXlsb2FkLnR5cGU9ZSx0aGlzLl90eXBlPWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxcInN1YnRpdGxlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJhY2tUaXRsZX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuYmFja1RpdGxlPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLFwiYm9keVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iYWNrQ29udGVudH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuYmFja0NvbnRlbnQ9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsXCJiYWRnZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb3VudH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuY291bnQ9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxyLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLl9wYXlsb2FkKS5sZW5ndGg/bih7fSx0aGlzLl9wYXlsb2FkKTpudWxsfSxyfShVKSxJPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGkoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiB0KGksZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLFwibm90aWZpY2F0aW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wYXlsb2FkLm5vdGlmaWNhdGlvbn0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsXCJkYXRhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wYXlsb2FkLmRhdGF9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGkucHJvdG90eXBlLFwidGl0bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RpdGxlfSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmZS5sZW5ndGgmJih0aGlzLl9wYXlsb2FkLm5vdGlmaWNhdGlvbi50aXRsZT1lLHRoaXMuX3RpdGxlPWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSxcImJvZHlcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2JvZHl9LHNldDpmdW5jdGlvbihlKXtlJiZlLmxlbmd0aCYmKHRoaXMuX3BheWxvYWQubm90aWZpY2F0aW9uLmJvZHk9ZSx0aGlzLl9ib2R5PWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSxcInNvdW5kXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zb3VuZH0sc2V0OmZ1bmN0aW9uKGUpe2UmJmUubGVuZ3RoJiYodGhpcy5fcGF5bG9hZC5ub3RpZmljYXRpb24uc291bmQ9ZSx0aGlzLl9zb3VuZD1lKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsXCJpY29uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pY29ufSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmZS5sZW5ndGgmJih0aGlzLl9wYXlsb2FkLm5vdGlmaWNhdGlvbi5pY29uPWUsdGhpcy5faWNvbj1lKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsXCJ0YWdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhZ30sc2V0OmZ1bmN0aW9uKGUpe2UmJmUubGVuZ3RoJiYodGhpcy5fcGF5bG9hZC5ub3RpZmljYXRpb24udGFnPWUsdGhpcy5fdGFnPWUpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSxcInNpbGVudFwiLHtzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5faXNTaWxlbnQ9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxpLnByb3RvdHlwZS5fc2V0RGVmYXVsdFBheWxvYWRTdHJ1Y3R1cmU9ZnVuY3Rpb24oKXt0aGlzLl9wYXlsb2FkLm5vdGlmaWNhdGlvbj17fSx0aGlzLl9wYXlsb2FkLmRhdGE9e319LGkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKCl7dmFyIGU9bih7fSx0aGlzLl9wYXlsb2FkLmRhdGEpLHQ9bnVsbCxpPXt9O2lmKE9iamVjdC5rZXlzKHRoaXMuX3BheWxvYWQpLmxlbmd0aD4yKXt2YXIgbz10aGlzLl9wYXlsb2FkO28ubm90aWZpY2F0aW9uLG8uZGF0YTt2YXIgcz1yKG8sW1wibm90aWZpY2F0aW9uXCIsXCJkYXRhXCJdKTtlPW4obih7fSxlKSxzKX1yZXR1cm4gdGhpcy5faXNTaWxlbnQ/ZS5ub3RpZmljYXRpb249dGhpcy5fcGF5bG9hZC5ub3RpZmljYXRpb246dD10aGlzLl9wYXlsb2FkLm5vdGlmaWNhdGlvbixPYmplY3Qua2V5cyhlKS5sZW5ndGgmJihpLmRhdGE9ZSksdCYmT2JqZWN0LmtleXModCkubGVuZ3RoJiYoaS5ub3RpZmljYXRpb249dCksT2JqZWN0LmtleXMoaSkubGVuZ3RoP2k6bnVsbH0saX0oVSksRz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLl9wYXlsb2FkPXthcG5zOnt9LG1wbnM6e30sZmNtOnt9fSx0aGlzLl90aXRsZT1lLHRoaXMuX2JvZHk9dCx0aGlzLmFwbnM9bmV3IHgodGhpcy5fcGF5bG9hZC5hcG5zLGUsdCksdGhpcy5tcG5zPW5ldyBEKHRoaXMuX3BheWxvYWQubXBucyxlLHQpLHRoaXMuZmNtPW5ldyBJKHRoaXMuX3BheWxvYWQuZmNtLGUsdCl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImRlYnVnZ2luZ1wiLHtzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZGVidWdnaW5nPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidGl0bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RpdGxlfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImJvZHlcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2JvZHl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic3VidGl0bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N1YnRpdGxlfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fc3VidGl0bGU9ZSx0aGlzLmFwbnMuc3VidGl0bGU9ZSx0aGlzLm1wbnMuc3VidGl0bGU9ZSx0aGlzLmZjbS5zdWJ0aXRsZT1lfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImJhZGdlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9iYWRnZX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2JhZGdlPWUsdGhpcy5hcG5zLmJhZGdlPWUsdGhpcy5tcG5zLmJhZGdlPWUsdGhpcy5mY20uYmFkZ2U9ZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJzb3VuZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc291bmR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9zb3VuZD1lLHRoaXMuYXBucy5zb3VuZD1lLHRoaXMubXBucy5zb3VuZD1lLHRoaXMuZmNtLnNvdW5kPWV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuYnVpbGRQYXlsb2FkPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2lmKGUuaW5jbHVkZXMoXCJhcG5zXCIpfHxlLmluY2x1ZGVzKFwiYXBuczJcIikpe3RoaXMuYXBucy5fYXBuc1B1c2hUeXBlPWUuaW5jbHVkZXMoXCJhcG5zXCIpP1wiYXBuc1wiOlwiYXBuczJcIjt2YXIgbj10aGlzLmFwbnMudG9PYmplY3QoKTtuJiZPYmplY3Qua2V5cyhuKS5sZW5ndGgmJih0LnBuX2FwbnM9bil9aWYoZS5pbmNsdWRlcyhcIm1wbnNcIikpe3ZhciByPXRoaXMubXBucy50b09iamVjdCgpO3ImJk9iamVjdC5rZXlzKHIpLmxlbmd0aCYmKHQucG5fbXBucz1yKX1pZihlLmluY2x1ZGVzKFwiZmNtXCIpKXt2YXIgaT10aGlzLmZjbS50b09iamVjdCgpO2kmJk9iamVjdC5rZXlzKGkpLmxlbmd0aCYmKHQucG5fZ2NtPWkpfXJldHVybiBPYmplY3Qua2V5cyh0KS5sZW5ndGgmJnRoaXMuX2RlYnVnZ2luZyYmKHQucG5fZGVidWc9ITApLHR9LGV9KCksSz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9saXN0ZW5lcnM9W119cmV0dXJuIGUucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUpe3RoaXMuX2xpc3RlbmVycy5wdXNoKGUpfSxlLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlKXt2YXIgdD1bXTt0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaCgoZnVuY3Rpb24obil7biE9PWUmJnQucHVzaChuKX0pKSx0aGlzLl9saXN0ZW5lcnM9dH0sZS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKCl7dGhpcy5fbGlzdGVuZXJzPVtdfSxlLnByb3RvdHlwZS5hbm5vdW5jZVByZXNlbmNlPWZ1bmN0aW9uKGUpe3RoaXMuX2xpc3RlbmVycy5mb3JFYWNoKChmdW5jdGlvbih0KXt0LnByZXNlbmNlJiZ0LnByZXNlbmNlKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZVN0YXR1cz1mdW5jdGlvbihlKXt0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5zdGF0dXMmJnQuc3RhdHVzKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZU1lc3NhZ2U9ZnVuY3Rpb24oZSl7dGhpcy5fbGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QubWVzc2FnZSYmdC5tZXNzYWdlKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZVNpZ25hbD1mdW5jdGlvbihlKXt0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5zaWduYWwmJnQuc2lnbmFsKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZU1lc3NhZ2VBY3Rpb249ZnVuY3Rpb24oZSl7dGhpcy5fbGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QubWVzc2FnZUFjdGlvbiYmdC5tZXNzYWdlQWN0aW9uKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZUZpbGU9ZnVuY3Rpb24oZSl7dGhpcy5fbGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuZmlsZSYmdC5maWxlKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZU9iamVjdHM9ZnVuY3Rpb24oZSl7dGhpcy5fbGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3Qub2JqZWN0cyYmdC5vYmplY3RzKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZVVzZXI9ZnVuY3Rpb24oZSl7dGhpcy5fbGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QudXNlciYmdC51c2VyKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZVNwYWNlPWZ1bmN0aW9uKGUpe3RoaXMuX2xpc3RlbmVycy5mb3JFYWNoKChmdW5jdGlvbih0KXt0LnNwYWNlJiZ0LnNwYWNlKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZU1lbWJlcnNoaXA9ZnVuY3Rpb24oZSl7dGhpcy5fbGlzdGVuZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QubWVtYmVyc2hpcCYmdC5tZW1iZXJzaGlwKGUpfSkpfSxlLnByb3RvdHlwZS5hbm5vdW5jZU5ldHdvcmtVcD1mdW5jdGlvbigpe3ZhciBlPXt9O2UuY2F0ZWdvcnk9QS5QTk5ldHdvcmtVcENhdGVnb3J5LHRoaXMuYW5ub3VuY2VTdGF0dXMoZSl9LGUucHJvdG90eXBlLmFubm91bmNlTmV0d29ya0Rvd249ZnVuY3Rpb24oKXt2YXIgZT17fTtlLmNhdGVnb3J5PUEuUE5OZXR3b3JrRG93bkNhdGVnb3J5LHRoaXMuYW5ub3VuY2VTdGF0dXMoZSl9LGV9KCksRj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLl9jb25maWc9ZSx0aGlzLl9jYm9yPXR9cmV0dXJuIGUucHJvdG90eXBlLnNldFRva2VuPWZ1bmN0aW9uKGUpe2UmJmUubGVuZ3RoPjA/dGhpcy5fdG9rZW49ZTp0aGlzLl90b2tlbj12b2lkIDB9LGUucHJvdG90eXBlLmdldFRva2VuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Rva2VufSxlLnByb3RvdHlwZS5leHRyYWN0UGVybWlzc2lvbnM9ZnVuY3Rpb24oZSl7dmFyIHQ9e3JlYWQ6ITEsd3JpdGU6ITEsbWFuYWdlOiExLGRlbGV0ZTohMSxnZXQ6ITEsdXBkYXRlOiExLGpvaW46ITF9O3JldHVybiAxMjg9PSgxMjgmZSkmJih0LmpvaW49ITApLDY0PT0oNjQmZSkmJih0LnVwZGF0ZT0hMCksMzI9PSgzMiZlKSYmKHQuZ2V0PSEwKSw4PT0oOCZlKSYmKHQuZGVsZXRlPSEwKSw0PT0oNCZlKSYmKHQubWFuYWdlPSEwKSwyPT0oMiZlKSYmKHQud3JpdGU9ITApLDE9PSgxJmUpJiYodC5yZWFkPSEwKSx0fSxlLnByb3RvdHlwZS5wYXJzZVRva2VuPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10aGlzLl9jYm9yLmRlY29kZVRva2VuKGUpO2lmKHZvaWQgMCE9PW4pe3ZhciByPW4ucmVzLnV1aWQ/T2JqZWN0LmtleXMobi5yZXMudXVpZCk6W10saT1PYmplY3Qua2V5cyhuLnJlcy5jaGFuKSxvPU9iamVjdC5rZXlzKG4ucmVzLmdycCkscz1uLnBhdC51dWlkP09iamVjdC5rZXlzKG4ucGF0LnV1aWQpOltdLGE9T2JqZWN0LmtleXMobi5wYXQuY2hhbiksdT1PYmplY3Qua2V5cyhuLnBhdC5ncnApLGM9e3ZlcnNpb246bi52LHRpbWVzdGFtcDpuLnQsdHRsOm4udHRsLGF1dGhvcml6ZWRfdXVpZDpuLnV1aWR9LGw9ci5sZW5ndGg+MCxwPWkubGVuZ3RoPjAsaD1vLmxlbmd0aD4wOyhsfHxwfHxoKSYmKGMucmVzb3VyY2VzPXt9LGwmJihjLnJlc291cmNlcy51dWlkcz17fSxyLmZvckVhY2goKGZ1bmN0aW9uKGUpe2MucmVzb3VyY2VzLnV1aWRzW2VdPXQuZXh0cmFjdFBlcm1pc3Npb25zKG4ucmVzLnV1aWRbZV0pfSkpKSxwJiYoYy5yZXNvdXJjZXMuY2hhbm5lbHM9e30saS5mb3JFYWNoKChmdW5jdGlvbihlKXtjLnJlc291cmNlcy5jaGFubmVsc1tlXT10LmV4dHJhY3RQZXJtaXNzaW9ucyhuLnJlcy5jaGFuW2VdKX0pKSksaCYmKGMucmVzb3VyY2VzLmdyb3Vwcz17fSxvLmZvckVhY2goKGZ1bmN0aW9uKGUpe2MucmVzb3VyY2VzLmdyb3Vwc1tlXT10LmV4dHJhY3RQZXJtaXNzaW9ucyhuLnJlcy5ncnBbZV0pfSkpKSk7dmFyIGY9cy5sZW5ndGg+MCxkPWEubGVuZ3RoPjAsZz11Lmxlbmd0aD4wO3JldHVybihmfHxkfHxnKSYmKGMucGF0dGVybnM9e30sZiYmKGMucGF0dGVybnMudXVpZHM9e30scy5mb3JFYWNoKChmdW5jdGlvbihlKXtjLnBhdHRlcm5zLnV1aWRzW2VdPXQuZXh0cmFjdFBlcm1pc3Npb25zKG4ucGF0LnV1aWRbZV0pfSkpKSxkJiYoYy5wYXR0ZXJucy5jaGFubmVscz17fSxhLmZvckVhY2goKGZ1bmN0aW9uKGUpe2MucGF0dGVybnMuY2hhbm5lbHNbZV09dC5leHRyYWN0UGVybWlzc2lvbnMobi5wYXQuY2hhbltlXSl9KSkpLGcmJihjLnBhdHRlcm5zLmdyb3Vwcz17fSx1LmZvckVhY2goKGZ1bmN0aW9uKGUpe2MucGF0dGVybnMuZ3JvdXBzW2VdPXQuZXh0cmFjdFBlcm1pc3Npb25zKG4ucGF0LmdycFtlXSl9KSkpKSxPYmplY3Qua2V5cyhuLm1ldGEpLmxlbmd0aD4wJiYoYy5tZXRhPW4ubWV0YSksYy5zaWduYXR1cmU9bi5zaWcsY319LGV9KCksTD1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKHQsbil7dmFyIHI9dGhpcy5jb25zdHJ1Y3RvcixpPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiBpLm5hbWU9aS5jb25zdHJ1Y3Rvci5uYW1lLGkuc3RhdHVzPW4saS5tZXNzYWdlPXQsT2JqZWN0LnNldFByb3RvdHlwZU9mKGksci5wcm90b3R5cGUpLGl9cmV0dXJuIHQobixlKSxufShFcnJvcik7ZnVuY3Rpb24gQihlKXtyZXR1cm4odD17bWVzc2FnZTplfSkudHlwZT1cInZhbGlkYXRpb25FcnJvclwiLHQuZXJyb3I9ITAsdDt2YXIgdH1mdW5jdGlvbiBIKGUsdCxuKXtyZXR1cm4gZS51c2VQb3N0JiZlLnVzZVBvc3QodCxuKT9lLnBvc3RVUkwodCxuKTplLnVzZVBhdGNoJiZlLnVzZVBhdGNoKHQsbik/ZS5wYXRjaFVSTCh0LG4pOmUudXNlR2V0RmlsZSYmZS51c2VHZXRGaWxlKHQsbik/ZS5nZXRGaWxlVVJMKHQsbik6ZS5nZXRVUkwodCxuKX1mdW5jdGlvbiBxKGUpe2lmKGUuc2RrTmFtZSlyZXR1cm4gZS5zZGtOYW1lO3ZhciB0PVwiUHViTnViLUpTLVwiLmNvbmNhdChlLnNka0ZhbWlseSk7ZS5wYXJ0bmVySWQmJih0Kz1cIi1cIi5jb25jYXQoZS5wYXJ0bmVySWQpKSx0Kz1cIi9cIi5jb25jYXQoZS5nZXRWZXJzaW9uKCkpO3ZhciBuPWUuX2dldFBuc2RrU3VmZml4KFwiIFwiKTtyZXR1cm4gbi5sZW5ndGg+MCYmKHQrPW4pLHR9ZnVuY3Rpb24geihlLHQsbil7cmV0dXJuIHQudXNlUG9zdCYmdC51c2VQb3N0KGUsbik/XCJQT1NUXCI6dC51c2VQYXRjaCYmdC51c2VQYXRjaChlLG4pP1wiUEFUQ0hcIjp0LnVzZURlbGV0ZSYmdC51c2VEZWxldGUoZSxuKT9cIkRFTEVURVwiOnQudXNlR2V0RmlsZSYmdC51c2VHZXRGaWxlKGUsbik/XCJHRVRGSUxFXCI6XCJHRVRcIn1mdW5jdGlvbiBWKGUsdCxuLHIsaSl7dmFyIG89ZS5jb25maWcscz1lLmNyeXB0byxhPXooZSxpLHIpO24udGltZXN0YW1wPU1hdGguZmxvb3IoKG5ldyBEYXRlKS5nZXRUaW1lKCkvMWUzKSxcIlBOUHVibGlzaE9wZXJhdGlvblwiPT09aS5nZXRPcGVyYXRpb24oKSYmaS51c2VQb3N0JiZpLnVzZVBvc3QoZSxyKSYmKGE9XCJHRVRcIiksXCJHRVRGSUxFXCI9PT1hJiYoYT1cIkdFVFwiKTt2YXIgdT1cIlwiLmNvbmNhdChhLFwiXFxuXCIpLmNvbmNhdChvLnB1Ymxpc2hLZXksXCJcXG5cIikuY29uY2F0KHQsXCJcXG5cIikuY29uY2F0KEUuc2lnblBhbUZyb21QYXJhbXMobiksXCJcXG5cIik7aWYoXCJQT1NUXCI9PT1hKXUrPVwic3RyaW5nXCI9PXR5cGVvZihjPWkucG9zdFBheWxvYWQoZSxyKSk/YzpKU09OLnN0cmluZ2lmeShjKTtlbHNlIGlmKFwiUEFUQ0hcIj09PWEpe3ZhciBjO3UrPVwic3RyaW5nXCI9PXR5cGVvZihjPWkucGF0Y2hQYXlsb2FkKGUscikpP2M6SlNPTi5zdHJpbmdpZnkoYyl9dmFyIGw9XCJ2Mi5cIi5jb25jYXQocy5ITUFDU0hBMjU2KHUpKTtsPShsPShsPWwucmVwbGFjZSgvXFwrL2csXCItXCIpKS5yZXBsYWNlKC9cXC8vZyxcIl9cIikpLnJlcGxhY2UoLz0rJC8sXCJcIiksbi5zaWduYXR1cmU9bH1mdW5jdGlvbiBKKGUsdCl7Zm9yKHZhciByPVtdLGk9MjtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXJbaS0yXT1hcmd1bWVudHNbaV07dmFyIG89ZS5uZXR3b3JraW5nLHM9ZS5jb25maWcsYT1lLnRlbGVtZXRyeU1hbmFnZXIsdT1lLnRva2VuTWFuYWdlcixjPW0oKSxsPW51bGwscD1udWxsLGg9e307dC5nZXRPcGVyYXRpb24oKT09PWouUE5UaW1lT3BlcmF0aW9ufHx0LmdldE9wZXJhdGlvbigpPT09ai5QTkNoYW5uZWxHcm91cHNPcGVyYXRpb24/bD1yWzBdOihoPXJbMF0sbD1yWzFdKSxcInVuZGVmaW5lZFwiPT10eXBlb2YgUHJvbWlzZXx8bHx8KHA9RS5jcmVhdGVQcm9taXNlKCkpO3ZhciBmPXQudmFsaWRhdGVQYXJhbXMoZSxoKTtpZihmKXJldHVybiBsP2woQihmKSk6cD8ocC5yZWplY3QobmV3IEwoXCJWYWxpZGF0aW9uIGZhaWxlZCwgY2hlY2sgc3RhdHVzIGZvciBkZXRhaWxzXCIsQihmKSkpLHAucHJvbWlzZSk6dm9pZCAwO3ZhciBkLGc9dC5wcmVwYXJlUGFyYW1zKGUsaCkseT1IKHQsZSxoKSxiPXt1cmw6eSxvcGVyYXRpb246dC5nZXRPcGVyYXRpb24oKSx0aW1lb3V0OnQuZ2V0UmVxdWVzdFRpbWVvdXQoZSksaGVhZGVyczp0LmdldFJlcXVlc3RIZWFkZXJzP3QuZ2V0UmVxdWVzdEhlYWRlcnMoKTp7fSxpZ25vcmVCb2R5OlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuaWdub3JlQm9keSYmdC5pZ25vcmVCb2R5KGUpLGZvcmNlQnVmZmVyZWQ6XCJmdW5jdGlvblwiPT10eXBlb2YgdC5mb3JjZUJ1ZmZlcmVkP3QuZm9yY2VCdWZmZXJlZChlLGgpOm51bGwsYWJvcnRTaWduYWw6XCJmdW5jdGlvblwiPT10eXBlb2YgdC5nZXRBYm9ydFNpZ25hbD90LmdldEFib3J0U2lnbmFsKGUsaCk6bnVsbH07Zy51dWlkPXMuVVVJRCxnLnBuc2RrPXEocyk7dmFyIHY9YS5vcGVyYXRpb25zTGF0ZW5jeUZvclJlcXVlc3QoKTtpZihPYmplY3Qua2V5cyh2KS5sZW5ndGgmJihnPW4obih7fSxnKSx2KSkscy51c2VJbnN0YW5jZUlkJiYoZy5pbnN0YW5jZWlkPXMuaW5zdGFuY2VJZCkscy51c2VSZXF1ZXN0SWQmJihnLnJlcXVlc3RpZD1jKSx0LmlzQXV0aFN1cHBvcnRlZCgpKXt2YXIgXz11LmdldFRva2VuKCl8fHMuZ2V0QXV0aEtleSgpO18mJihnLmF1dGg9Xyl9cy5zZWNyZXRLZXkmJlYoZSx5LGcsaCx0KTt2YXIgTz1mdW5jdGlvbihuLHIpe2lmKG4uZXJyb3IpcmV0dXJuIHQuaGFuZGxlRXJyb3ImJnQuaGFuZGxlRXJyb3IoZSxoLG4pLHZvaWQobD9sKG4pOnAmJnAucmVqZWN0KG5ldyBMKFwiUHViTnViIGNhbGwgZmFpbGVkLCBjaGVjayBzdGF0dXMgZm9yIGRldGFpbHNcIixuKSkpO2Euc3RvcExhdGVuY3lNZWFzdXJlKHQuZ2V0T3BlcmF0aW9uKCksYyk7dmFyIGk9dC5oYW5kbGVSZXNwb25zZShlLHIsaCk7XCJmdW5jdGlvblwiIT10eXBlb2YobnVsbD09aT92b2lkIDA6aS50aGVuKSYmKGk9UHJvbWlzZS5yZXNvbHZlKGkpKSxpLnRoZW4oKGZ1bmN0aW9uKGUpe2w/bChuLGUpOnAmJnAuZnVsZmlsbChlKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7aWYobCl7dmFyIG49ZTt0LmdldE9wZXJhdGlvbigpPT09ai5QTlN1YnNjcmliZU9wZXJhdGlvbiYmKG49e3N0YXR1c0NvZGU6NDAwLGVycm9yOiEwLG9wZXJhdGlvbjp0LmdldE9wZXJhdGlvbigpLGVycm9yRGF0YTplLGNhdGVnb3J5OkEuUE5Vbmtub3duQ2F0ZWdvcnl9KSxsKG4sbnVsbCl9ZWxzZSBwJiZwLnJlamVjdChuZXcgTChcIlB1Yk51YiBjYWxsIGZhaWxlZCwgY2hlY2sgc3RhdHVzIGZvciBkZXRhaWxzXCIsZSkpfSkpfTtpZihhLnN0YXJ0TGF0ZW5jeU1lYXN1cmUodC5nZXRPcGVyYXRpb24oKSxjKSxcIlBPU1RcIj09PXooZSx0LGgpKXt2YXIgUD10LnBvc3RQYXlsb2FkKGUsaCk7ZD1vLlBPU1QoZyxQLGIsTyl9ZWxzZSBpZihcIlBBVENIXCI9PT16KGUsdCxoKSl7UD10LnBhdGNoUGF5bG9hZChlLGgpO2Q9by5QQVRDSChnLFAsYixPKX1lbHNlIGQ9XCJERUxFVEVcIj09PXooZSx0LGgpP28uREVMRVRFKGcsYixPKTpcIkdFVEZJTEVcIj09PXooZSx0LGgpP28uR0VURklMRShnLGIsTyk6by5HRVQoZyxiLE8pO3JldHVybiB0LmdldE9wZXJhdGlvbigpPT09ai5QTlN1YnNjcmliZU9wZXJhdGlvbj9kOnA/cC5wcm9taXNlOnZvaWQgMH12YXIgVz1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkFkZENoYW5uZWxzVG9Hcm91cE9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxzLHI9dC5jaGFubmVsR3JvdXAsaT1lLmNvbmZpZztyZXR1cm4gcj9uJiYwIT09bi5sZW5ndGg/aS5zdWJzY3JpYmVLZXk/dm9pZCAwOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIENoYW5uZWxzXCI6XCJNaXNzaW5nIENoYW5uZWwgR3JvdXBcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVsR3JvdXAscj1lLmNvbmZpZztyZXR1cm5cIi92MS9jaGFubmVsLXJlZ2lzdHJhdGlvbi9zdWIta2V5L1wiLmNvbmNhdChyLnN1YnNjcmliZUtleSxcIi9jaGFubmVsLWdyb3VwL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcobikpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVscztyZXR1cm57YWRkOih2b2lkIDA9PT1uP1tdOm4pLmpvaW4oXCIsXCIpfX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oKXtyZXR1cm57fX19KTt2YXIgWD1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTlJlbW92ZUNoYW5uZWxzRnJvbUdyb3VwT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbHMscj10LmNoYW5uZWxHcm91cCxpPWUuY29uZmlnO3JldHVybiByP24mJjAhPT1uLmxlbmd0aD9pLnN1YnNjcmliZUtleT92b2lkIDA6XCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIjpcIk1pc3NpbmcgQ2hhbm5lbHNcIjpcIk1pc3NpbmcgQ2hhbm5lbCBHcm91cFwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxHcm91cCxyPWUuY29uZmlnO3JldHVyblwiL3YxL2NoYW5uZWwtcmVnaXN0cmF0aW9uL3N1Yi1rZXkvXCIuY29uY2F0KHIuc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWwtZ3JvdXAvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhuKSl9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxzO3JldHVybntyZW1vdmU6KHZvaWQgMD09PW4/W106bikuam9pbihcIixcIil9fSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbigpe3JldHVybnt9fX0pO3ZhciAkPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOUmVtb3ZlR3JvdXBPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVsR3JvdXAscj1lLmNvbmZpZztyZXR1cm4gbj9yLnN1YnNjcmliZUtleT92b2lkIDA6XCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIjpcIk1pc3NpbmcgQ2hhbm5lbCBHcm91cFwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxHcm91cCxyPWUuY29uZmlnO3JldHVyblwiL3YxL2NoYW5uZWwtcmVnaXN0cmF0aW9uL3N1Yi1rZXkvXCIuY29uY2F0KHIuc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWwtZ3JvdXAvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhuKSxcIi9yZW1vdmVcIil9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oKXtyZXR1cm57fX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oKXtyZXR1cm57fX19KTt2YXIgUT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkNoYW5uZWxHcm91cHNPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUpe2lmKCFlLmNvbmZpZy5zdWJzY3JpYmVLZXkpcmV0dXJuXCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUpe3ZhciB0PWUuY29uZmlnO3JldHVyblwiL3YxL2NoYW5uZWwtcmVnaXN0cmF0aW9uL3N1Yi1rZXkvXCIuY29uY2F0KHQuc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWwtZ3JvdXBcIil9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oKXtyZXR1cm57fX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57Z3JvdXBzOnQucGF5bG9hZC5ncm91cHN9fX0pO3ZhciBZPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOQ2hhbm5lbHNGb3JHcm91cE9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxHcm91cCxyPWUuY29uZmlnO3JldHVybiBuP3Iuc3Vic2NyaWJlS2V5P3ZvaWQgMDpcIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwiOlwiTWlzc2luZyBDaGFubmVsIEdyb3VwXCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbEdyb3VwLHI9ZS5jb25maWc7cmV0dXJuXCIvdjEvY2hhbm5lbC1yZWdpc3RyYXRpb24vc3ViLWtleS9cIi5jb25jYXQoci5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC1ncm91cC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG4pKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbigpe3JldHVybnt9fSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybntjaGFubmVsczp0LnBheWxvYWQuY2hhbm5lbHN9fX0pO3ZhciBaPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOUHVzaE5vdGlmaWNhdGlvbkVuYWJsZWRDaGFubmVsc09wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmRldmljZSxyPXQucHVzaEdhdGV3YXksaT10LmNoYW5uZWxzLG89dC50b3BpYyxzPWUuY29uZmlnO3JldHVybiBuP3I/XCJhcG5zMlwiIT09cnx8bz9pJiYwIT09aS5sZW5ndGg/cy5zdWJzY3JpYmVLZXk/dm9pZCAwOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIENoYW5uZWxzXCI6XCJNaXNzaW5nIEFQTlMyIHRvcGljXCI6XCJNaXNzaW5nIEdXIFR5cGUgKHB1c2hHYXRld2F5OiBnY20sIGFwbnMgb3IgYXBuczIpXCI6XCJNaXNzaW5nIERldmljZSBJRCAoZGV2aWNlKVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmRldmljZSxyPXQucHVzaEdhdGV3YXksaT1lLmNvbmZpZztyZXR1cm5cImFwbnMyXCI9PT1yP1wiL3YyL3B1c2gvc3ViLWtleS9cIi5jb25jYXQoaS5zdWJzY3JpYmVLZXksXCIvZGV2aWNlcy1hcG5zMi9cIikuY29uY2F0KG4pOlwiL3YxL3B1c2gvc3ViLWtleS9cIi5jb25jYXQoaS5zdWJzY3JpYmVLZXksXCIvZGV2aWNlcy9cIikuY29uY2F0KG4pfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dC5wdXNoR2F0ZXdheSxpPXQuY2hhbm5lbHMsbz12b2lkIDA9PT1pP1tdOmkscz10LmVudmlyb25tZW50LGE9dm9pZCAwPT09cz9cImRldmVsb3BtZW50XCI6cyx1PXQudG9waWMsYz17dHlwZTpyLGFkZDpvLmpvaW4oXCIsXCIpfTtyZXR1cm5cImFwbnMyXCI9PT1yJiZkZWxldGUoYz1uKG4oe30sYykse2Vudmlyb25tZW50OmEsdG9waWM6dX0pKS50eXBlLGN9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKCl7cmV0dXJue319fSk7dmFyIGVlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOUHVzaE5vdGlmaWNhdGlvbkVuYWJsZWRDaGFubmVsc09wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmRldmljZSxyPXQucHVzaEdhdGV3YXksaT10LmNoYW5uZWxzLG89dC50b3BpYyxzPWUuY29uZmlnO3JldHVybiBuP3I/XCJhcG5zMlwiIT09cnx8bz9pJiYwIT09aS5sZW5ndGg/cy5zdWJzY3JpYmVLZXk/dm9pZCAwOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIENoYW5uZWxzXCI6XCJNaXNzaW5nIEFQTlMyIHRvcGljXCI6XCJNaXNzaW5nIEdXIFR5cGUgKHB1c2hHYXRld2F5OiBnY20sIGFwbnMgb3IgYXBuczIpXCI6XCJNaXNzaW5nIERldmljZSBJRCAoZGV2aWNlKVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmRldmljZSxyPXQucHVzaEdhdGV3YXksaT1lLmNvbmZpZztyZXR1cm5cImFwbnMyXCI9PT1yP1wiL3YyL3B1c2gvc3ViLWtleS9cIi5jb25jYXQoaS5zdWJzY3JpYmVLZXksXCIvZGV2aWNlcy1hcG5zMi9cIikuY29uY2F0KG4pOlwiL3YxL3B1c2gvc3ViLWtleS9cIi5jb25jYXQoaS5zdWJzY3JpYmVLZXksXCIvZGV2aWNlcy9cIikuY29uY2F0KG4pfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dC5wdXNoR2F0ZXdheSxpPXQuY2hhbm5lbHMsbz12b2lkIDA9PT1pP1tdOmkscz10LmVudmlyb25tZW50LGE9dm9pZCAwPT09cz9cImRldmVsb3BtZW50XCI6cyx1PXQudG9waWMsYz17dHlwZTpyLHJlbW92ZTpvLmpvaW4oXCIsXCIpfTtyZXR1cm5cImFwbnMyXCI9PT1yJiZkZWxldGUoYz1uKG4oe30sYykse2Vudmlyb25tZW50OmEsdG9waWM6dX0pKS50eXBlLGN9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKCl7cmV0dXJue319fSk7dmFyIHRlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOUHVzaE5vdGlmaWNhdGlvbkVuYWJsZWRDaGFubmVsc09wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmRldmljZSxyPXQucHVzaEdhdGV3YXksaT10LnRvcGljLG89ZS5jb25maWc7cmV0dXJuIG4/cj9cImFwbnMyXCIhPT1yfHxpP28uc3Vic2NyaWJlS2V5P3ZvaWQgMDpcIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwiOlwiTWlzc2luZyBBUE5TMiB0b3BpY1wiOlwiTWlzc2luZyBHVyBUeXBlIChwdXNoR2F0ZXdheTogZ2NtLCBhcG5zIG9yIGFwbnMyKVwiOlwiTWlzc2luZyBEZXZpY2UgSUQgKGRldmljZSlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5kZXZpY2Uscj10LnB1c2hHYXRld2F5LGk9ZS5jb25maWc7cmV0dXJuXCJhcG5zMlwiPT09cj9cIi92Mi9wdXNoL3N1Yi1rZXkvXCIuY29uY2F0KGkuc3Vic2NyaWJlS2V5LFwiL2RldmljZXMtYXBuczIvXCIpLmNvbmNhdChuKTpcIi92MS9wdXNoL3N1Yi1rZXkvXCIuY29uY2F0KGkuc3Vic2NyaWJlS2V5LFwiL2RldmljZXMvXCIpLmNvbmNhdChuKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciByPXQucHVzaEdhdGV3YXksaT10LmVudmlyb25tZW50LG89dm9pZCAwPT09aT9cImRldmVsb3BtZW50XCI6aSxzPXQudG9waWMsYT17dHlwZTpyfTtyZXR1cm5cImFwbnMyXCI9PT1yJiZkZWxldGUoYT1uKG4oe30sYSkse2Vudmlyb25tZW50Om8sdG9waWM6c30pKS50eXBlLGF9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue2NoYW5uZWxzOnR9fX0pO3ZhciBuZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTlJlbW92ZUFsbFB1c2hOb3RpZmljYXRpb25zT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuZGV2aWNlLHI9dC5wdXNoR2F0ZXdheSxpPXQudG9waWMsbz1lLmNvbmZpZztyZXR1cm4gbj9yP1wiYXBuczJcIiE9PXJ8fGk/by5zdWJzY3JpYmVLZXk/dm9pZCAwOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIEFQTlMyIHRvcGljXCI6XCJNaXNzaW5nIEdXIFR5cGUgKHB1c2hHYXRld2F5OiBnY20sIGFwbnMgb3IgYXBuczIpXCI6XCJNaXNzaW5nIERldmljZSBJRCAoZGV2aWNlKVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmRldmljZSxyPXQucHVzaEdhdGV3YXksaT1lLmNvbmZpZztyZXR1cm5cImFwbnMyXCI9PT1yP1wiL3YyL3B1c2gvc3ViLWtleS9cIi5jb25jYXQoaS5zdWJzY3JpYmVLZXksXCIvZGV2aWNlcy1hcG5zMi9cIikuY29uY2F0KG4sXCIvcmVtb3ZlXCIpOlwiL3YxL3B1c2gvc3ViLWtleS9cIi5jb25jYXQoaS5zdWJzY3JpYmVLZXksXCIvZGV2aWNlcy9cIikuY29uY2F0KG4sXCIvcmVtb3ZlXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dC5wdXNoR2F0ZXdheSxpPXQuZW52aXJvbm1lbnQsbz12b2lkIDA9PT1pP1wiZGV2ZWxvcG1lbnRcIjppLHM9dC50b3BpYyxhPXt0eXBlOnJ9O3JldHVyblwiYXBuczJcIj09PXImJmRlbGV0ZShhPW4obih7fSxhKSx7ZW52aXJvbm1lbnQ6byx0b3BpYzpzfSkpLnR5cGUsYX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oKXtyZXR1cm57fX19KTt2YXIgcmU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5VbnN1YnNjcmliZU9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSl7aWYoIWUuY29uZmlnLnN1YnNjcmliZUtleSlyZXR1cm5cIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPXQuY2hhbm5lbHMsaT12b2lkIDA9PT1yP1tdOnIsbz1pLmxlbmd0aD4wP2kuam9pbihcIixcIik6XCIsXCI7cmV0dXJuXCIvdjIvcHJlc2VuY2Uvc3ViLWtleS9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG8pLFwiL2xlYXZlXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVsR3JvdXBzLHI9dm9pZCAwPT09bj9bXTpuLGk9e307cmV0dXJuIHIubGVuZ3RoPjAmJihpW1wiY2hhbm5lbC1ncm91cFwiXT1yLmpvaW4oXCIsXCIpKSxpfSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbigpe3JldHVybnt9fX0pO3ZhciBpZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTldoZXJlTm93T3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlKXtpZighZS5jb25maWcuc3Vic2NyaWJlS2V5KXJldHVyblwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC51dWlkLGk9dm9pZCAwPT09cj9uLlVVSUQ6cjtyZXR1cm5cIi92Mi9wcmVzZW5jZS9zdWIta2V5L1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi91dWlkL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcoaSkpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJue319LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQucGF5bG9hZD97Y2hhbm5lbHM6dC5wYXlsb2FkLmNoYW5uZWxzfTp7Y2hhbm5lbHM6W119fX0pO3ZhciBvZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkhlYXJ0YmVhdE9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSl7aWYoIWUuY29uZmlnLnN1YnNjcmliZUtleSlyZXR1cm5cIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPXQuY2hhbm5lbHMsaT12b2lkIDA9PT1yP1tdOnIsbz1pLmxlbmd0aD4wP2kuam9pbihcIixcIik6XCIsXCI7cmV0dXJuXCIvdjIvcHJlc2VuY2Uvc3ViLWtleS9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG8pLFwiL2hlYXJ0YmVhdFwiKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbEdyb3VwcyxyPXZvaWQgMD09PW4/W106bixpPXQuc3RhdGUsbz12b2lkIDA9PT1pP3t9Omkscz1lLmNvbmZpZyxhPXt9O3JldHVybiByLmxlbmd0aD4wJiYoYVtcImNoYW5uZWwtZ3JvdXBcIl09ci5qb2luKFwiLFwiKSksYS5zdGF0ZT1KU09OLnN0cmluZ2lmeShvKSxhLmhlYXJ0YmVhdD1zLmdldFByZXNlbmNlVGltZW91dCgpLGF9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKCl7cmV0dXJue319fSk7dmFyIHNlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOR2V0U3RhdGVPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUpe2lmKCFlLmNvbmZpZy5zdWJzY3JpYmVLZXkpcmV0dXJuXCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LnV1aWQsaT12b2lkIDA9PT1yP24uVVVJRDpyLG89dC5jaGFubmVscyxzPXZvaWQgMD09PW8/W106byxhPXMubGVuZ3RoPjA/cy5qb2luKFwiLFwiKTpcIixcIjtyZXR1cm5cIi92Mi9wcmVzZW5jZS9zdWIta2V5L1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9jaGFubmVsL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcoYSksXCIvdXVpZC9cIikuY29uY2F0KGkpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVsR3JvdXBzLHI9dm9pZCAwPT09bj9bXTpuLGk9e307cmV0dXJuIHIubGVuZ3RoPjAmJihpW1wiY2hhbm5lbC1ncm91cFwiXT1yLmpvaW4oXCIsXCIpKSxpfSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9bi5jaGFubmVscyxpPXZvaWQgMD09PXI/W106cixvPW4uY2hhbm5lbEdyb3VwcyxzPXZvaWQgMD09PW8/W106byxhPXt9O3JldHVybiAxPT09aS5sZW5ndGgmJjA9PT1zLmxlbmd0aD9hW2lbMF1dPXQucGF5bG9hZDphPXQucGF5bG9hZCx7Y2hhbm5lbHM6YX19fSk7dmFyIGFlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOU2V0U3RhdGVPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LnN0YXRlLGk9dC5jaGFubmVscyxvPXZvaWQgMD09PWk/W106aSxzPXQuY2hhbm5lbEdyb3VwcyxhPXZvaWQgMD09PXM/W106cztyZXR1cm4gcj9uLnN1YnNjcmliZUtleT8wPT09by5sZW5ndGgmJjA9PT1hLmxlbmd0aD9cIlBsZWFzZSBwcm92aWRlIGEgbGlzdCBvZiBjaGFubmVscyBhbmQvb3IgY2hhbm5lbC1ncm91cHNcIjp2b2lkIDA6XCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIjpcIk1pc3NpbmcgU3RhdGVcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LmNoYW5uZWxzLGk9dm9pZCAwPT09cj9bXTpyLG89aS5sZW5ndGg+MD9pLmpvaW4oXCIsXCIpOlwiLFwiO3JldHVyblwiL3YyL3ByZXNlbmNlL3N1Yi1rZXkvXCIuY29uY2F0KG4uc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWwvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhvKSxcIi91dWlkL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcobi5VVUlEKSxcIi9kYXRhXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5zdGF0ZSxyPXQuY2hhbm5lbEdyb3VwcyxpPXZvaWQgMD09PXI/W106cixvPXt9O3JldHVybiBvLnN0YXRlPUpTT04uc3RyaW5naWZ5KG4pLGkubGVuZ3RoPjAmJihvW1wiY2hhbm5lbC1ncm91cFwiXT1pLmpvaW4oXCIsXCIpKSxvfSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybntzdGF0ZTp0LnBheWxvYWR9fX0pO3ZhciB1ZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkhlcmVOb3dPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUpe2lmKCFlLmNvbmZpZy5zdWJzY3JpYmVLZXkpcmV0dXJuXCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LmNoYW5uZWxzLGk9dm9pZCAwPT09cj9bXTpyLG89dC5jaGFubmVsR3JvdXBzLHM9dm9pZCAwPT09bz9bXTpvLGE9XCIvdjIvcHJlc2VuY2Uvc3ViLWtleS9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXkpO2lmKGkubGVuZ3RoPjB8fHMubGVuZ3RoPjApe3ZhciB1PWkubGVuZ3RoPjA/aS5qb2luKFwiLFwiKTpcIixcIjthKz1cIi9jaGFubmVsL1wiLmNvbmNhdChFLmVuY29kZVN0cmluZyh1KSl9cmV0dXJuIGF9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgcj10LmNoYW5uZWxHcm91cHMsaT12b2lkIDA9PT1yP1tdOnIsbz10LmluY2x1ZGVVVUlEcyxzPXZvaWQgMD09PW98fG8sYT10LmluY2x1ZGVTdGF0ZSx1PXZvaWQgMCE9PWEmJmEsYz10LnF1ZXJ5UGFyYW1ldGVycyxsPXZvaWQgMD09PWM/e306YyxwPXt9O3JldHVybiBzfHwocC5kaXNhYmxlX3V1aWRzPTEpLHUmJihwLnN0YXRlPTEpLGkubGVuZ3RoPjAmJihwW1wiY2hhbm5lbC1ncm91cFwiXT1pLmpvaW4oXCIsXCIpKSxwPW4obih7fSxwKSxsKX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4uY2hhbm5lbHMsaT12b2lkIDA9PT1yP1tdOnIsbz1uLmNoYW5uZWxHcm91cHMscz12b2lkIDA9PT1vP1tdOm8sYT1uLmluY2x1ZGVVVUlEcyx1PXZvaWQgMD09PWF8fGEsYz1uLmluY2x1ZGVTdGF0ZSxsPXZvaWQgMCE9PWMmJmM7cmV0dXJuIGkubGVuZ3RoPjF8fHMubGVuZ3RoPjB8fDA9PT1zLmxlbmd0aCYmMD09PWkubGVuZ3RoP2Z1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIGUudG90YWxDaGFubmVscz10LnBheWxvYWQudG90YWxfY2hhbm5lbHMsZS50b3RhbE9jY3VwYW5jeT10LnBheWxvYWQudG90YWxfb2NjdXBhbmN5LGUuY2hhbm5lbHM9e30sT2JqZWN0LmtleXModC5wYXlsb2FkLmNoYW5uZWxzKS5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgcj10LnBheWxvYWQuY2hhbm5lbHNbbl0saT1bXTtyZXR1cm4gZS5jaGFubmVsc1tuXT17b2NjdXBhbnRzOmksbmFtZTpuLG9jY3VwYW5jeTpyLm9jY3VwYW5jeX0sdSYmci51dWlkcy5mb3JFYWNoKChmdW5jdGlvbihlKXtsP2kucHVzaCh7c3RhdGU6ZS5zdGF0ZSx1dWlkOmUudXVpZH0pOmkucHVzaCh7c3RhdGU6bnVsbCx1dWlkOmV9KX0pKSxlfSkpLGV9KCk6ZnVuY3Rpb24oKXt2YXIgZT17fSxuPVtdO3JldHVybiBlLnRvdGFsQ2hhbm5lbHM9MSxlLnRvdGFsT2NjdXBhbmN5PXQub2NjdXBhbmN5LGUuY2hhbm5lbHM9e30sZS5jaGFubmVsc1tpWzBdXT17b2NjdXBhbnRzOm4sbmFtZTppWzBdLG9jY3VwYW5jeTp0Lm9jY3VwYW5jeX0sdSYmdC51dWlkcyYmdC51dWlkcy5mb3JFYWNoKChmdW5jdGlvbihlKXtsP24ucHVzaCh7c3RhdGU6ZS5zdGF0ZSx1dWlkOmUudXVpZH0pOm4ucHVzaCh7c3RhdGU6bnVsbCx1dWlkOmV9KX0pKSxlfSgpfSxoYW5kbGVFcnJvcjpmdW5jdGlvbihlLHQsbil7NDAyIT09bi5zdGF0dXNDb2RlfHx0aGlzLmdldFVSTChlLHQpLmluY2x1ZGVzKFwiY2hhbm5lbFwiKXx8KG4uZXJyb3JEYXRhLm1lc3NhZ2U9XCJZb3UgaGF2ZSB0cmllZCB0byBwZXJmb3JtIGEgR2xvYmFsIEhlcmUgTm93IG9wZXJhdGlvbiwgeW91ciBrZXlzZXQgY29uZmlndXJhdGlvbiBkb2VzIG5vdCBzdXBwb3J0IHRoYXQuIFBsZWFzZSBwcm92aWRlIGEgY2hhbm5lbCwgb3IgZW5hYmxlIHRoZSBHbG9iYWwgSGVyZSBOb3cgZmVhdHVyZSBmcm9tIHRoZSBQb3J0YWwuXCIpfX0pO3ZhciBjZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkFkZE1lc3NhZ2VBY3Rpb25PcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LmFjdGlvbixpPXQuY2hhbm5lbDtyZXR1cm4gdC5tZXNzYWdlVGltZXRva2VuP24uc3Vic2NyaWJlS2V5P2k/cj9yLnZhbHVlP3IudHlwZT9yLnR5cGUubGVuZ3RoPjE1P1wiQWN0aW9uLnR5cGUgdmFsdWUgZXhjZWVkIG1heGltdW0gbGVuZ3RoIG9mIDE1XCI6dm9pZCAwOlwiTWlzc2luZyBBY3Rpb24udHlwZVwiOlwiTWlzc2luZyBBY3Rpb24udmFsdWVcIjpcIk1pc3NpbmcgQWN0aW9uXCI6XCJNaXNzaW5nIG1lc3NhZ2UgY2hhbm5lbFwiOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIG1lc3NhZ2UgdGltZXRva2VuXCJ9LHVzZVBvc3Q6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scG9zdFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC5jaGFubmVsLGk9dC5tZXNzYWdlVGltZXRva2VuO3JldHVyblwiL3YxL21lc3NhZ2UtYWN0aW9ucy9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHIpLFwiL21lc3NhZ2UvXCIpLmNvbmNhdChpKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxnZXRSZXF1ZXN0SGVhZGVyczpmdW5jdGlvbigpe3JldHVybntcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwifX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oKXtyZXR1cm57fX0scG9zdFBheWxvYWQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5hY3Rpb259LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue2RhdGE6dC5kYXRhfX19KTt2YXIgbGU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5SZW1vdmVNZXNzYWdlQWN0aW9uT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC5jaGFubmVsLGk9dC5hY3Rpb25UaW1ldG9rZW47cmV0dXJuIHQubWVzc2FnZVRpbWV0b2tlbj9pP24uc3Vic2NyaWJlS2V5P3I/dm9pZCAwOlwiTWlzc2luZyBtZXNzYWdlIGNoYW5uZWxcIjpcIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwiOlwiTWlzc2luZyBhY3Rpb24gdGltZXRva2VuXCI6XCJNaXNzaW5nIG1lc3NhZ2UgdGltZXRva2VuXCJ9LHVzZURlbGV0ZTpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPXQuY2hhbm5lbCxpPXQuYWN0aW9uVGltZXRva2VuLG89dC5tZXNzYWdlVGltZXRva2VuO3JldHVyblwiL3YxL21lc3NhZ2UtYWN0aW9ucy9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHIpLFwiL21lc3NhZ2UvXCIpLmNvbmNhdChvLFwiL2FjdGlvbi9cIikuY29uY2F0KGkpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJue319LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue2RhdGE6dC5kYXRhfX19KTt2YXIgcGU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5HZXRNZXNzYWdlQWN0aW9uc09wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPXQuY2hhbm5lbDtyZXR1cm4gbi5zdWJzY3JpYmVLZXk/cj92b2lkIDA6XCJNaXNzaW5nIG1lc3NhZ2UgY2hhbm5lbFwiOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC5jaGFubmVsO3JldHVyblwiL3YxL21lc3NhZ2UtYWN0aW9ucy9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHIpKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQubGltaXQscj10LnN0YXJ0LGk9dC5lbmQsbz17fTtyZXR1cm4gbiYmKG8ubGltaXQ9biksciYmKG8uc3RhcnQ9ciksaSYmKG8uZW5kPWkpLG99LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7dmFyIG49e2RhdGE6dC5kYXRhLHN0YXJ0Om51bGwsZW5kOm51bGx9O3JldHVybiBuLmRhdGEubGVuZ3RoJiYobi5lbmQ9bi5kYXRhW24uZGF0YS5sZW5ndGgtMV0uYWN0aW9uVGltZXRva2VuLG4uc3RhcnQ9bi5kYXRhWzBdLmFjdGlvblRpbWV0b2tlbiksbn19KSxoZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5MaXN0RmlsZXNPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7aWYoIShudWxsPT10P3ZvaWQgMDp0LmNoYW5uZWwpKXJldHVyblwiY2hhbm5lbCBjYW4ndCBiZSBlbXB0eVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZztyZXR1cm5cIi92MS9maWxlcy9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbHMvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyh0LmNoYW5uZWwpLFwiL2ZpbGVzXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuIHQubGltaXQmJihuLmxpbWl0PXQubGltaXQpLHQubmV4dCYmKG4ubmV4dD10Lm5leHQpLG59LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue3N0YXR1czp0LnN0YXR1cyxkYXRhOnQuZGF0YSxuZXh0OnQubmV4dCxjb3VudDp0LmNvdW50fX19LGZlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkdlbmVyYXRlVXBsb2FkVXJsT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3JldHVybihudWxsPT10P3ZvaWQgMDp0LmNoYW5uZWwpPyhudWxsPT10P3ZvaWQgMDp0Lm5hbWUpP3ZvaWQgMDpcIm5hbWUgY2FuJ3QgYmUgZW1wdHlcIjpcImNoYW5uZWwgY2FuJ3QgYmUgZW1wdHlcIn0sdXNlUG9zdDpmdW5jdGlvbigpe3JldHVybiEwfSxwb3N0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWc7cmV0dXJuXCIvdjEvZmlsZXMvXCIuY29uY2F0KG4uc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWxzL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcodC5jaGFubmVsKSxcIi9nZW5lcmF0ZS11cGxvYWQtdXJsXCIpfSxwb3N0UGF5bG9hZDpmdW5jdGlvbihlLHQpe3JldHVybntuYW1lOnQubmFtZX19LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oKXtyZXR1cm57fX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhLGZpbGVfdXBsb2FkX3JlcXVlc3Q6dC5maWxlX3VwbG9hZF9yZXF1ZXN0fX19LGRlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTlB1Ymxpc2hGaWxlT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3JldHVybihudWxsPT10P3ZvaWQgMDp0LmNoYW5uZWwpPyhudWxsPT10P3ZvaWQgMDp0LmZpbGVJZCk/KG51bGw9PXQ/dm9pZCAwOnQuZmlsZU5hbWUpP3ZvaWQgMDpcImZpbGUgbmFtZSBjYW4ndCBiZSBlbXB0eVwiOlwiZmlsZSBpZCBjYW4ndCBiZSBlbXB0eVwiOlwiY2hhbm5lbCBjYW4ndCBiZSBlbXB0eVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPW4ucHVibGlzaEtleSxpPW4uc3Vic2NyaWJlS2V5LG89ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNyeXB0byxyPWUuY29uZmlnLGk9SlNPTi5zdHJpbmdpZnkodCk7cmV0dXJuIHIuY2lwaGVyS2V5JiYoaT1uLmVuY3J5cHQoaSksaT1KU09OLnN0cmluZ2lmeShpKSksaXx8XCJcIn0oZSx7bWVzc2FnZTp0Lm1lc3NhZ2UsZmlsZTp7bmFtZTp0LmZpbGVOYW1lLGlkOnQuZmlsZUlkfX0pO3JldHVyblwiL3YxL2ZpbGVzL3B1Ymxpc2gtZmlsZS9cIi5jb25jYXQocixcIi9cIikuY29uY2F0KGksXCIvMC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHQuY2hhbm5lbCksXCIvMC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG8pKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybiB0LnR0bCYmKG4udHRsPXQudHRsKSx2b2lkIDAhPT10LnN0b3JlSW5IaXN0b3J5JiYobi5zdG9yZT10LnN0b3JlSW5IaXN0b3J5P1wiMVwiOlwiMFwiKSx0Lm1ldGEmJlwib2JqZWN0XCI9PXR5cGVvZiB0Lm1ldGEmJihuLm1ldGE9SlNPTi5zdHJpbmdpZnkodC5tZXRhKSksbn0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57dGltZXRva2VuOnRbMl19fX0sZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuZ2VuZXJhdGVVcGxvYWRVcmwscj1lLnB1Ymxpc2hGaWxlLHM9ZS5tb2R1bGVzLGE9cy5QdWJOdWJGaWxlLHU9cy5jb25maWcsYz1zLmNyeXB0b2dyYXBoeSxsPXMubmV0d29ya2luZztyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHM9ZS5jaGFubmVsLHA9ZS5maWxlLGg9ZS5tZXNzYWdlLGY9ZS5jaXBoZXJLZXksZD1lLm1ldGEsZz1lLnR0bCx5PWUuc3RvcmVJbkhpc3Rvcnk7cmV0dXJuIGkodCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLHQsaSxiLHYsbSxfLE8sUCxTLHcsVCxrLE4sQyxFLEEsTSxqLFIsVSx4LEQsSSxHLEssRixIO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6aWYoIXMpdGhyb3cgbmV3IEwoXCJWYWxpZGF0aW9uIGZhaWxlZCwgY2hlY2sgc3RhdHVzIGZvciBkZXRhaWxzXCIsQihcImNoYW5uZWwgY2FuJ3QgYmUgZW1wdHlcIikpO2lmKCFwKXRocm93IG5ldyBMKFwiVmFsaWRhdGlvbiBmYWlsZWQsIGNoZWNrIHN0YXR1cyBmb3IgZGV0YWlsc1wiLEIoXCJmaWxlIGNhbid0IGJlIGVtcHR5XCIpKTtyZXR1cm4gZT1hLmNyZWF0ZShwKSxbNCxuKHtjaGFubmVsOnMsbmFtZTplLm5hbWV9KV07Y2FzZSAxOnJldHVybiB0PW8uc2VudCgpLGk9dC5maWxlX3VwbG9hZF9yZXF1ZXN0LGI9aS51cmwsdj1pLmZvcm1fZmllbGRzLG09dC5kYXRhLF89bS5pZCxPPW0ubmFtZSxhLnN1cHBvcnRzRW5jcnlwdEZpbGUmJihudWxsIT1mP2Y6dS5jaXBoZXJLZXkpP1s0LGMuZW5jcnlwdEZpbGUobnVsbCE9Zj9mOnUuY2lwaGVyS2V5LGUsYSldOlszLDNdO2Nhc2UgMjplPW8uc2VudCgpLG8ubGFiZWw9MztjYXNlIDM6UD12LGUubWltZVR5cGUmJihQPXYubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cIkNvbnRlbnQtVHlwZVwiPT09dC5rZXk/e2tleTp0LmtleSx2YWx1ZTplLm1pbWVUeXBlfTp0fSkpKSxvLmxhYmVsPTQ7Y2FzZSA0OnJldHVybiBvLnRyeXMucHVzaChbNCwxOCwsMjBdKSxhLnN1cHBvcnRzRmlsZVVyaSYmcC51cmk/KFQ9KHc9bCkuUE9TVEZJTEUsaz1bYixQXSxbNCxlLnRvRmlsZVVyaSgpXSk6WzMsN107Y2FzZSA1OnJldHVybls0LFQuYXBwbHkodyxrLmNvbmNhdChbby5zZW50KCldKSldO2Nhc2UgNjpyZXR1cm4gUz1vLnNlbnQoKSxbMywxN107Y2FzZSA3OnJldHVybiBhLnN1cHBvcnRzRmlsZT8oQz0oTj1sKS5QT1NURklMRSxFPVtiLFBdLFs0LGUudG9GaWxlKCldKTpbMywxMF07Y2FzZSA4OnJldHVybls0LEMuYXBwbHkoTixFLmNvbmNhdChbby5zZW50KCldKSldO2Nhc2UgOTpyZXR1cm4gUz1vLnNlbnQoKSxbMywxN107Y2FzZSAxMDpyZXR1cm4gYS5zdXBwb3J0c0J1ZmZlcj8oTT0oQT1sKS5QT1NURklMRSxqPVtiLFBdLFs0LGUudG9CdWZmZXIoKV0pOlszLDEzXTtjYXNlIDExOnJldHVybls0LE0uYXBwbHkoQSxqLmNvbmNhdChbby5zZW50KCldKSldO2Nhc2UgMTI6cmV0dXJuIFM9by5zZW50KCksWzMsMTddO2Nhc2UgMTM6cmV0dXJuIGEuc3VwcG9ydHNCbG9iPyhVPShSPWwpLlBPU1RGSUxFLHg9W2IsUF0sWzQsZS50b0Jsb2IoKV0pOlszLDE2XTtjYXNlIDE0OnJldHVybls0LFUuYXBwbHkoUix4LmNvbmNhdChbby5zZW50KCldKSldO2Nhc2UgMTU6cmV0dXJuIFM9by5zZW50KCksWzMsMTddO2Nhc2UgMTY6dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZW52aXJvbm1lbnRcIik7Y2FzZSAxNzpyZXR1cm5bMywyMF07Y2FzZSAxODpyZXR1cm4gRD1vLnNlbnQoKSxbNCwocT1ELnJlc3BvbnNlLG5ldyBQcm9taXNlKChmdW5jdGlvbihlKXt2YXIgdD1cIlwiO3Eub24oXCJkYXRhXCIsKGZ1bmN0aW9uKGUpe3QrPWUudG9TdHJpbmcoXCJ1dGY4XCIpfSkpLHEub24oXCJlbmRcIiwoZnVuY3Rpb24oKXtlKHQpfSkpfSkpKV07Y2FzZSAxOTp0aHJvdyBJPW8uc2VudCgpLEc9LzxNZXNzYWdlPiguKik8XFwvTWVzc2FnZT4vZ2kuZXhlYyhJKSxuZXcgTChHP1wiVXBsb2FkIHRvIGJ1Y2tldCBmYWlsZWQ6IFwiLmNvbmNhdChHWzFdKTpcIlVwbG9hZCB0byBidWNrZXQgZmFpbGVkLlwiLEQpO2Nhc2UgMjA6aWYoMjA0IT09Uy5zdGF0dXMpdGhyb3cgbmV3IEwoXCJVcGxvYWQgdG8gYnVja2V0IHdhcyB1bnN1Y2Nlc3NmdWxcIixTKTtLPXUuZmlsZVVwbG9hZFB1Ymxpc2hSZXRyeUxpbWl0LEY9ITEsSD17dGltZXRva2VuOlwiMFwifSxvLmxhYmVsPTIxO2Nhc2UgMjE6cmV0dXJuIG8udHJ5cy5wdXNoKFsyMSwyMywsMjRdKSxbNCxyKHtjaGFubmVsOnMsbWVzc2FnZTpoLGZpbGVJZDpfLGZpbGVOYW1lOk8sbWV0YTpkLHN0b3JlSW5IaXN0b3J5OnksdHRsOmd9KV07Y2FzZSAyMjpyZXR1cm4gSD1vLnNlbnQoKSxGPSEwLFszLDI0XTtjYXNlIDIzOnJldHVybiBvLnNlbnQoKSxLLT0xLFszLDI0XTtjYXNlIDI0OmlmKCFGJiZLPjApcmV0dXJuWzMsMjFdO28ubGFiZWw9MjU7Y2FzZSAyNTppZihGKXJldHVyblsyLHt0aW1ldG9rZW46SC50aW1ldG9rZW4saWQ6XyxuYW1lOk99XTt0aHJvdyBuZXcgTChcIlB1Ymxpc2ggZmFpbGVkLiBZb3UgbWF5IHdhbnQgdG8gZXhlY3V0ZSB0aGF0IG9wZXJhdGlvbiBtYW51YWxseSB1c2luZyBwdWJudWIucHVibGlzaEZpbGVcIix7Y2hhbm5lbDpzLGlkOl8sbmFtZTpPfSl9dmFyIHF9KSl9KSl9fShlKTtyZXR1cm4gZnVuY3Rpb24oZSxuKXt2YXIgcj10KGUpO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KHIudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIG4obnVsbCxlKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxudWxsKX0pKSxyKTpyfX0seWU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWwscj10LmlkLGk9dC5uYW1lLG89ZS5jb25maWcscz1lLm5ldHdvcmtpbmc7aWYoIW4pdGhyb3cgbmV3IEwoXCJWYWxpZGF0aW9uIGZhaWxlZCwgY2hlY2sgc3RhdHVzIGZvciBkZXRhaWxzXCIsQihcImNoYW5uZWwgY2FuJ3QgYmUgZW1wdHlcIikpO2lmKCFyKXRocm93IG5ldyBMKFwiVmFsaWRhdGlvbiBmYWlsZWQsIGNoZWNrIHN0YXR1cyBmb3IgZGV0YWlsc1wiLEIoXCJmaWxlIGlkIGNhbid0IGJlIGVtcHR5XCIpKTtpZighaSl0aHJvdyBuZXcgTChcIlZhbGlkYXRpb24gZmFpbGVkLCBjaGVjayBzdGF0dXMgZm9yIGRldGFpbHNcIixCKFwiZmlsZSBuYW1lIGNhbid0IGJlIGVtcHR5XCIpKTt2YXIgYT1cIi92MS9maWxlcy9cIi5jb25jYXQoby5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbHMvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhuKSxcIi9maWxlcy9cIikuY29uY2F0KHIsXCIvXCIpLmNvbmNhdChpKSx1PXt9O3UudXVpZD1vLmdldFVVSUQoKSx1LnBuc2RrPXEobyksby5nZXRBdXRoS2V5KCkmJih1LmF1dGg9by5nZXRBdXRoS2V5KCkpLG8uc2VjcmV0S2V5JiZWKGUsYSx1LHt9LHtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm5cIlB1Yk51YkdldEZpbGVVcmxPcGVyYXRpb25cIn19KTt2YXIgYz1PYmplY3Qua2V5cyh1KS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwiXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChlKSxcIj1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudCh1W2VdKSl9KSkuam9pbihcIiZcIik7cmV0dXJuXCJcIiE9PWM/XCJcIi5jb25jYXQocy5nZXRTdGFuZGFyZE9yaWdpbigpKS5jb25jYXQoYSxcIj9cIikuY29uY2F0KGMpOlwiXCIuY29uY2F0KHMuZ2V0U3RhbmRhcmRPcmlnaW4oKSkuY29uY2F0KGEpfSxiZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5Eb3dubG9hZEZpbGVPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbCk/KG51bGw9PXQ/dm9pZCAwOnQubmFtZSk/KG51bGw9PXQ/dm9pZCAwOnQuaWQpP3ZvaWQgMDpcImlkIGNhbid0IGJlIGVtcHR5XCI6XCJuYW1lIGNhbid0IGJlIGVtcHR5XCI6XCJjaGFubmVsIGNhbid0IGJlIGVtcHR5XCJ9LHVzZUdldEZpbGU6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sZ2V0RmlsZVVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnO3JldHVyblwiL3YxL2ZpbGVzL1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9jaGFubmVscy9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHQuY2hhbm5lbCksXCIvZmlsZXMvXCIpLmNvbmNhdCh0LmlkLFwiL1wiKS5jb25jYXQodC5uYW1lKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0saWdub3JlQm9keTpmdW5jdGlvbigpe3JldHVybiEwfSxmb3JjZUJ1ZmZlcmVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oKXtyZXR1cm57fX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUuUHViTnViRmlsZSxzPWUuY29uZmlnLGE9ZS5jcnlwdG9ncmFwaHk7cmV0dXJuIGkodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsaSx1LGM7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24obyl7c3dpdGNoKG8ubGFiZWwpe2Nhc2UgMDpyZXR1cm4gZT10LnJlc3BvbnNlLmJvZHksci5zdXBwb3J0c0VuY3J5cHRGaWxlJiYobnVsbCE9PShpPW4uY2lwaGVyS2V5KSYmdm9pZCAwIT09aT9pOnMuY2lwaGVyS2V5KT9bNCxhLmRlY3J5cHQobnVsbCE9PSh1PW4uY2lwaGVyS2V5KSYmdm9pZCAwIT09dT91OnMuY2lwaGVyS2V5LGUpXTpbMywyXTtjYXNlIDE6ZT1vLnNlbnQoKSxvLmxhYmVsPTI7Y2FzZSAyOnJldHVyblsyLHIuY3JlYXRlKHtkYXRhOmUsbmFtZTpudWxsIT09KGM9dC5yZXNwb25zZS5uYW1lKSYmdm9pZCAwIT09Yz9jOm4ubmFtZSxtaW1lVHlwZTp0LnJlc3BvbnNlLnR5cGV9KV19fSkpfSkpfX0sdmU9e2dldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOTGlzdEZpbGVzT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3JldHVybihudWxsPT10P3ZvaWQgMDp0LmNoYW5uZWwpPyhudWxsPT10P3ZvaWQgMDp0LmlkKT8obnVsbD09dD92b2lkIDA6dC5uYW1lKT92b2lkIDA6XCJmaWxlIG5hbWUgY2FuJ3QgYmUgZW1wdHlcIjpcImZpbGUgaWQgY2FuJ3QgYmUgZW1wdHlcIjpcImNoYW5uZWwgY2FuJ3QgYmUgZW1wdHlcIn0sdXNlRGVsZXRlOmZ1bmN0aW9uKCl7cmV0dXJuITB9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnO3JldHVyblwiL3YxL2ZpbGVzL1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9jaGFubmVscy9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHQuY2hhbm5lbCksXCIvZmlsZXMvXCIpLmNvbmNhdCh0LmlkLFwiL1wiKS5jb25jYXQodC5uYW1lKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbigpe3JldHVybnt9fSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybntzdGF0dXM6dC5zdGF0dXN9fX0sbWU9e2dldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOR2V0QWxsVVVJRE1ldGFkYXRhT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbigpe30sZ2V0VVJMOmZ1bmN0aW9uKGUpe3ZhciB0PWUuY29uZmlnO3JldHVyblwiL3YyL29iamVjdHMvXCIuY29uY2F0KHQuc3Vic2NyaWJlS2V5LFwiL3V1aWRzXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8scyx1LGMsbCxwLGg9e2luY2x1ZGU6W1wic3RhdHVzXCIsXCJ0eXBlXCJdfTtyZXR1cm4obnVsbD09dD92b2lkIDA6dC5pbmNsdWRlKSYmKG51bGw9PT0obj10LmluY2x1ZGUpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmN1c3RvbUZpZWxkcykmJmguaW5jbHVkZS5wdXNoKFwiY3VzdG9tXCIpLGguaW5jbHVkZT1oLmluY2x1ZGUuam9pbihcIixcIiksKG51bGw9PT0ocj1udWxsPT10P3ZvaWQgMDp0LmluY2x1ZGUpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnRvdGFsQ291bnQpJiYoaC5jb3VudD1udWxsPT09KGk9dC5pbmNsdWRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS50b3RhbENvdW50KSwobnVsbD09PShvPW51bGw9PXQ/dm9pZCAwOnQucGFnZSl8fHZvaWQgMD09PW8/dm9pZCAwOm8ubmV4dCkmJihoLnN0YXJ0PW51bGw9PT0ocz10LnBhZ2UpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLm5leHQpLChudWxsPT09KHU9bnVsbD09dD92b2lkIDA6dC5wYWdlKXx8dm9pZCAwPT09dT92b2lkIDA6dS5wcmV2KSYmKGguZW5kPW51bGw9PT0oYz10LnBhZ2UpfHx2b2lkIDA9PT1jP3ZvaWQgMDpjLnByZXYpLChudWxsPT10P3ZvaWQgMDp0LmZpbHRlcikmJihoLmZpbHRlcj10LmZpbHRlciksaC5saW1pdD1udWxsIT09KGw9bnVsbD09dD92b2lkIDA6dC5saW1pdCkmJnZvaWQgMCE9PWw/bDoxMDAsKG51bGw9PXQ/dm9pZCAwOnQuc29ydCkmJihoLnNvcnQ9T2JqZWN0LmVudHJpZXMobnVsbCE9PShwPXQuc29ydCkmJnZvaWQgMCE9PXA/cDp7fSkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1hKGUsMiksbj10WzBdLHI9dFsxXTtyZXR1cm5cImFzY1wiPT09cnx8XCJkZXNjXCI9PT1yP1wiXCIuY29uY2F0KG4sXCI6XCIpLmNvbmNhdChyKTpufSkpKSxofSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybntzdGF0dXM6dC5zdGF0dXMsZGF0YTp0LmRhdGEsdG90YWxDb3VudDp0LnRvdGFsQ291bnQsbmV4dDp0Lm5leHQscHJldjp0LnByZXZ9fX0sX2U9e2dldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOR2V0VVVJRE1ldGFkYXRhT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbigpe30sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lLmNvbmZpZztyZXR1cm5cIi92Mi9vYmplY3RzL1wiLmNvbmNhdChyLnN1YnNjcmliZUtleSxcIi91dWlkcy9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG51bGwhPT0obj1udWxsPT10P3ZvaWQgMDp0LnV1aWQpJiZ2b2lkIDAhPT1uP246ci5nZXRVVUlEKCkpKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT1lLmNvbmZpZyxvPXt9O3JldHVybiBvLnV1aWQ9bnVsbCE9PShuPW51bGw9PXQ/dm9pZCAwOnQudXVpZCkmJnZvaWQgMCE9PW4/bjppLmdldFVVSUQoKSxvLmluY2x1ZGU9W1wic3RhdHVzXCIsXCJ0eXBlXCIsXCJjdXN0b21cIl0sKG51bGw9PXQ/dm9pZCAwOnQuaW5jbHVkZSkmJiExPT09KG51bGw9PT0ocj10LmluY2x1ZGUpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmN1c3RvbUZpZWxkcykmJm8uaW5jbHVkZS5wb3AoKSxvLmluY2x1ZGU9by5pbmNsdWRlLmpvaW4oXCIsXCIpLG99LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue3N0YXR1czp0LnN0YXR1cyxkYXRhOnQuZGF0YX19fSxPZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5TZXRVVUlETWV0YWRhdGFPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7aWYoIShudWxsPT10P3ZvaWQgMDp0LmRhdGEpKXJldHVyblwiRGF0YSBjYW5ub3QgYmUgZW1wdHlcIn0sdXNlUGF0Y2g6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scGF0Y2hVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWUuY29uZmlnO3JldHVyblwiL3YyL29iamVjdHMvXCIuY29uY2F0KHIuc3Vic2NyaWJlS2V5LFwiL3V1aWRzL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcobnVsbCE9PShuPXQudXVpZCkmJnZvaWQgMCE9PW4/bjpyLmdldFVVSUQoKSkpfSxwYXRjaFBheWxvYWQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5kYXRhfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpPWUuY29uZmlnLG89e307cmV0dXJuIG8udXVpZD1udWxsIT09KG49bnVsbD09dD92b2lkIDA6dC51dWlkKSYmdm9pZCAwIT09bj9uOmkuZ2V0VVVJRCgpLG8uaW5jbHVkZT1bXCJzdGF0dXNcIixcInR5cGVcIixcImN1c3RvbVwiXSwobnVsbD09dD92b2lkIDA6dC5pbmNsdWRlKSYmITE9PT0obnVsbD09PShyPXQuaW5jbHVkZSl8fHZvaWQgMD09PXI/dm9pZCAwOnIuY3VzdG9tRmllbGRzKSYmby5pbmNsdWRlLnBvcCgpLG8uaW5jbHVkZT1vLmluY2x1ZGUuam9pbihcIixcIiksb30saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhfX19LFBlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTlJlbW92ZVVVSURNZXRhZGF0YU9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oKXt9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZS5jb25maWc7cmV0dXJuXCIvdjIvb2JqZWN0cy9cIi5jb25jYXQoci5zdWJzY3JpYmVLZXksXCIvdXVpZHMvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhudWxsIT09KG49bnVsbD09dD92b2lkIDA6dC51dWlkKSYmdm9pZCAwIT09bj9uOnIuZ2V0VVVJRCgpKSl9LHVzZURlbGV0ZTpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lLmNvbmZpZztyZXR1cm57dXVpZDpudWxsIT09KG49bnVsbD09dD92b2lkIDA6dC51dWlkKSYmdm9pZCAwIT09bj9uOnIuZ2V0VVVJRCgpfX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhfX19LFNlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkdldEFsbENoYW5uZWxNZXRhZGF0YU9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oKXt9LGdldFVSTDpmdW5jdGlvbihlKXt2YXIgdD1lLmNvbmZpZztyZXR1cm5cIi92Mi9vYmplY3RzL1wiLmNvbmNhdCh0LnN1YnNjcmliZUtleSxcIi9jaGFubmVsc1wiKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLHMsdSxjLGwscCxoPXtpbmNsdWRlOltcInN0YXR1c1wiLFwidHlwZVwiXX07cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuaW5jbHVkZSkmJihudWxsPT09KG49dC5pbmNsdWRlKXx8dm9pZCAwPT09bj92b2lkIDA6bi5jdXN0b21GaWVsZHMpJiZoLmluY2x1ZGUucHVzaChcImN1c3RvbVwiKSxoLmluY2x1ZGU9aC5pbmNsdWRlLmpvaW4oXCIsXCIpLChudWxsPT09KHI9bnVsbD09dD92b2lkIDA6dC5pbmNsdWRlKXx8dm9pZCAwPT09cj92b2lkIDA6ci50b3RhbENvdW50KSYmKGguY291bnQ9bnVsbD09PShpPXQuaW5jbHVkZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkudG90YWxDb3VudCksKG51bGw9PT0obz1udWxsPT10P3ZvaWQgMDp0LnBhZ2UpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLm5leHQpJiYoaC5zdGFydD1udWxsPT09KHM9dC5wYWdlKXx8dm9pZCAwPT09cz92b2lkIDA6cy5uZXh0KSwobnVsbD09PSh1PW51bGw9PXQ/dm9pZCAwOnQucGFnZSl8fHZvaWQgMD09PXU/dm9pZCAwOnUucHJldikmJihoLmVuZD1udWxsPT09KGM9dC5wYWdlKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy5wcmV2KSwobnVsbD09dD92b2lkIDA6dC5maWx0ZXIpJiYoaC5maWx0ZXI9dC5maWx0ZXIpLGgubGltaXQ9bnVsbCE9PShsPW51bGw9PXQ/dm9pZCAwOnQubGltaXQpJiZ2b2lkIDAhPT1sP2w6MTAwLChudWxsPT10P3ZvaWQgMDp0LnNvcnQpJiYoaC5zb3J0PU9iamVjdC5lbnRyaWVzKG51bGwhPT0ocD10LnNvcnQpJiZ2b2lkIDAhPT1wP3A6e30pLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9YShlLDIpLG49dFswXSxyPXRbMV07cmV0dXJuXCJhc2NcIj09PXJ8fFwiZGVzY1wiPT09cj9cIlwiLmNvbmNhdChuLFwiOlwiKS5jb25jYXQocik6bn0pKSksaH0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhLHRvdGFsQ291bnQ6dC50b3RhbENvdW50LHByZXY6dC5wcmV2LG5leHQ6dC5uZXh0fX19LHdlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkdldENoYW5uZWxNZXRhZGF0YU9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXtpZighKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbCkpcmV0dXJuXCJDaGFubmVsIGNhbm5vdCBiZSBlbXB0eVwifSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZztyZXR1cm5cIi92Mi9vYmplY3RzL1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9jaGFubmVscy9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHQuY2hhbm5lbCkpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj17aW5jbHVkZTpbXCJzdGF0dXNcIixcInR5cGVcIixcImN1c3RvbVwiXX07cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuaW5jbHVkZSkmJiExPT09KG51bGw9PT0obj10LmluY2x1ZGUpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmN1c3RvbUZpZWxkcykmJnIuaW5jbHVkZS5wb3AoKSxyLmluY2x1ZGU9ci5pbmNsdWRlLmpvaW4oXCIsXCIpLHJ9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue3N0YXR1czp0LnN0YXR1cyxkYXRhOnQuZGF0YX19fSxUZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5TZXRDaGFubmVsTWV0YWRhdGFPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbCk/KG51bGw9PXQ/dm9pZCAwOnQuZGF0YSk/dm9pZCAwOlwiRGF0YSBjYW5ub3QgYmUgZW1wdHlcIjpcIkNoYW5uZWwgY2Fubm90IGJlIGVtcHR5XCJ9LHVzZVBhdGNoOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHBhdGNoVVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWc7cmV0dXJuXCIvdjIvb2JqZWN0cy9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbHMvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyh0LmNoYW5uZWwpKX0scGF0Y2hQYXlsb2FkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuZGF0YX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuLHI9e2luY2x1ZGU6W1wic3RhdHVzXCIsXCJ0eXBlXCIsXCJjdXN0b21cIl19O3JldHVybihudWxsPT10P3ZvaWQgMDp0LmluY2x1ZGUpJiYhMT09PShudWxsPT09KG49dC5pbmNsdWRlKXx8dm9pZCAwPT09bj92b2lkIDA6bi5jdXN0b21GaWVsZHMpJiZyLmluY2x1ZGUucG9wKCksci5pbmNsdWRlPXIuaW5jbHVkZS5qb2luKFwiLFwiKSxyfSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybntzdGF0dXM6dC5zdGF0dXMsZGF0YTp0LmRhdGF9fX0sa2U9e2dldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOUmVtb3ZlQ2hhbm5lbE1ldGFkYXRhT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe2lmKCEobnVsbD09dD92b2lkIDA6dC5jaGFubmVsKSlyZXR1cm5cIkNoYW5uZWwgY2Fubm90IGJlIGVtcHR5XCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnO3JldHVyblwiL3YyL29iamVjdHMvXCIuY29uY2F0KG4uc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWxzL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcodC5jaGFubmVsKSl9LHVzZURlbGV0ZTpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJue319LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue3N0YXR1czp0LnN0YXR1cyxkYXRhOnQuZGF0YX19fSxOZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5HZXRNZW1iZXJzT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe2lmKCEobnVsbD09dD92b2lkIDA6dC5jaGFubmVsKSlyZXR1cm5cIlVVSUQgY2Fubm90IGJlIGVtcHR5XCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnO3JldHVyblwiL3YyL29iamVjdHMvXCIuY29uY2F0KG4uc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWxzL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcodC5jaGFubmVsKSxcIi91dWlkc1wiKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLHMsdSxjLGwscCxoLGYsZCxnPXtpbmNsdWRlOltcInV1aWQuc3RhdHVzXCIsXCJ1dWlkLnR5cGVcIixcInR5cGVcIl19O3JldHVybihudWxsPT10P3ZvaWQgMDp0LmluY2x1ZGUpJiYoKG51bGw9PT0obj10LmluY2x1ZGUpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmN1c3RvbUZpZWxkcykmJmcuaW5jbHVkZS5wdXNoKFwiY3VzdG9tXCIpLChudWxsPT09KHI9dC5pbmNsdWRlKXx8dm9pZCAwPT09cj92b2lkIDA6ci5jdXN0b21VVUlERmllbGRzKSYmZy5pbmNsdWRlLnB1c2goXCJ1dWlkLmN1c3RvbVwiKSwobnVsbD09PShvPW51bGw9PT0oaT10LmluY2x1ZGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLlVVSURGaWVsZHMpfHx2b2lkIDA9PT1vfHxvKSYmZy5pbmNsdWRlLnB1c2goXCJ1dWlkXCIpKSxnLmluY2x1ZGU9Zy5pbmNsdWRlLmpvaW4oXCIsXCIpLChudWxsPT09KHM9bnVsbD09dD92b2lkIDA6dC5pbmNsdWRlKXx8dm9pZCAwPT09cz92b2lkIDA6cy50b3RhbENvdW50KSYmKGcuY291bnQ9bnVsbD09PSh1PXQuaW5jbHVkZSl8fHZvaWQgMD09PXU/dm9pZCAwOnUudG90YWxDb3VudCksKG51bGw9PT0oYz1udWxsPT10P3ZvaWQgMDp0LnBhZ2UpfHx2b2lkIDA9PT1jP3ZvaWQgMDpjLm5leHQpJiYoZy5zdGFydD1udWxsPT09KGw9dC5wYWdlKXx8dm9pZCAwPT09bD92b2lkIDA6bC5uZXh0KSwobnVsbD09PShwPW51bGw9PXQ/dm9pZCAwOnQucGFnZSl8fHZvaWQgMD09PXA/dm9pZCAwOnAucHJldikmJihnLmVuZD1udWxsPT09KGg9dC5wYWdlKXx8dm9pZCAwPT09aD92b2lkIDA6aC5wcmV2KSwobnVsbD09dD92b2lkIDA6dC5maWx0ZXIpJiYoZy5maWx0ZXI9dC5maWx0ZXIpLGcubGltaXQ9bnVsbCE9PShmPW51bGw9PXQ/dm9pZCAwOnQubGltaXQpJiZ2b2lkIDAhPT1mP2Y6MTAwLChudWxsPT10P3ZvaWQgMDp0LnNvcnQpJiYoZy5zb3J0PU9iamVjdC5lbnRyaWVzKG51bGwhPT0oZD10LnNvcnQpJiZ2b2lkIDAhPT1kP2Q6e30pLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9YShlLDIpLG49dFswXSxyPXRbMV07cmV0dXJuXCJhc2NcIj09PXJ8fFwiZGVzY1wiPT09cj9cIlwiLmNvbmNhdChuLFwiOlwiKS5jb25jYXQocik6bn0pKSksZ30saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhLHRvdGFsQ291bnQ6dC50b3RhbENvdW50LHByZXY6dC5wcmV2LG5leHQ6dC5uZXh0fX19LENlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTlNldE1lbWJlcnNPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbCk/KG51bGw9PXQ/dm9pZCAwOnQudXVpZHMpJiYwIT09KG51bGw9PXQ/dm9pZCAwOnQudXVpZHMubGVuZ3RoKT92b2lkIDA6XCJVVUlEcyBjYW5ub3QgYmUgZW1wdHlcIjpcIkNoYW5uZWwgY2Fubm90IGJlIGVtcHR5XCJ9LHVzZVBhdGNoOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHBhdGNoVVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWc7cmV0dXJuXCIvdjIvb2JqZWN0cy9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbHMvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyh0LmNoYW5uZWwpLFwiL3V1aWRzXCIpfSxwYXRjaFBheWxvYWQ6ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4obj17c2V0OltdLGRlbGV0ZTpbXX0pW3QudHlwZV09dC51dWlkcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3t1dWlkOntpZDplfX06e3V1aWQ6e2lkOmUuaWR9LGN1c3RvbTplLmN1c3RvbSxzdGF0dXM6ZS5zdGF0dXN9fSkpLG59LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxzLHUsYyxsLHAsaD17aW5jbHVkZTpbXCJ1dWlkLnN0YXR1c1wiLFwidXVpZC50eXBlXCIsXCJ0eXBlXCJdfTtyZXR1cm4obnVsbD09dD92b2lkIDA6dC5pbmNsdWRlKSYmKChudWxsPT09KG49dC5pbmNsdWRlKXx8dm9pZCAwPT09bj92b2lkIDA6bi5jdXN0b21GaWVsZHMpJiZoLmluY2x1ZGUucHVzaChcImN1c3RvbVwiKSwobnVsbD09PShyPXQuaW5jbHVkZSl8fHZvaWQgMD09PXI/dm9pZCAwOnIuY3VzdG9tVVVJREZpZWxkcykmJmguaW5jbHVkZS5wdXNoKFwidXVpZC5jdXN0b21cIiksKG51bGw9PT0oaT10LmluY2x1ZGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLlVVSURGaWVsZHMpJiZoLmluY2x1ZGUucHVzaChcInV1aWRcIikpLGguaW5jbHVkZT1oLmluY2x1ZGUuam9pbihcIixcIiksKG51bGw9PT0obz1udWxsPT10P3ZvaWQgMDp0LmluY2x1ZGUpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnRvdGFsQ291bnQpJiYoaC5jb3VudD0hMCksKG51bGw9PT0ocz1udWxsPT10P3ZvaWQgMDp0LnBhZ2UpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLm5leHQpJiYoaC5zdGFydD1udWxsPT09KHU9dC5wYWdlKXx8dm9pZCAwPT09dT92b2lkIDA6dS5uZXh0KSwobnVsbD09PShjPW51bGw9PXQ/dm9pZCAwOnQucGFnZSl8fHZvaWQgMD09PWM/dm9pZCAwOmMucHJldikmJihoLmVuZD1udWxsPT09KGw9dC5wYWdlKXx8dm9pZCAwPT09bD92b2lkIDA6bC5wcmV2KSwobnVsbD09dD92b2lkIDA6dC5maWx0ZXIpJiYoaC5maWx0ZXI9dC5maWx0ZXIpLG51bGwhPXQubGltaXQmJihoLmxpbWl0PXQubGltaXQpLChudWxsPT10P3ZvaWQgMDp0LnNvcnQpJiYoaC5zb3J0PU9iamVjdC5lbnRyaWVzKG51bGwhPT0ocD10LnNvcnQpJiZ2b2lkIDAhPT1wP3A6e30pLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9YShlLDIpLG49dFswXSxyPXRbMV07cmV0dXJuXCJhc2NcIj09PXJ8fFwiZGVzY1wiPT09cj9cIlwiLmNvbmNhdChuLFwiOlwiKS5jb25jYXQocik6bn0pKSksaH0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhLHRvdGFsQ291bnQ6dC50b3RhbENvdW50LHByZXY6dC5wcmV2LG5leHQ6dC5uZXh0fX19LEVlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkdldE1lbWJlcnNoaXBzT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbigpe30sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lLmNvbmZpZztyZXR1cm5cIi92Mi9vYmplY3RzL1wiLmNvbmNhdChyLnN1YnNjcmliZUtleSxcIi91dWlkcy9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG51bGwhPT0obj1udWxsPT10P3ZvaWQgMDp0LnV1aWQpJiZ2b2lkIDAhPT1uP246ci5nZXRVVUlEKCkpLFwiL2NoYW5uZWxzXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8scyx1LGMsbCxwLGgsZixkPXtpbmNsdWRlOltcImNoYW5uZWwuc3RhdHVzXCIsXCJjaGFubmVsLnR5cGVcIixcInN0YXR1c1wiXX07cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuaW5jbHVkZSkmJigobnVsbD09PShuPXQuaW5jbHVkZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4uY3VzdG9tRmllbGRzKSYmZC5pbmNsdWRlLnB1c2goXCJjdXN0b21cIiksKG51bGw9PT0ocj10LmluY2x1ZGUpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLmN1c3RvbUNoYW5uZWxGaWVsZHMpJiZkLmluY2x1ZGUucHVzaChcImNoYW5uZWwuY3VzdG9tXCIpLChudWxsPT09KGk9dC5pbmNsdWRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jaGFubmVsRmllbGRzKSYmZC5pbmNsdWRlLnB1c2goXCJjaGFubmVsXCIpKSxkLmluY2x1ZGU9ZC5pbmNsdWRlLmpvaW4oXCIsXCIpLChudWxsPT09KG89bnVsbD09dD92b2lkIDA6dC5pbmNsdWRlKXx8dm9pZCAwPT09bz92b2lkIDA6by50b3RhbENvdW50KSYmKGQuY291bnQ9bnVsbD09PShzPXQuaW5jbHVkZSl8fHZvaWQgMD09PXM/dm9pZCAwOnMudG90YWxDb3VudCksKG51bGw9PT0odT1udWxsPT10P3ZvaWQgMDp0LnBhZ2UpfHx2b2lkIDA9PT11P3ZvaWQgMDp1Lm5leHQpJiYoZC5zdGFydD1udWxsPT09KGM9dC5wYWdlKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy5uZXh0KSwobnVsbD09PShsPW51bGw9PXQ/dm9pZCAwOnQucGFnZSl8fHZvaWQgMD09PWw/dm9pZCAwOmwucHJldikmJihkLmVuZD1udWxsPT09KHA9dC5wYWdlKXx8dm9pZCAwPT09cD92b2lkIDA6cC5wcmV2KSwobnVsbD09dD92b2lkIDA6dC5maWx0ZXIpJiYoZC5maWx0ZXI9dC5maWx0ZXIpLGQubGltaXQ9bnVsbCE9PShoPW51bGw9PXQ/dm9pZCAwOnQubGltaXQpJiZ2b2lkIDAhPT1oP2g6MTAwLChudWxsPT10P3ZvaWQgMDp0LnNvcnQpJiYoZC5zb3J0PU9iamVjdC5lbnRyaWVzKG51bGwhPT0oZj10LnNvcnQpJiZ2b2lkIDAhPT1mP2Y6e30pLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9YShlLDIpLG49dFswXSxyPXRbMV07cmV0dXJuXCJhc2NcIj09PXJ8fFwiZGVzY1wiPT09cj9cIlwiLmNvbmNhdChuLFwiOlwiKS5jb25jYXQocik6bn0pKSksZH0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhLHRvdGFsQ291bnQ6dC50b3RhbENvdW50LHByZXY6dC5wcmV2LG5leHQ6dC5uZXh0fX19LEFlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTlNldE1lbWJlcnNoaXBzT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe2lmKCEobnVsbD09dD92b2lkIDA6dC5jaGFubmVscyl8fDA9PT0obnVsbD09dD92b2lkIDA6dC5jaGFubmVscy5sZW5ndGgpKXJldHVyblwiQ2hhbm5lbHMgY2Fubm90IGJlIGVtcHR5XCJ9LHVzZVBhdGNoOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHBhdGNoVVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lLmNvbmZpZztyZXR1cm5cIi92Mi9vYmplY3RzL1wiLmNvbmNhdChyLnN1YnNjcmliZUtleSxcIi91dWlkcy9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG51bGwhPT0obj10LnV1aWQpJiZ2b2lkIDAhPT1uP246ci5nZXRVVUlEKCkpLFwiL2NoYW5uZWxzXCIpfSxwYXRjaFBheWxvYWQ6ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4obj17c2V0OltdLGRlbGV0ZTpbXX0pW3QudHlwZV09dC5jaGFubmVscy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3tjaGFubmVsOntpZDplfX06e2NoYW5uZWw6e2lkOmUuaWR9LGN1c3RvbTplLmN1c3RvbSxzdGF0dXM6ZS5zdGF0dXN9fSkpLG59LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxzLHUsYyxsLHAsaD17aW5jbHVkZTpbXCJjaGFubmVsLnN0YXR1c1wiLFwiY2hhbm5lbC50eXBlXCIsXCJzdGF0dXNcIl19O3JldHVybihudWxsPT10P3ZvaWQgMDp0LmluY2x1ZGUpJiYoKG51bGw9PT0obj10LmluY2x1ZGUpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLmN1c3RvbUZpZWxkcykmJmguaW5jbHVkZS5wdXNoKFwiY3VzdG9tXCIpLChudWxsPT09KHI9dC5pbmNsdWRlKXx8dm9pZCAwPT09cj92b2lkIDA6ci5jdXN0b21DaGFubmVsRmllbGRzKSYmaC5pbmNsdWRlLnB1c2goXCJjaGFubmVsLmN1c3RvbVwiKSwobnVsbD09PShpPXQuaW5jbHVkZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2hhbm5lbEZpZWxkcykmJmguaW5jbHVkZS5wdXNoKFwiY2hhbm5lbFwiKSksaC5pbmNsdWRlPWguaW5jbHVkZS5qb2luKFwiLFwiKSwobnVsbD09PShvPW51bGw9PXQ/dm9pZCAwOnQuaW5jbHVkZSl8fHZvaWQgMD09PW8/dm9pZCAwOm8udG90YWxDb3VudCkmJihoLmNvdW50PSEwKSwobnVsbD09PShzPW51bGw9PXQ/dm9pZCAwOnQucGFnZSl8fHZvaWQgMD09PXM/dm9pZCAwOnMubmV4dCkmJihoLnN0YXJ0PW51bGw9PT0odT10LnBhZ2UpfHx2b2lkIDA9PT11P3ZvaWQgMDp1Lm5leHQpLChudWxsPT09KGM9bnVsbD09dD92b2lkIDA6dC5wYWdlKXx8dm9pZCAwPT09Yz92b2lkIDA6Yy5wcmV2KSYmKGguZW5kPW51bGw9PT0obD10LnBhZ2UpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnByZXYpLChudWxsPT10P3ZvaWQgMDp0LmZpbHRlcikmJihoLmZpbHRlcj10LmZpbHRlciksbnVsbCE9dC5saW1pdCYmKGgubGltaXQ9dC5saW1pdCksKG51bGw9PXQ/dm9pZCAwOnQuc29ydCkmJihoLnNvcnQ9T2JqZWN0LmVudHJpZXMobnVsbCE9PShwPXQuc29ydCkmJnZvaWQgMCE9PXA/cDp7fSkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1hKGUsMiksbj10WzBdLHI9dFsxXTtyZXR1cm5cImFzY1wiPT09cnx8XCJkZXNjXCI9PT1yP1wiXCIuY29uY2F0KG4sXCI6XCIpLmNvbmNhdChyKTpufSkpKSxofSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybntzdGF0dXM6dC5zdGF0dXMsZGF0YTp0LmRhdGEsdG90YWxDb3VudDp0LnRvdGFsQ291bnQscHJldjp0LnByZXYsbmV4dDp0Lm5leHR9fX07dmFyIE1lPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOQWNjZXNzTWFuYWdlckF1ZGl0fSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlKXtpZighZS5jb25maWcuc3Vic2NyaWJlS2V5KXJldHVyblwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCJ9LGdldFVSTDpmdW5jdGlvbihlKXt2YXIgdD1lLmNvbmZpZztyZXR1cm5cIi92Mi9hdXRoL2F1ZGl0L3N1Yi1rZXkvXCIuY29uY2F0KHQuc3Vic2NyaWJlS2V5KX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbCxyPXQuY2hhbm5lbEdyb3VwLGk9dC5hdXRoS2V5cyxvPXZvaWQgMD09PWk/W106aSxzPXt9O3JldHVybiBuJiYocy5jaGFubmVsPW4pLHImJihzW1wiY2hhbm5lbC1ncm91cFwiXT1yKSxvLmxlbmd0aD4wJiYocy5hdXRoPW8uam9pbihcIixcIikpLHN9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQucGF5bG9hZH19KTt2YXIgamU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5BY2Nlc3NNYW5hZ2VyR3JhbnR9LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWc7cmV0dXJuIG4uc3Vic2NyaWJlS2V5P24ucHVibGlzaEtleT9uLnNlY3JldEtleT9udWxsPT10LnV1aWRzfHx0LmF1dGhLZXlzP251bGw9PXQudXVpZHN8fG51bGw9PXQuY2hhbm5lbHMmJm51bGw9PXQuY2hhbm5lbEdyb3Vwcz92b2lkIDA6XCJCb3RoIGNoYW5uZWwvY2hhbm5lbGdyb3VwIGFuZCB1dWlkIGNhbm5vdCBiZSB1c2VkIGluIHRoZSBzYW1lIHJlcXVlc3RcIjpcImF1dGhLZXlzIGFyZSByZXF1aXJlZCBmb3IgZ3JhbnQgcmVxdWVzdCBvbiB1dWlkc1wiOlwiTWlzc2luZyBTZWNyZXQgS2V5XCI6XCJNaXNzaW5nIFB1Ymxpc2ggS2V5XCI6XCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUpe3ZhciB0PWUuY29uZmlnO3JldHVyblwiL3YyL2F1dGgvZ3JhbnQvc3ViLWtleS9cIi5jb25jYXQodC5zdWJzY3JpYmVLZXkpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVscyxyPXZvaWQgMD09PW4/W106bixpPXQuY2hhbm5lbEdyb3VwcyxvPXZvaWQgMD09PWk/W106aSxzPXQudXVpZHMsYT12b2lkIDA9PT1zP1tdOnMsdT10LnR0bCxjPXQucmVhZCxsPXZvaWQgMCE9PWMmJmMscD10LndyaXRlLGg9dm9pZCAwIT09cCYmcCxmPXQubWFuYWdlLGQ9dm9pZCAwIT09ZiYmZixnPXQuZ2V0LHk9dm9pZCAwIT09ZyYmZyxiPXQuam9pbix2PXZvaWQgMCE9PWImJmIsbT10LnVwZGF0ZSxfPXZvaWQgMCE9PW0mJm0sTz10LmF1dGhLZXlzLFA9dm9pZCAwPT09Tz9bXTpPLFM9dC5kZWxldGUsdz17fTtyZXR1cm4gdy5yPWw/XCIxXCI6XCIwXCIsdy53PWg/XCIxXCI6XCIwXCIsdy5tPWQ/XCIxXCI6XCIwXCIsdy5kPVM/XCIxXCI6XCIwXCIsdy5nPXk/XCIxXCI6XCIwXCIsdy5qPXY/XCIxXCI6XCIwXCIsdy51PV8/XCIxXCI6XCIwXCIsci5sZW5ndGg+MCYmKHcuY2hhbm5lbD1yLmpvaW4oXCIsXCIpKSxvLmxlbmd0aD4wJiYod1tcImNoYW5uZWwtZ3JvdXBcIl09by5qb2luKFwiLFwiKSksUC5sZW5ndGg+MCYmKHcuYXV0aD1QLmpvaW4oXCIsXCIpKSxhLmxlbmd0aD4wJiYod1tcInRhcmdldC11dWlkXCJdPWEuam9pbihcIixcIikpLCh1fHwwPT09dSkmJih3LnR0bD11KSx3fSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbigpe3JldHVybnt9fX0pO2Z1bmN0aW9uIFJlKGUpe3ZhciB0PTA7cmV0dXJuIGUuam9pbiYmKHR8PTEyOCksZS51cGRhdGUmJih0fD02NCksZS5nZXQmJih0fD0zMiksZS5kZWxldGUmJih0fD04KSxlLm1hbmFnZSYmKHR8PTQpLGUud3JpdGUmJih0fD0yKSxlLnJlYWQmJih0fD0xKSx0fXZhciBVZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkFjY2Vzc01hbmFnZXJHcmFudFRva2VufSxleHRyYWN0UGVybWlzc2lvbnM6UmUsdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZztyZXR1cm4gbi5zdWJzY3JpYmVLZXk/bi5wdWJsaXNoS2V5P24uc2VjcmV0S2V5P3QucmVzb3VyY2VzfHx0LnBhdHRlcm5zPyghdC5yZXNvdXJjZXN8fHQucmVzb3VyY2VzLnV1aWRzJiYwIT09T2JqZWN0LmtleXModC5yZXNvdXJjZXMudXVpZHMpLmxlbmd0aHx8dC5yZXNvdXJjZXMuY2hhbm5lbHMmJjAhPT1PYmplY3Qua2V5cyh0LnJlc291cmNlcy5jaGFubmVscykubGVuZ3RofHx0LnJlc291cmNlcy5ncm91cHMmJjAhPT1PYmplY3Qua2V5cyh0LnJlc291cmNlcy5ncm91cHMpLmxlbmd0aCkmJighdC5wYXR0ZXJuc3x8dC5wYXR0ZXJucy51dWlkcyYmMCE9PU9iamVjdC5rZXlzKHQucGF0dGVybnMudXVpZHMpLmxlbmd0aHx8dC5wYXR0ZXJucy5jaGFubmVscyYmMCE9PU9iamVjdC5rZXlzKHQucGF0dGVybnMuY2hhbm5lbHMpLmxlbmd0aHx8dC5wYXR0ZXJucy5ncm91cHMmJjAhPT1PYmplY3Qua2V5cyh0LnBhdHRlcm5zLmdyb3VwcykubGVuZ3RoKT92b2lkIDA6XCJNaXNzaW5nIHZhbHVlcyBmb3IgZWl0aGVyIFJlc291cmNlcyBvciBQYXR0ZXJucy5cIjpcIk1pc3NpbmcgZWl0aGVyIFJlc291cmNlcyBvciBQYXR0ZXJucy5cIjpcIk1pc3NpbmcgU2VjcmV0IEtleVwiOlwiTWlzc2luZyBQdWJsaXNoIEtleVwiOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCJ9LHBvc3RVUkw6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jb25maWc7cmV0dXJuXCIvdjMvcGFtL1wiLmNvbmNhdCh0LnN1YnNjcmliZUtleSxcIi9ncmFudFwiKX0sdXNlUG9zdDpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJue319LHBvc3RQYXlsb2FkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49dC50dGwscj10LnJlc291cmNlcyxpPXQucGF0dGVybnMsbz10Lm1ldGEscz10LmF1dGhvcml6ZWRfdXVpZCxhPXt0dGw6MCxwZXJtaXNzaW9uczp7cmVzb3VyY2VzOntjaGFubmVsczp7fSxncm91cHM6e30sdXVpZHM6e30sdXNlcnM6e30sc3BhY2VzOnt9fSxwYXR0ZXJuczp7Y2hhbm5lbHM6e30sZ3JvdXBzOnt9LHV1aWRzOnt9LHVzZXJzOnt9LHNwYWNlczp7fX0sbWV0YTp7fX19O2lmKHIpe3ZhciB1PXIudXVpZHMsYz1yLmNoYW5uZWxzLGw9ci5ncm91cHM7dSYmT2JqZWN0LmtleXModSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7YS5wZXJtaXNzaW9ucy5yZXNvdXJjZXMudXVpZHNbZV09UmUodVtlXSl9KSksYyYmT2JqZWN0LmtleXMoYykuZm9yRWFjaCgoZnVuY3Rpb24oZSl7YS5wZXJtaXNzaW9ucy5yZXNvdXJjZXMuY2hhbm5lbHNbZV09UmUoY1tlXSl9KSksbCYmT2JqZWN0LmtleXMobCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7YS5wZXJtaXNzaW9ucy5yZXNvdXJjZXMuZ3JvdXBzW2VdPVJlKGxbZV0pfSkpfWlmKGkpe3ZhciBwPWkudXVpZHMsaD1pLmNoYW5uZWxzLGY9aS5ncm91cHM7cCYmT2JqZWN0LmtleXMocCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7YS5wZXJtaXNzaW9ucy5wYXR0ZXJucy51dWlkc1tlXT1SZShwW2VdKX0pKSxoJiZPYmplY3Qua2V5cyhoKS5mb3JFYWNoKChmdW5jdGlvbihlKXthLnBlcm1pc3Npb25zLnBhdHRlcm5zLmNoYW5uZWxzW2VdPVJlKGhbZV0pfSkpLGYmJk9iamVjdC5rZXlzKGYpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2EucGVybWlzc2lvbnMucGF0dGVybnMuZ3JvdXBzW2VdPVJlKGZbZV0pfSkpfXJldHVybihufHwwPT09bikmJihhLnR0bD1uKSxvJiYoYS5wZXJtaXNzaW9ucy5tZXRhPW8pLHMmJihhLnBlcm1pc3Npb25zLnV1aWQ9XCJcIi5jb25jYXQocykpLGF9KDAsdCl9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuZGF0YS50b2tlbn19KSx4ZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5BY2Nlc3NNYW5hZ2VyUmV2b2tlVG9rZW59LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY29uZmlnLnNlY3JldEtleT90P3ZvaWQgMDpcInRva2VuIGNhbid0IGJlIGVtcHR5XCI6XCJNaXNzaW5nIFNlY3JldCBLZXlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWc7cmV0dXJuXCIvdjMvcGFtL1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9ncmFudC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHQpKX0sdXNlRGVsZXRlOmZ1bmN0aW9uKCl7cmV0dXJuITB9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSl7cmV0dXJue3V1aWQ6ZS5jb25maWcuZ2V0VVVJRCgpfX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57c3RhdHVzOnQuc3RhdHVzLGRhdGE6dC5kYXRhfX19O2Z1bmN0aW9uIERlKGUsdCl7dmFyIG49ZS5jcnlwdG8scj1lLmNvbmZpZyxpPUpTT04uc3RyaW5naWZ5KHQpO3JldHVybiByLmNpcGhlcktleSYmKGk9bi5lbmNyeXB0KGkpLGk9SlNPTi5zdHJpbmdpZnkoaSkpLGl9dmFyIEllPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOUHVibGlzaE9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPXQubWVzc2FnZTtyZXR1cm4gdC5jaGFubmVsP3I/bi5zdWJzY3JpYmVLZXk/dm9pZCAwOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIE1lc3NhZ2VcIjpcIk1pc3NpbmcgQ2hhbm5lbFwifSx1c2VQb3N0OmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5zZW5kQnlQb3N0O3JldHVybiB2b2lkIDAhPT1uJiZufSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNvbmZpZyxyPXQuY2hhbm5lbCxpPURlKGUsdC5tZXNzYWdlKTtyZXR1cm5cIi9wdWJsaXNoL1wiLmNvbmNhdChuLnB1Ymxpc2hLZXksXCIvXCIpLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi8wL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcociksXCIvMC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKGkpKX0scG9zdFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC5jaGFubmVsO3JldHVyblwiL3B1Ymxpc2gvXCIuY29uY2F0KG4ucHVibGlzaEtleSxcIi9cIikuY29uY2F0KG4uc3Vic2NyaWJlS2V5LFwiLzAvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhyKSxcIi8wXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwb3N0UGF5bG9hZDpmdW5jdGlvbihlLHQpe3JldHVybiBEZShlLHQubWVzc2FnZSl9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10Lm1ldGEscj10LnJlcGxpY2F0ZSxpPXZvaWQgMD09PXJ8fHIsbz10LnN0b3JlSW5IaXN0b3J5LHM9dC50dGwsYT17fTtyZXR1cm4gbnVsbCE9byYmKGEuc3RvcmU9bz9cIjFcIjpcIjBcIikscyYmKGEudHRsPXMpLCExPT09aSYmKGEubm9yZXA9XCJ0cnVlXCIpLG4mJlwib2JqZWN0XCI9PXR5cGVvZiBuJiYoYS5tZXRhPUpTT04uc3RyaW5naWZ5KG4pKSxhfSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3JldHVybnt0aW1ldG9rZW46dFsyXX19fSk7dmFyIEdlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOU2lnbmFsT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC5tZXNzYWdlO3JldHVybiB0LmNoYW5uZWw/cj9uLnN1YnNjcmliZUtleT92b2lkIDA6XCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIjpcIk1pc3NpbmcgTWVzc2FnZVwiOlwiTWlzc2luZyBDaGFubmVsXCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZS5jb25maWcsaT10LmNoYW5uZWwsbz10Lm1lc3NhZ2Uscz0obj1vLEpTT04uc3RyaW5naWZ5KG4pKTtyZXR1cm5cIi9zaWduYWwvXCIuY29uY2F0KHIucHVibGlzaEtleSxcIi9cIikuY29uY2F0KHIuc3Vic2NyaWJlS2V5LFwiLzAvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhpKSxcIi8wL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcocykpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKCl7cmV0dXJue319LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue3RpbWV0b2tlbjp0WzJdfX19KTtmdW5jdGlvbiBLZShlLHQpe3ZhciBuPWUuY29uZmlnLHI9ZS5jcnlwdG87aWYoIW4uY2lwaGVyS2V5KXJldHVybiB0O3RyeXtyZXR1cm4gci5kZWNyeXB0KHQpfWNhdGNoKGUpe3JldHVybiB0fX12YXIgRmU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5IaXN0b3J5T3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbCxyPWUuY29uZmlnO3JldHVybiBuP3Iuc3Vic2NyaWJlS2V5P3ZvaWQgMDpcIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwiOlwiTWlzc2luZyBjaGFubmVsXCJ9LGdldFVSTDpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbCxyPWUuY29uZmlnO3JldHVyblwiL3YyL2hpc3Rvcnkvc3ViLWtleS9cIi5jb25jYXQoci5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKG4pKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuc3RhcnQscj10LmVuZCxpPXQucmV2ZXJzZSxvPXQuY291bnQscz12b2lkIDA9PT1vPzEwMDpvLGE9dC5zdHJpbmdpZmllZFRpbWVUb2tlbix1PXZvaWQgMCE9PWEmJmEsYz10LmluY2x1ZGVNZXRhLGw9dm9pZCAwIT09YyYmYyxwPXtpbmNsdWRlX3Rva2VuOlwidHJ1ZVwifTtyZXR1cm4gcC5jb3VudD1zLG4mJihwLnN0YXJ0PW4pLHImJihwLmVuZD1yKSx1JiYocC5zdHJpbmdfbWVzc2FnZV90b2tlbj1cInRydWVcIiksbnVsbCE9aSYmKHAucmV2ZXJzZT1pLnRvU3RyaW5nKCkpLGwmJihwLmluY2x1ZGVfbWV0YT1cInRydWVcIikscH0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbj17bWVzc2FnZXM6W10sc3RhcnRUaW1lVG9rZW46dFsxXSxlbmRUaW1lVG9rZW46dFsyXX07cmV0dXJuIEFycmF5LmlzQXJyYXkodFswXSkmJnRbMF0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIHI9e3RpbWV0b2tlbjp0LnRpbWV0b2tlbixlbnRyeTpLZShlLHQubWVzc2FnZSl9O3QubWV0YSYmKHIubWV0YT10Lm1ldGEpLG4ubWVzc2FnZXMucHVzaChyKX0pKSxufX0pO3ZhciBMZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkRlbGV0ZU1lc3NhZ2VzT3BlcmF0aW9ufSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbCxyPWUuY29uZmlnO3JldHVybiBuP3Iuc3Vic2NyaWJlS2V5P3ZvaWQgMDpcIk1pc3NpbmcgU3Vic2NyaWJlIEtleVwiOlwiTWlzc2luZyBjaGFubmVsXCJ9LHVzZURlbGV0ZTpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWwscj1lLmNvbmZpZztyZXR1cm5cIi92My9oaXN0b3J5L3N1Yi1rZXkvXCIuY29uY2F0KHIuc3Vic2NyaWJlS2V5LFwiL2NoYW5uZWwvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhuKSl9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0saXNBdXRoU3VwcG9ydGVkOmZ1bmN0aW9uKCl7cmV0dXJuITB9LHByZXBhcmVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LnN0YXJ0LHI9dC5lbmQsaT17fTtyZXR1cm4gbiYmKGkuc3RhcnQ9biksciYmKGkuZW5kPXIpLGl9LGhhbmRsZVJlc3BvbnNlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQucGF5bG9hZH19KTt2YXIgQmU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5NZXNzYWdlQ291bnRzfSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbHMscj10LnRpbWV0b2tlbixpPXQuY2hhbm5lbFRpbWV0b2tlbnMsbz1lLmNvbmZpZztyZXR1cm4gbj9yJiZpP1widGltZXRva2VuIGFuZCBjaGFubmVsVGltZXRva2VucyBhcmUgaW5jb21wYXRpYmxlIHRvZ2V0aGVyXCI6ciYmaSYmaS5sZW5ndGg+MSYmbi5sZW5ndGghPT1pLmxlbmd0aD9cIkxlbmd0aCBvZiBjaGFubmVsVGltZXRva2VucyBhbmQgY2hhbm5lbHMgZG8gbm90IG1hdGNoXCI6by5zdWJzY3JpYmVLZXk/dm9pZCAwOlwiTWlzc2luZyBTdWJzY3JpYmUgS2V5XCI6XCJNaXNzaW5nIGNoYW5uZWxcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jaGFubmVscyxyPWUuY29uZmlnLGk9bi5qb2luKFwiLFwiKTtyZXR1cm5cIi92My9oaXN0b3J5L3N1Yi1rZXkvXCIuY29uY2F0KHIuc3Vic2NyaWJlS2V5LFwiL21lc3NhZ2UtY291bnRzL1wiKS5jb25jYXQoRS5lbmNvZGVTdHJpbmcoaSkpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0VHJhbnNhY3Rpb25UaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49dC50aW1ldG9rZW4scj10LmNoYW5uZWxUaW1ldG9rZW5zLGk9e307aWYociYmMT09PXIubGVuZ3RoKXt2YXIgbz1hKHIsMSlbMF07aS50aW1ldG9rZW49b31lbHNlIHI/aS5jaGFubmVsc1RpbWV0b2tlbj1yLmpvaW4oXCIsXCIpOm4mJihpLnRpbWV0b2tlbj1uKTtyZXR1cm4gaX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57Y2hhbm5lbHM6dC5jaGFubmVsc319fSk7dmFyIEhlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBORmV0Y2hNZXNzYWdlc09wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxzLHI9dC5pbmNsdWRlTWVzc2FnZUFjdGlvbnMsaT12b2lkIDAhPT1yJiZyLG89ZS5jb25maWc7aWYoIW58fDA9PT1uLmxlbmd0aClyZXR1cm5cIk1pc3NpbmcgY2hhbm5lbHNcIjtpZighby5zdWJzY3JpYmVLZXkpcmV0dXJuXCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIjtpZihpJiZuLmxlbmd0aD4xKXRocm93IG5ldyBUeXBlRXJyb3IoXCJIaXN0b3J5IGNhbiByZXR1cm4gYWN0aW9ucyBkYXRhIGZvciBhIHNpbmdsZSBjaGFubmVsIG9ubHkuIEVpdGhlciBwYXNzIGEgc2luZ2xlIGNoYW5uZWwgb3IgZGlzYWJsZSB0aGUgaW5jbHVkZU1lc3NhZ2VBY3Rpb25zIGZsYWcuXCIpfSxnZXRVUkw6ZnVuY3Rpb24oZSx0KXt2YXIgbj10LmNoYW5uZWxzLHI9dm9pZCAwPT09bj9bXTpuLGk9dC5pbmNsdWRlTWVzc2FnZUFjdGlvbnMsbz12b2lkIDAhPT1pJiZpLHM9ZS5jb25maWcsYT1vP1wiaGlzdG9yeS13aXRoLWFjdGlvbnNcIjpcImhpc3RvcnlcIix1PXIubGVuZ3RoPjA/ci5qb2luKFwiLFwiKTpcIixcIjtyZXR1cm5cIi92My9cIi5jb25jYXQoYSxcIi9zdWIta2V5L1wiKS5jb25jYXQocy5zdWJzY3JpYmVLZXksXCIvY2hhbm5lbC9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHUpKX0sZ2V0UmVxdWVzdFRpbWVvdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uZmlnLmdldFRyYW5zYWN0aW9uVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPXQuY2hhbm5lbHMscj10LnN0YXJ0LGk9dC5lbmQsbz10LmluY2x1ZGVNZXNzYWdlQWN0aW9ucyxzPXQuY291bnQsYT10LnN0cmluZ2lmaWVkVGltZVRva2VuLHU9dm9pZCAwIT09YSYmYSxjPXQuaW5jbHVkZU1ldGEsbD12b2lkIDAhPT1jJiZjLHA9dC5pbmNsdWRlVXVpZCxoPXQuaW5jbHVkZVVVSUQsZj12b2lkIDA9PT1ofHxoLGQ9dC5pbmNsdWRlTWVzc2FnZVR5cGUsZz12b2lkIDA9PT1kfHxkLHk9e307cmV0dXJuIHkubWF4PXN8fChuLmxlbmd0aD4xfHwhMD09PW8/MjU6MTAwKSxyJiYoeS5zdGFydD1yKSxpJiYoeS5lbmQ9aSksdSYmKHkuc3RyaW5nX21lc3NhZ2VfdG9rZW49XCJ0cnVlXCIpLGwmJih5LmluY2x1ZGVfbWV0YT1cInRydWVcIiksZiYmITEhPT1wJiYoeS5pbmNsdWRlX3V1aWQ9XCJ0cnVlXCIpLGcmJih5LmluY2x1ZGVfbWVzc2FnZV90eXBlPVwidHJ1ZVwiKSx5fSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3ZhciBuPXtjaGFubmVsczp7fX07cmV0dXJuIE9iamVjdC5rZXlzKHQuY2hhbm5lbHN8fHt9KS5mb3JFYWNoKChmdW5jdGlvbihyKXtuLmNoYW5uZWxzW3JdPVtdLCh0LmNoYW5uZWxzW3JdfHxbXSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGk9e307aS5jaGFubmVsPXIsaS50aW1ldG9rZW49dC50aW1ldG9rZW4saS5tZXNzYWdlPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj1lLmNyeXB0bztpZighbi5jaXBoZXJLZXkpcmV0dXJuIHQ7dHJ5e3JldHVybiByLmRlY3J5cHQodCl9Y2F0Y2goZSl7cmV0dXJuIHR9fShlLHQubWVzc2FnZSksaS5tZXNzYWdlVHlwZT10Lm1lc3NhZ2VfdHlwZSxpLnV1aWQ9dC51dWlkLHQuYWN0aW9ucyYmKGkuYWN0aW9ucz10LmFjdGlvbnMsaS5kYXRhPXQuYWN0aW9ucyksdC5tZXRhJiYoaS5tZXRhPXQubWV0YSksbi5jaGFubmVsc1tyXS5wdXNoKGkpfSkpfSkpLHQubW9yZSYmKG4ubW9yZT10Lm1vcmUpLG59fSk7dmFyIHFlPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGdldE9wZXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBqLlBOVGltZU9wZXJhdGlvbn0sZ2V0VVJMOmZ1bmN0aW9uKCl7cmV0dXJuXCIvdGltZS8wXCJ9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRUcmFuc2FjdGlvblRpbWVvdXQoKX0scHJlcGFyZVBhcmFtczpmdW5jdGlvbigpe3JldHVybnt9fSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57dGltZXRva2VuOnRbMF19fSx2YWxpZGF0ZVBhcmFtczpmdW5jdGlvbigpe319KTt2YXIgemU9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZ2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5TdWJzY3JpYmVPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUpe2lmKCFlLmNvbmZpZy5zdWJzY3JpYmVLZXkpcmV0dXJuXCJNaXNzaW5nIFN1YnNjcmliZSBLZXlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LmNoYW5uZWxzLGk9dm9pZCAwPT09cj9bXTpyLG89aS5sZW5ndGg+MD9pLmpvaW4oXCIsXCIpOlwiLFwiO3JldHVyblwiL3YyL3N1YnNjcmliZS9cIi5jb25jYXQobi5zdWJzY3JpYmVLZXksXCIvXCIpLmNvbmNhdChFLmVuY29kZVN0cmluZyhvKSxcIi8wXCIpfSxnZXRSZXF1ZXN0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25maWcuZ2V0U3Vic2NyaWJlVGltZW91dCgpfSxpc0F1dGhTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0scHJlcGFyZVBhcmFtczpmdW5jdGlvbihlLHQpe3ZhciBuPWUuY29uZmlnLHI9dC5zdGF0ZSxpPXQuY2hhbm5lbEdyb3VwcyxvPXZvaWQgMD09PWk/W106aSxzPXQudGltZXRva2VuLGE9dC5maWx0ZXJFeHByZXNzaW9uLHU9dC5yZWdpb24sYz17aGVhcnRiZWF0Om4uZ2V0UHJlc2VuY2VUaW1lb3V0KCl9O3JldHVybiBvLmxlbmd0aD4wJiYoY1tcImNoYW5uZWwtZ3JvdXBcIl09by5qb2luKFwiLFwiKSksYSYmYS5sZW5ndGg+MCYmKGNbXCJmaWx0ZXItZXhwclwiXT1hKSxPYmplY3Qua2V5cyhyKS5sZW5ndGgmJihjLnN0YXRlPUpTT04uc3RyaW5naWZ5KHIpKSxzJiYoYy50dD1zKSx1JiYoYy50cj11KSxjfSxoYW5kbGVSZXNwb25zZTpmdW5jdGlvbihlLHQpe3ZhciBuPVtdO3QubS5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdD17cHVibGlzaFRpbWV0b2tlbjplLnAudCxyZWdpb246ZS5wLnJ9LHI9e3NoYXJkOnBhcnNlSW50KGUuYSwxMCksc3Vic2NyaXB0aW9uTWF0Y2g6ZS5iLGNoYW5uZWw6ZS5jLG1lc3NhZ2VUeXBlOmUuZSxwYXlsb2FkOmUuZCxmbGFnczplLmYsaXNzdWluZ0NsaWVudElkOmUuaSxzdWJzY3JpYmVLZXk6ZS5rLG9yaWdpbmF0aW9uVGltZXRva2VuOmUubyx1c2VyTWV0YWRhdGE6ZS51LHB1Ymxpc2hNZXRhRGF0YTp0fTtuLnB1c2gocil9KSk7dmFyIHI9e3RpbWV0b2tlbjp0LnQudCxyZWdpb246dC50LnJ9O3JldHVybnttZXNzYWdlczpuLG1ldGFkYXRhOnJ9fX0pLFZlPXtnZXRPcGVyYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gai5QTkhhbmRzaGFrZU9wZXJhdGlvbn0sdmFsaWRhdGVQYXJhbXM6ZnVuY3Rpb24oZSx0KXtpZighKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbHMpJiYhKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbEdyb3VwcykpcmV0dXJuXCJjaGFubmVscyBhbmQgY2hhbm5sZUdyb3VwcyBib3RoIHNob3VsZCBub3QgYmUgZW1wdHlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LmNoYW5uZWxzP3QuY2hhbm5lbHMuam9pbihcIixcIik6XCIsXCI7cmV0dXJuXCIvdjIvc3Vic2NyaWJlL1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHIpLFwiLzBcIil9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRTdWJzY3JpYmVUaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuIHQuY2hhbm5lbEdyb3VwcyYmdC5jaGFubmVsR3JvdXBzLmxlbmd0aD4wJiYobltcImNoYW5uZWwtZ3JvdXBcIl09dC5jaGFubmVsR3JvdXBzLmpvaW4oXCIsXCIpKSxuLnR0PTAsbn0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXtyZXR1cm57cmVnaW9uOnQudC5yLHRpbWV0b2tlbjp0LnQudH19fSxKZT17Z2V0T3BlcmF0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGouUE5SZWNlaXZlTWVzc2FnZXNPcGVyYXRpb259LHZhbGlkYXRlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKG51bGw9PXQ/dm9pZCAwOnQuY2hhbm5lbHMpfHwobnVsbD09dD92b2lkIDA6dC5jaGFubmVsR3JvdXBzKT8obnVsbD09dD92b2lkIDA6dC50aW1ldG9rZW4pPyhudWxsPT10P3ZvaWQgMDp0LnJlZ2lvbik/dm9pZCAwOlwicmVnaW9uIGNhbiBub3QgYmUgZW1wdHlcIjpcInRpbWV0b2tlbiBjYW4gbm90IGJlIGVtcHR5XCI6XCJjaGFubmVscyBhbmQgY2hhbm5sZUdyb3VwcyBib3RoIHNob3VsZCBub3QgYmUgZW1wdHlcIn0sZ2V0VVJMOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jb25maWcscj10LmNoYW5uZWxzP3QuY2hhbm5lbHMuam9pbihcIixcIik6XCIsXCI7cmV0dXJuXCIvdjIvc3Vic2NyaWJlL1wiLmNvbmNhdChuLnN1YnNjcmliZUtleSxcIi9cIikuY29uY2F0KEUuZW5jb2RlU3RyaW5nKHIpLFwiLzBcIil9LGdldFJlcXVlc3RUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlLmNvbmZpZy5nZXRTdWJzY3JpYmVUaW1lb3V0KCl9LGlzQXV0aFN1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxnZXRBYm9ydFNpZ25hbDpmdW5jdGlvbihlLHQpe3JldHVybiB0LmFib3J0U2lnbmFsfSxwcmVwYXJlUGFyYW1zOmZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuIHQuY2hhbm5lbEdyb3VwcyYmdC5jaGFubmVsR3JvdXBzLmxlbmd0aD4wJiYobltcImNoYW5uZWwtZ3JvdXBcIl09dC5jaGFubmVsR3JvdXBzLmpvaW4oXCIsXCIpKSxuLnR0PXQudGltZXRva2VuLG4udHI9dC5yZWdpb24sbn0saGFuZGxlUmVzcG9uc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbj1bXTtyZXR1cm4gdC5tLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PXtzaGFyZDpwYXJzZUludChlLmEsMTApLHN1YnNjcmlwdGlvbk1hdGNoOmUuYixjaGFubmVsOmUuYyxtZXNzYWdlVHlwZTplLmUscGF5bG9hZDplLmQsZmxhZ3M6ZS5mLGlzc3VpbmdDbGllbnRJZDplLmksc3Vic2NyaWJlS2V5OmUuayxvcmlnaW5hdGlvblRpbWV0b2tlbjplLm8scHVibGlzaE1ldGFEYXRhOnt0aW1ldG9rZW46ZS5wLnQscmVnaW9uOmUucC5yfX07bi5wdXNoKHQpfSkpLHttZXNzYWdlczpuLG1ldGFkYXRhOntyZWdpb246dC50LnIsdGltZXRva2VuOnQudC50fX19fSxXZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMuc3luYz1lLHRoaXMubGlzdGVuZXJzPW5ldyBTZXR9cmV0dXJuIGUucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLmxpc3RlbmVycy5hZGQoZSksZnVuY3Rpb24oKXt0Lmxpc3RlbmVycy5kZWxldGUoZSl9fSxlLnByb3RvdHlwZS5ub3RpZnk9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWZ1bmN0aW9uKCl7dC5saXN0ZW5lcnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dChlKX0pKX07dGhpcy5zeW5jP24oKTpzZXRUaW1lb3V0KG4sMCl9LGV9KCksWGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMubGFiZWw9ZSx0aGlzLnRyYW5zaXRpb25NYXA9bmV3IE1hcCx0aGlzLmVudGVyRWZmZWN0cz1bXSx0aGlzLmV4aXRFZmZlY3RzPVtdfXJldHVybiBlLnByb3RvdHlwZS50cmFuc2l0aW9uPWZ1bmN0aW9uKGUsdCl7dmFyIG47aWYodGhpcy50cmFuc2l0aW9uTWFwLmhhcyh0LnR5cGUpKXJldHVybiBudWxsPT09KG49dGhpcy50cmFuc2l0aW9uTWFwLmdldCh0LnR5cGUpKXx8dm9pZCAwPT09bj92b2lkIDA6bihlLHQpfSxlLnByb3RvdHlwZS5vbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnRyYW5zaXRpb25NYXAuc2V0KGUsdCksdGhpc30sZS5wcm90b3R5cGUud2l0aD1mdW5jdGlvbihlLHQpe3JldHVyblt0aGlzLGUsbnVsbCE9dD90OltdXX0sZS5wcm90b3R5cGUub25FbnRlcj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lbnRlckVmZmVjdHMucHVzaChlKSx0aGlzfSxlLnByb3RvdHlwZS5vbkV4aXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZXhpdEVmZmVjdHMucHVzaChlKSx0aGlzfSxlfSgpLCRlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4oKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiB0KG4sZSksbi5wcm90b3R5cGUuZGVzY3JpYmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBYZShlKX0sbi5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmN1cnJlbnRTdGF0ZT1lLHRoaXMuY3VycmVudENvbnRleHQ9dCx0aGlzLm5vdGlmeSh7dHlwZTpcImVuZ2luZVN0YXJ0ZWRcIixzdGF0ZTplLGNvbnRleHQ6dH0pfSxuLnByb3RvdHlwZS50cmFuc2l0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sdTtpZighdGhpcy5jdXJyZW50U3RhdGUpdGhyb3cgbmV3IEVycm9yKFwiU3RhcnQgdGhlIGVuZ2luZSBmaXJzdFwiKTt0aGlzLm5vdGlmeSh7dHlwZTpcImV2ZW50UmVjZWl2ZWRcIixldmVudDplfSk7dmFyIGM9dGhpcy5jdXJyZW50U3RhdGUudHJhbnNpdGlvbih0aGlzLmN1cnJlbnRDb250ZXh0LGUpO2lmKGMpe3ZhciBsPWEoYywzKSxwPWxbMF0saD1sWzFdLGY9bFsyXTt0cnl7Zm9yKHZhciBkPXModGhpcy5jdXJyZW50U3RhdGUuZXhpdEVmZmVjdHMpLGc9ZC5uZXh0KCk7IWcuZG9uZTtnPWQubmV4dCgpKXt2YXIgeT1nLnZhbHVlO3RoaXMubm90aWZ5KHt0eXBlOlwiaW52b2NhdGlvbkRpc3BhdGNoZWRcIixpbnZvY2F0aW9uOnkodGhpcy5jdXJyZW50Q29udGV4dCl9KX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZyYmIWcuZG9uZSYmKG49ZC5yZXR1cm4pJiZuLmNhbGwoZCl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXZhciBiPXRoaXMuY3VycmVudFN0YXRlO3RoaXMuY3VycmVudFN0YXRlPXA7dmFyIHY9dGhpcy5jdXJyZW50Q29udGV4dDt0aGlzLmN1cnJlbnRDb250ZXh0PWgsdGhpcy5ub3RpZnkoe3R5cGU6XCJ0cmFuc2l0aW9uRG9uZVwiLGZyb21TdGF0ZTpiLGZyb21Db250ZXh0OnYsdG9TdGF0ZTpwLHRvQ29udGV4dDpoLGV2ZW50OmV9KTt0cnl7Zm9yKHZhciBtPXMoZiksXz1tLm5leHQoKTshXy5kb25lO189bS5uZXh0KCkpe3k9Xy52YWx1ZTt0aGlzLm5vdGlmeSh7dHlwZTpcImludm9jYXRpb25EaXNwYXRjaGVkXCIsaW52b2NhdGlvbjp5fSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e18mJiFfLmRvbmUmJihpPW0ucmV0dXJuKSYmaS5jYWxsKG0pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX10cnl7Zm9yKHZhciBPPXModGhpcy5jdXJyZW50U3RhdGUuZW50ZXJFZmZlY3RzKSxQPU8ubmV4dCgpOyFQLmRvbmU7UD1PLm5leHQoKSl7eT1QLnZhbHVlO3RoaXMubm90aWZ5KHt0eXBlOlwiaW52b2NhdGlvbkRpc3BhdGNoZWRcIixpbnZvY2F0aW9uOnkodGhpcy5jdXJyZW50Q29udGV4dCl9KX19Y2F0Y2goZSl7bz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7UCYmIVAuZG9uZSYmKHU9Ty5yZXR1cm4pJiZ1LmNhbGwoTyl9ZmluYWxseXtpZihvKXRocm93IG8uZXJyb3J9fX19LG59KFdlKSxRZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5kZXBlbmRlbmNpZXM9ZSx0aGlzLmluc3RhbmNlcz1uZXcgTWFwLHRoaXMuaGFuZGxlcnM9bmV3IE1hcH1yZXR1cm4gZS5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXt0aGlzLmhhbmRsZXJzLnNldChlLHQpfSxlLnByb3RvdHlwZS5kaXNwYXRjaD1mdW5jdGlvbihlKXtpZihcIkNBTkNFTFwiIT09ZS50eXBlKXt2YXIgdD10aGlzLmhhbmRsZXJzLmdldChlLnR5cGUpO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIlVuaGFuZGxlZCBpbnZvY2F0aW9uICdcIi5jb25jYXQoZS50eXBlLFwiJ1wiKSk7dmFyIG49dChlLnBheWxvYWQsdGhpcy5kZXBlbmRlbmNpZXMpO2UubWFuYWdlZCYmdGhpcy5pbnN0YW5jZXMuc2V0KGUudHlwZSxuKSxuLnN0YXJ0KCl9ZWxzZSBpZih0aGlzLmluc3RhbmNlcy5oYXMoZS5wYXlsb2FkKSl7dmFyIHI9dGhpcy5pbnN0YW5jZXMuZ2V0KGUucGF5bG9hZCk7bnVsbD09cnx8ci5jYW5jZWwoKSx0aGlzLmluc3RhbmNlcy5kZWxldGUoZS5wYXlsb2FkKX19LGV9KCk7ZnVuY3Rpb24gWWUoZSx0KXt2YXIgbj1mdW5jdGlvbigpe2Zvcih2YXIgbj1bXSxyPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyluW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm57dHlwZTplLHBheWxvYWQ6bnVsbD09dD92b2lkIDA6dC5hcHBseSh2b2lkIDAsdShbXSxhKG4pLCExKSl9fTtyZXR1cm4gbi50eXBlPWUsbn1mdW5jdGlvbiBaZShlLHQpe3ZhciBuPWZ1bmN0aW9uKCl7Zm9yKHZhciBuPVtdLHI9MDtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKW5bcl09YXJndW1lbnRzW3JdO3JldHVybnt0eXBlOmUscGF5bG9hZDp0LmFwcGx5KHZvaWQgMCx1KFtdLGEobiksITEpKSxtYW5hZ2VkOiEwfX07cmV0dXJuIG4udHlwZT1lLG4uY2FuY2VsPXt0eXBlOlwiQ0FOQ0VMXCIscGF5bG9hZDplLG1hbmFnZWQ6ITF9LG59dmFyIGV0LHR0LG50LHJ0PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4oKXt2YXIgdD10aGlzLmNvbnN0cnVjdG9yLG49ZS5jYWxsKHRoaXMsXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiKXx8dGhpcztyZXR1cm4gbi5uYW1lPVwiQWJvcnRFcnJvclwiLE9iamVjdC5zZXRQcm90b3R5cGVPZihuLHQucHJvdG90eXBlKSxufXJldHVybiB0KG4sZSksbn0oRXJyb3IpLGl0PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4oKXt2YXIgdD1udWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7cmV0dXJuIHQuX2Fib3J0ZWQ9ITEsdH1yZXR1cm4gdChuLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSxcImFib3J0ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Fib3J0ZWR9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksbi5wcm90b3R5cGUudGhyb3dJZkFib3J0ZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLl9hYm9ydGVkKXRocm93IG5ldyBydH0sbi5wcm90b3R5cGUuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLl9hYm9ydGVkPSEwLHRoaXMubm90aWZ5KG5ldyBydCl9LG59KFdlKSxvdD1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKHQsbixyKXt2YXIgaT1lLmNhbGwodGhpcyx0LG4pfHx0aGlzO3JldHVybiBpLmFzeW5jRnVuY3Rpb249cixpLmFib3J0U2lnbmFsPW5ldyBpdCxpfXJldHVybiB0KG4sZSksbi5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLmFzeW5jRnVuY3Rpb24odGhpcy5wYXlsb2FkLHRoaXMuYWJvcnRTaWduYWwsdGhpcy5kZXBlbmRlbmNpZXMpfSxuLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oKXt0aGlzLmFib3J0U2lnbmFsLmFib3J0KCl9LG59KChmdW5jdGlvbihlLHQpe3RoaXMucGF5bG9hZD1lLHRoaXMuZGVwZW5kZW5jaWVzPXR9KSksc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7cmV0dXJuIG5ldyBvdCh0LG4sZSl9fSxhdD1aZShcIkhBTkRTSEFLRVwiLChmdW5jdGlvbihlLHQpe3JldHVybntjaGFubmVsczplLGdyb3Vwczp0fX0pKSx1dD1aZShcIlJFQ0VJVkVfRVZFTlRTXCIsKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm57Y2hhbm5lbHM6ZSxncm91cHM6dCxjdXJzb3I6bn19KSksY3Q9KHR0PWZ1bmN0aW9uKGUpe3JldHVybiBlfSxudD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTtyZXR1cm57dHlwZTpldCxwYXlsb2FkOnR0LmFwcGx5KHZvaWQgMCx1KFtdLGEoZSksITEpKSxtYW5hZ2VkOiExfX0sbnQudHlwZT1ldD1cIkVNSVRfRVZFTlRTXCIsbnQpLGx0PVplKFwiUkVDT05ORUNUXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBlfSkpLHB0PVplKFwiSEFORFNIQUtFX1JFQ09OTkVDVFwiLChmdW5jdGlvbihlKXtyZXR1cm4gZX0pKSxodD1ZZShcIlNVQlNDUklQVElPTl9DSEFOR0VcIiwoZnVuY3Rpb24oZSx0KXtyZXR1cm57Y2hhbm5lbHM6ZSxncm91cHM6dH19KSksZnQ9WWUoXCJESVNDT05ORUNUXCIsKGZ1bmN0aW9uKCl7cmV0dXJue319KSksZHQ9WWUoXCJSRUNPTk5FQ1RcIiwoZnVuY3Rpb24oKXtyZXR1cm57fX0pKTtZZShcIlJFU1RPUkVcIiwoZnVuY3Rpb24oZSx0LG4scil7cmV0dXJue2NoYW5uZWxzOmUsZ3JvdXBzOnQsdGltZXRva2VuOm4scmVnaW9uOnJ9fSkpO3ZhciBndD1ZZShcIkhBTkRTSEFLSU5HX1NVQ0NFU1NcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KSkseXQ9WWUoXCJIQU5EU0hBS0lOR19GQUlMVVJFXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBlfSkpLGJ0PVllKFwiSEFORFNIQUtJTkdfUkVDT05ORUNUSU5HX1NVQ0NFU1NcIiwoZnVuY3Rpb24oZSl7cmV0dXJue2N1cnNvcjplfX0pKSx2dD1ZZShcIkhBTkRTSEFLSU5HX1JFQ09OTkVDVElOR19GQUlMVVJFXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBlfSkpLG10PVllKFwiSEFORFNIQUtJTkdfUkVDT05ORUNUSU5HX0dJVkVVUFwiLChmdW5jdGlvbigpe3JldHVybnt9fSkpLF90PVllKFwiSEFORFNIQUtJTkdfUkVDT05ORUNUSU5HX1JFVFJZXCIsKGZ1bmN0aW9uKCl7cmV0dXJue319KSksT3Q9WWUoXCJSRUNFSVZJTkdfU1VDQ0VTU1wiLChmdW5jdGlvbihlLHQpe3JldHVybntjdXJzb3I6ZSxldmVudHM6dH19KSksUHQ9WWUoXCJSRUNFSVZJTkdfRkFJTFVSRVwiLChmdW5jdGlvbihlKXtyZXR1cm4gZX0pKSxTdD1ZZShcIlJFQ09OTkVDVElOR19TVUNDRVNTXCIsKGZ1bmN0aW9uKGUsdCl7cmV0dXJue2N1cnNvcjplLGV2ZW50czp0fX0pKSx3dD1ZZShcIlJFQ09OTkVDVElOR19GQUlMVVJFXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBlfSkpLFR0PVllKFwiUkVDT05ORUNUSU5HX0dJVkVVUFwiLChmdW5jdGlvbigpe3JldHVybnt9fSkpLGt0PVllKFwiUkVDT05ORUNUSU5HX1JFVFJZXCIsKGZ1bmN0aW9uKCl7cmV0dXJue319KSksTnQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbih0LG4pe3ZhciByPWUuY2FsbCh0aGlzLG4pfHx0aGlzO3JldHVybiByLm9uKGF0LnR5cGUsc3QoKGZ1bmN0aW9uKGUsbixzKXt2YXIgYT1zLmhhbmRzaGFrZTtyZXR1cm4gaShyLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHIsaTtyZXR1cm4gbyh0aGlzLChmdW5jdGlvbihvKXtzd2l0Y2goby5sYWJlbCl7Y2FzZSAwOm4udGhyb3dJZkFib3J0ZWQoKSxvLmxhYmVsPTE7Y2FzZSAxOnJldHVybiBvLnRyeXMucHVzaChbMSwzLCw0XSksWzQsYSh7YWJvcnRTaWduYWw6bixjaGFubmVsczplLmNoYW5uZWxzLGNoYW5uZWxHcm91cHM6ZS5ncm91cHN9KV07Y2FzZSAyOnJldHVybiByPW8uc2VudCgpLHQudHJhbnNpdGlvbihndChyKSksWzMsNF07Y2FzZSAzOnJldHVybihpPW8uc2VudCgpKWluc3RhbmNlb2YgRXJyb3ImJlwiQWJvcnRlZFwiPT09aS5tZXNzYWdlP1syXTppIGluc3RhbmNlb2YgTD9bMix0LnRyYW5zaXRpb24oeXQoaSkpXTpbMyw0XTtjYXNlIDQ6cmV0dXJuWzJdfX0pKX0pKX0pKSksci5vbih1dC50eXBlLHN0KChmdW5jdGlvbihlLG4scyl7dmFyIGE9cy5yZWNlaXZlRXZlbnRzO3JldHVybiBpKHIsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgcixpO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6bi50aHJvd0lmQWJvcnRlZCgpLG8ubGFiZWw9MTtjYXNlIDE6cmV0dXJuIG8udHJ5cy5wdXNoKFsxLDMsLDRdKSxbNCxhKHthYm9ydFNpZ25hbDpuLGNoYW5uZWxzOmUuY2hhbm5lbHMsY2hhbm5lbEdyb3VwczplLmdyb3Vwcyx0aW1ldG9rZW46ZS5jdXJzb3IudGltZXRva2VuLHJlZ2lvbjplLmN1cnNvci5yZWdpb259KV07Y2FzZSAyOnJldHVybiByPW8uc2VudCgpLHQudHJhbnNpdGlvbihPdChyLm1ldGFkYXRhLHIubWVzc2FnZXMpKSxbMyw0XTtjYXNlIDM6cmV0dXJuKGk9by5zZW50KCkpaW5zdGFuY2VvZiBFcnJvciYmXCJBYm9ydGVkXCI9PT1pLm1lc3NhZ2U/WzJdOmkgaW5zdGFuY2VvZiBMP1syLHQudHJhbnNpdGlvbihQdChpKSldOlszLDRdO2Nhc2UgNDpyZXR1cm5bMl19fSkpfSkpfSkpKSxyLm9uKGN0LnR5cGUsc3QoKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbi5yZWNlaXZlRXZlbnRzLGkocix2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKHQpe3JldHVybiBlLmxlbmd0aD4wJiZjb25zb2xlLmxvZyhlKSxbMl19KSl9KSl9KSkpLHIub24obHQudHlwZSxzdCgoZnVuY3Rpb24oZSxuLHMpe3ZhciBhPXMucmVjZWl2ZUV2ZW50cyx1PXMuc2hvdWxkUmV0cnksYz1zLmdldFJldHJ5RGVsYXksbD1zLmRlbGF5O3JldHVybiBpKHIsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgcixpO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHUoZS5yZWFzb24sZS5hdHRlbXB0cyk/KG4udGhyb3dJZkFib3J0ZWQoKSxbNCxsKGMoZS5hdHRlbXB0cykpXSk6WzIsdC50cmFuc2l0aW9uKFR0KCkpXTtjYXNlIDE6by5zZW50KCksbi50aHJvd0lmQWJvcnRlZCgpLG8ubGFiZWw9MjtjYXNlIDI6cmV0dXJuIG8udHJ5cy5wdXNoKFsyLDQsLDVdKSxbNCxhKHthYm9ydFNpZ25hbDpuLGNoYW5uZWxzOmUuY2hhbm5lbHMsY2hhbm5lbEdyb3VwczplLmdyb3Vwcyx0aW1ldG9rZW46ZS5jdXJzb3IudGltZXRva2VuLHJlZ2lvbjplLmN1cnNvci5yZWdpb259KV07Y2FzZSAzOnJldHVybiByPW8uc2VudCgpLFsyLHQudHJhbnNpdGlvbihTdChyLm1ldGFkYXRhLHIubWVzc2FnZXMpKV07Y2FzZSA0OnJldHVybihpPW8uc2VudCgpKWluc3RhbmNlb2YgRXJyb3ImJlwiQWJvcnRlZFwiPT09aS5tZXNzYWdlP1syXTppIGluc3RhbmNlb2YgTD9bMix0LnRyYW5zaXRpb24od3QoaSkpXTpbMyw1XTtjYXNlIDU6cmV0dXJuWzJdfX0pKX0pKX0pKSksci5vbihwdC50eXBlLHN0KChmdW5jdGlvbihlLG4scyl7dmFyIGE9cy5oYW5kc2hha2UsdT1zLnNob3VsZFJldHJ5LGM9cy5nZXRSZXRyeURlbGF5LGw9cy5kZWxheTtyZXR1cm4gaShyLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHIsaTtyZXR1cm4gbyh0aGlzLChmdW5jdGlvbihvKXtzd2l0Y2goby5sYWJlbCl7Y2FzZSAwOnJldHVybiB1KGUucmVhc29uLGUuYXR0ZW1wdHMpPyhuLnRocm93SWZBYm9ydGVkKCksWzQsbChjKGUuYXR0ZW1wdHMpKV0pOlsyLHQudHJhbnNpdGlvbihtdCgpKV07Y2FzZSAxOm8uc2VudCgpLG4udGhyb3dJZkFib3J0ZWQoKSxvLmxhYmVsPTI7Y2FzZSAyOnJldHVybiBvLnRyeXMucHVzaChbMiw0LCw1XSksWzQsYSh7YWJvcnRTaWduYWw6bixjaGFubmVsczplLmNoYW5uZWxzLGNoYW5uZWxHcm91cHM6ZS5ncm91cHN9KV07Y2FzZSAzOnJldHVybiByPW8uc2VudCgpLFsyLHQudHJhbnNpdGlvbihidChyLm1ldGFkYXRhKSldO2Nhc2UgNDpyZXR1cm4oaT1vLnNlbnQoKSlpbnN0YW5jZW9mIEVycm9yJiZcIkFib3J0ZWRcIj09PWkubWVzc2FnZT9bMl06aSBpbnN0YW5jZW9mIEw/WzIsdC50cmFuc2l0aW9uKHZ0KGkpKV06WzMsNV07Y2FzZSA1OnJldHVyblsyXX19KSl9KSl9KSkpLHJ9cmV0dXJuIHQobixlKSxufShRZSksQ3Q9bmV3IFhlKFwiU1RPUFBFRFwiKTtDdC5vbihodC50eXBlLChmdW5jdGlvbihlLHQpe3JldHVybiBDdC53aXRoKHtjaGFubmVsczp0LnBheWxvYWQuY2hhbm5lbHMsZ3JvdXBzOnQucGF5bG9hZC5ncm91cHN9KX0pKSxDdC5vbihkdC50eXBlLChmdW5jdGlvbihlKXtyZXR1cm4geHQud2l0aChuKHt9LGUpKX0pKTt2YXIgRXQ9bmV3IFhlKFwiSEFORFNIQUtFX0ZBSUxVUkVcIik7RXQub24oX3QudHlwZSwoZnVuY3Rpb24oZSl7cmV0dXJuIFV0LndpdGgobihuKHt9LGUpLHthdHRlbXB0czowfSkpfSkpLEV0Lm9uKGZ0LnR5cGUsKGZ1bmN0aW9uKGUpe3JldHVybiBDdC53aXRoKHtjaGFubmVsczplLmNoYW5uZWxzLGdyb3VwczplLmdyb3Vwc30pfSkpO3ZhciBBdD1uZXcgWGUoXCJTVE9QUEVEXCIpO0F0Lm9uKGh0LnR5cGUsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIEF0LndpdGgoe2NoYW5uZWxzOnQucGF5bG9hZC5jaGFubmVscyxncm91cHM6dC5wYXlsb2FkLmdyb3VwcyxjdXJzb3I6ZS5jdXJzb3J9KX0pKSxBdC5vbihkdC50eXBlLChmdW5jdGlvbihlKXtyZXR1cm4gUnQud2l0aChuKHt9LGUpKX0pKTt2YXIgTXQ9bmV3IFhlKFwiUkVDRUlWRV9GQUlMVVJFXCIpO010Lm9uKGt0LnR5cGUsKGZ1bmN0aW9uKGUpe3JldHVybiBqdC53aXRoKG4obih7fSxlKSx7YXR0ZW1wdHM6MH0pKX0pKSxNdC5vbihmdC50eXBlLChmdW5jdGlvbihlKXtyZXR1cm4gQXQud2l0aCh7Y2hhbm5lbHM6ZS5jaGFubmVscyxncm91cHM6ZS5ncm91cHMsY3Vyc29yOmUuY3Vyc29yfSl9KSk7dmFyIGp0PW5ldyBYZShcIlJFQ0VJVkVfUkVDT05ORUNUSU5HXCIpO2p0Lm9uRW50ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBsdChlKX0pKSxqdC5vbkV4aXQoKGZ1bmN0aW9uKCl7cmV0dXJuIGx0LmNhbmNlbH0pKSxqdC5vbihTdC50eXBlLChmdW5jdGlvbihlLHQpe3JldHVybiBSdC53aXRoKHtjaGFubmVsczplLmNoYW5uZWxzLGdyb3VwczplLmdyb3VwcyxjdXJzb3I6dC5wYXlsb2FkLmN1cnNvcn0sW2N0KHQucGF5bG9hZC5ldmVudHMpXSl9KSksanQub24od3QudHlwZSwoZnVuY3Rpb24oZSx0KXtyZXR1cm4ganQud2l0aChuKG4oe30sZSkse2F0dGVtcHRzOmUuYXR0ZW1wdHMrMSxyZWFzb246dC5wYXlsb2FkfSkpfSkpLGp0Lm9uKFR0LnR5cGUsKGZ1bmN0aW9uKGUpe3JldHVybiBNdC53aXRoKHtncm91cHM6ZS5ncm91cHMsY2hhbm5lbHM6ZS5jaGFubmVscyxjdXJzb3I6ZS5jdXJzb3IscmVhc29uOmUucmVhc29ufSl9KSksanQub24oZnQudHlwZSwoZnVuY3Rpb24oZSl7cmV0dXJuIEF0LndpdGgoe2NoYW5uZWxzOmUuY2hhbm5lbHMsZ3JvdXBzOmUuZ3JvdXBzLGN1cnNvcjplLmN1cnNvcn0pfSkpO3ZhciBSdD1uZXcgWGUoXCJSRUNFSVZJTkdcIik7UnQub25FbnRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIHV0KGUuY2hhbm5lbHMsZS5ncm91cHMsZS5jdXJzb3IpfSkpLFJ0Lm9uRXhpdCgoZnVuY3Rpb24oKXtyZXR1cm4gdXQuY2FuY2VsfSkpLFJ0Lm9uKE90LnR5cGUsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIFJ0LndpdGgobihuKHt9LGUpLHtjdXJzb3I6dC5wYXlsb2FkLmN1cnNvcn0pLFtjdCh0LnBheWxvYWQuZXZlbnRzKV0pfSkpLFJ0Lm9uKGh0LnR5cGUsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA9PT10LnBheWxvYWQuY2hhbm5lbHMubGVuZ3RoJiYwPT09dC5wYXlsb2FkLmdyb3Vwcy5sZW5ndGg/RHQud2l0aCh2b2lkIDApOlJ0LndpdGgobihuKHt9LGUpLHtjaGFubmVsczp0LnBheWxvYWQuY2hhbm5lbHMsZ3JvdXBzOnQucGF5bG9hZC5ncm91cHN9KSl9KSksUnQub24oUHQudHlwZSwoZnVuY3Rpb24oZSx0KXtyZXR1cm4ganQud2l0aChuKG4oe30sZSkse2F0dGVtcHRzOjAscmVhc29uOnQucGF5bG9hZH0pKX0pKSxSdC5vbihmdC50eXBlLChmdW5jdGlvbihlKXtyZXR1cm4gQXQud2l0aCh7Y2hhbm5lbHM6ZS5jaGFubmVscyxncm91cHM6ZS5ncm91cHMsY3Vyc29yOmUuY3Vyc29yfSl9KSk7dmFyIFV0PW5ldyBYZShcIkhBTkRTSEFLRV9SRUNPTk5FQ1RJTkdcIik7VXQub25FbnRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIHB0KGUpfSkpLFV0Lm9uRXhpdCgoZnVuY3Rpb24oKXtyZXR1cm4gbHQuY2FuY2VsfSkpLFV0Lm9uKFN0LnR5cGUsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIFJ0LndpdGgoe2NoYW5uZWxzOmUuY2hhbm5lbHMsZ3JvdXBzOmUuZ3JvdXBzLGN1cnNvcjp0LnBheWxvYWQuY3Vyc29yfSxbY3QodC5wYXlsb2FkLmV2ZW50cyldKX0pKSxVdC5vbih3dC50eXBlLChmdW5jdGlvbihlLHQpe3JldHVybiBVdC53aXRoKG4obih7fSxlKSx7YXR0ZW1wdHM6ZS5hdHRlbXB0cysxLHJlYXNvbjp0LnBheWxvYWR9KSl9KSksVXQub24oVHQudHlwZSwoZnVuY3Rpb24oZSl7cmV0dXJuIEV0LndpdGgoe2dyb3VwczplLmdyb3VwcyxjaGFubmVsczplLmNoYW5uZWxzLHJlYXNvbjplLnJlYXNvbn0pfSkpLFV0Lm9uKGZ0LnR5cGUsKGZ1bmN0aW9uKGUpe3JldHVybiBDdC53aXRoKHtjaGFubmVsczplLmNoYW5uZWxzLGdyb3VwczplLmdyb3Vwc30pfSkpO3ZhciB4dD1uZXcgWGUoXCJIQU5EU0hBS0lOR1wiKTt4dC5vbkVudGVyKChmdW5jdGlvbihlKXtyZXR1cm4gYXQoZS5jaGFubmVscyxlLmdyb3Vwcyl9KSkseHQub25FeGl0KChmdW5jdGlvbigpe3JldHVybiBhdC5jYW5jZWx9KSkseHQub24oaHQudHlwZSwoZnVuY3Rpb24oZSx0KXtyZXR1cm4gMD09PXQucGF5bG9hZC5jaGFubmVscy5sZW5ndGgmJjA9PT10LnBheWxvYWQuZ3JvdXBzLmxlbmd0aD9EdC53aXRoKHZvaWQgMCk6eHQud2l0aCh7Y2hhbm5lbHM6dC5wYXlsb2FkLmNoYW5uZWxzLGdyb3Vwczp0LnBheWxvYWQuZ3JvdXBzfSl9KSkseHQub24oZ3QudHlwZSwoZnVuY3Rpb24oZSx0KXtyZXR1cm4gUnQud2l0aCh7Y2hhbm5lbHM6ZS5jaGFubmVscyxncm91cHM6ZS5ncm91cHMsY3Vyc29yOnQucGF5bG9hZH0pfSkpLHh0Lm9uKHl0LnR5cGUsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIFV0LndpdGgobihuKHt9LGUpLHthdHRlbXB0czowLHJlYXNvbjp0LnBheWxvYWR9KSl9KSkseHQub24oZnQudHlwZSwoZnVuY3Rpb24oZSl7cmV0dXJuIEN0LndpdGgoe2NoYW5uZWxzOmUuY2hhbm5lbHMsZ3JvdXBzOmUuZ3JvdXBzfSl9KSk7dmFyIER0PW5ldyBYZShcIlVOU1VCU0NSSUJFRFwiKTtEdC5vbihodC50eXBlLChmdW5jdGlvbihlLHQpe3JldHVybiB4dC53aXRoKHtjaGFubmVsczp0LnBheWxvYWQuY2hhbm5lbHMsZ3JvdXBzOnQucGF5bG9hZC5ncm91cHN9KX0pKTt2YXIgSXQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXM7dGhpcy5lbmdpbmU9bmV3ICRlLHRoaXMuY2hhbm5lbHM9W10sdGhpcy5ncm91cHM9W10sdGhpcy5kaXNwYXRjaGVyPW5ldyBOdCh0aGlzLmVuZ2luZSxlKSx0aGlzLmVuZ2luZS5zdWJzY3JpYmUoKGZ1bmN0aW9uKGUpe1wiaW52b2NhdGlvbkRpc3BhdGNoZWRcIj09PWUudHlwZSYmdC5kaXNwYXRjaGVyLmRpc3BhdGNoKGUuaW52b2NhdGlvbil9KSksdGhpcy5lbmdpbmUuc3RhcnQoRHQsdm9pZCAwKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX2VuZ2luZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmdpbmV9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhbm5lbHMsbj1lLmdyb3Vwczt0aGlzLmNoYW5uZWxzPXUodShbXSxhKHRoaXMuY2hhbm5lbHMpLCExKSxhKG51bGwhPXQ/dDpbXSksITEpLHRoaXMuZ3JvdXBzPXUodShbXSxhKHRoaXMuZ3JvdXBzKSwhMSksYShudWxsIT1uP246W10pLCExKSx0aGlzLmVuZ2luZS50cmFuc2l0aW9uKGh0KHRoaXMuY2hhbm5lbHMsdGhpcy5ncm91cHMpKX0sZS5wcm90b3R5cGUudW5zdWJzY3JpYmU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jaGFubmVscyxuPWUuZ3JvdXBzO3RoaXMuY2hhbm5lbHM9dGhpcy5jaGFubmVscy5maWx0ZXIoKGZ1bmN0aW9uKGUpe3ZhciBuO3JldHVybiBudWxsPT09KG49IShudWxsPT10P3ZvaWQgMDp0LmluY2x1ZGVzKGUpKSl8fHZvaWQgMD09PW58fG59KSksdGhpcy5ncm91cHM9dGhpcy5ncm91cHMuZmlsdGVyKChmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gbnVsbD09PSh0PSEobnVsbD09bj92b2lkIDA6bi5pbmNsdWRlcyhlKSkpfHx2b2lkIDA9PT10fHx0fSkpLHRoaXMuZW5naW5lLnRyYW5zaXRpb24oaHQodGhpcy5jaGFubmVscy5zbGljZSgwKSx0aGlzLmdyb3Vwcy5zbGljZSgwKSkpfSxlLnByb3RvdHlwZS51bnN1YnNjcmliZUFsbD1mdW5jdGlvbigpe3RoaXMuY2hhbm5lbHM9W10sdGhpcy5ncm91cHM9W10sdGhpcy5lbmdpbmUudHJhbnNpdGlvbihodCh0aGlzLmNoYW5uZWxzLnNsaWNlKDApLHRoaXMuZ3JvdXBzLnNsaWNlKDApKSl9LGUucHJvdG90eXBlLnJlY29ubmVjdD1mdW5jdGlvbigpe3RoaXMuZW5naW5lLnRyYW5zaXRpb24oZHQoKSl9LGUucHJvdG90eXBlLmRpc2Nvbm5lY3Q9ZnVuY3Rpb24oKXt0aGlzLmVuZ2luZS50cmFuc2l0aW9uKGZ0KCkpfSxlfSgpLEd0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLHI9ZS5uZXR3b3JraW5nLGk9ZS5jYm9yLG89bmV3IF8oe3NldHVwOmV9KTt0aGlzLl9jb25maWc9bzt2YXIgcz1uZXcgdyh7Y29uZmlnOm99KSxjPWUuY3J5cHRvZ3JhcGh5O3IuaW5pdChvKTt2YXIgbD1uZXcgRihvLGkpO3RoaXMuX3Rva2VuTWFuYWdlcj1sO3ZhciBwPW5ldyBSKHttYXhpbXVtU2FtcGxlc0NvdW50OjZlNH0pO3RoaXMuX3RlbGVtZXRyeU1hbmFnZXI9cDt2YXIgaD17Y29uZmlnOm8sbmV0d29ya2luZzpyLGNyeXB0bzpzLGNyeXB0b2dyYXBoeTpjLHRva2VuTWFuYWdlcjpsLHRlbGVtZXRyeU1hbmFnZXI6cCxQdWJOdWJGaWxlOmUuUHViTnViRmlsZX07dGhpcy5GaWxlPWUuUHViTnViRmlsZSx0aGlzLmVuY3J5cHRGaWxlPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGMuZW5jcnlwdEZpbGUoZSxuLHQuRmlsZSl9LHRoaXMuZGVjcnlwdEZpbGU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYy5kZWNyeXB0RmlsZShlLG4sdC5GaWxlKX07dmFyIGY9Si5iaW5kKHRoaXMsaCxxZSksZD1KLmJpbmQodGhpcyxoLHJlKSxnPUouYmluZCh0aGlzLGgsb2UpLHk9Si5iaW5kKHRoaXMsaCxhZSksYj1KLmJpbmQodGhpcyxoLHplKSx2PW5ldyBLO2lmKHRoaXMuX2xpc3RlbmVyTWFuYWdlcj12LHRoaXMuaUFtSGVyZT1KLmJpbmQodGhpcyxoLG9lKSx0aGlzLmlBbUF3YXk9Si5iaW5kKHRoaXMsaCxyZSksdGhpcy5zZXRQcmVzZW5jZVN0YXRlPUouYmluZCh0aGlzLGgsYWUpLHRoaXMuaGFuZHNoYWtlPUouYmluZCh0aGlzLGgsVmUpLHRoaXMucmVjZWl2ZU1lc3NhZ2VzPUouYmluZCh0aGlzLGgsSmUpLCEwPT09by5lbmFibGVTdWJzY3JpYmVCZXRhKXt2YXIgbT1uZXcgSXQoe2hhbmRzaGFrZTp0aGlzLmhhbmRzaGFrZSxyZWNlaXZlRXZlbnRzOnRoaXMucmVjZWl2ZU1lc3NhZ2VzfSk7dGhpcy5zdWJzY3JpYmU9bS5zdWJzY3JpYmUuYmluZChtKSx0aGlzLnVuc3Vic2NyaWJlPW0udW5zdWJzY3JpYmUuYmluZChtKSx0aGlzLmV2ZW50RW5naW5lPW19ZWxzZXt2YXIgTz1uZXcgTSh7dGltZUVuZHBvaW50OmYsbGVhdmVFbmRwb2ludDpkLGhlYXJ0YmVhdEVuZHBvaW50Omcsc2V0U3RhdGVFbmRwb2ludDp5LHN1YnNjcmliZUVuZHBvaW50OmIsY3J5cHRvOmguY3J5cHRvLGNvbmZpZzpoLmNvbmZpZyxsaXN0ZW5lck1hbmFnZXI6dixnZXRGaWxlVXJsOmZ1bmN0aW9uKGUpe3JldHVybiB5ZShoLGUpfX0pO3RoaXMuc3Vic2NyaWJlPU8uYWRhcHRTdWJzY3JpYmVDaGFuZ2UuYmluZChPKSx0aGlzLnVuc3Vic2NyaWJlPU8uYWRhcHRVbnN1YnNjcmliZUNoYW5nZS5iaW5kKE8pLHRoaXMuZGlzY29ubmVjdD1PLmRpc2Nvbm5lY3QuYmluZChPKSx0aGlzLnJlY29ubmVjdD1PLnJlY29ubmVjdC5iaW5kKE8pLHRoaXMudW5zdWJzY3JpYmVBbGw9Ty51bnN1YnNjcmliZUFsbC5iaW5kKE8pLHRoaXMuZ2V0U3Vic2NyaWJlZENoYW5uZWxzPU8uZ2V0U3Vic2NyaWJlZENoYW5uZWxzLmJpbmQoTyksdGhpcy5nZXRTdWJzY3JpYmVkQ2hhbm5lbEdyb3Vwcz1PLmdldFN1YnNjcmliZWRDaGFubmVsR3JvdXBzLmJpbmQoTyksdGhpcy5zZXRTdGF0ZT1PLmFkYXB0U3RhdGVDaGFuZ2UuYmluZChPKSx0aGlzLnByZXNlbmNlPU8uYWRhcHRQcmVzZW5jZUNoYW5nZS5iaW5kKE8pLHRoaXMuZGVzdHJveT1mdW5jdGlvbihlKXtPLnVuc3Vic2NyaWJlQWxsKGUpLE8uZGlzY29ubmVjdCgpfX10aGlzLmFkZExpc3RlbmVyPXYuYWRkTGlzdGVuZXIuYmluZCh2KSx0aGlzLnJlbW92ZUxpc3RlbmVyPXYucmVtb3ZlTGlzdGVuZXIuYmluZCh2KSx0aGlzLnJlbW92ZUFsbExpc3RlbmVycz12LnJlbW92ZUFsbExpc3RlbmVycy5iaW5kKHYpLHRoaXMucGFyc2VUb2tlbj1sLnBhcnNlVG9rZW4uYmluZChsKSx0aGlzLnNldFRva2VuPWwuc2V0VG9rZW4uYmluZChsKSx0aGlzLmdldFRva2VuPWwuZ2V0VG9rZW4uYmluZChsKSx0aGlzLmNoYW5uZWxHcm91cHM9e2xpc3RHcm91cHM6Si5iaW5kKHRoaXMsaCxRKSxsaXN0Q2hhbm5lbHM6Si5iaW5kKHRoaXMsaCxZKSxhZGRDaGFubmVsczpKLmJpbmQodGhpcyxoLFcpLHJlbW92ZUNoYW5uZWxzOkouYmluZCh0aGlzLGgsWCksZGVsZXRlR3JvdXA6Si5iaW5kKHRoaXMsaCwkKX0sdGhpcy5wdXNoPXthZGRDaGFubmVsczpKLmJpbmQodGhpcyxoLFopLHJlbW92ZUNoYW5uZWxzOkouYmluZCh0aGlzLGgsZWUpLGRlbGV0ZURldmljZTpKLmJpbmQodGhpcyxoLG5lKSxsaXN0Q2hhbm5lbHM6Si5iaW5kKHRoaXMsaCx0ZSl9LHRoaXMuaGVyZU5vdz1KLmJpbmQodGhpcyxoLHVlKSx0aGlzLndoZXJlTm93PUouYmluZCh0aGlzLGgsaWUpLHRoaXMuZ2V0U3RhdGU9Si5iaW5kKHRoaXMsaCxzZSksdGhpcy5ncmFudD1KLmJpbmQodGhpcyxoLGplKSx0aGlzLmdyYW50VG9rZW49Si5iaW5kKHRoaXMsaCxVZSksdGhpcy5hdWRpdD1KLmJpbmQodGhpcyxoLE1lKSx0aGlzLnJldm9rZVRva2VuPUouYmluZCh0aGlzLGgseGUpLHRoaXMucHVibGlzaD1KLmJpbmQodGhpcyxoLEllKSx0aGlzLmZpcmU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS5yZXBsaWNhdGU9ITEsZS5zdG9yZUluSGlzdG9yeT0hMSx0LnB1Ymxpc2goZSxuKX0sdGhpcy5zaWduYWw9Si5iaW5kKHRoaXMsaCxHZSksdGhpcy5oaXN0b3J5PUouYmluZCh0aGlzLGgsRmUpLHRoaXMuZGVsZXRlTWVzc2FnZXM9Si5iaW5kKHRoaXMsaCxMZSksdGhpcy5tZXNzYWdlQ291bnRzPUouYmluZCh0aGlzLGgsQmUpLHRoaXMuZmV0Y2hNZXNzYWdlcz1KLmJpbmQodGhpcyxoLEhlKSx0aGlzLmFkZE1lc3NhZ2VBY3Rpb249Si5iaW5kKHRoaXMsaCxjZSksdGhpcy5yZW1vdmVNZXNzYWdlQWN0aW9uPUouYmluZCh0aGlzLGgsbGUpLHRoaXMuZ2V0TWVzc2FnZUFjdGlvbnM9Si5iaW5kKHRoaXMsaCxwZSksdGhpcy5saXN0RmlsZXM9Si5iaW5kKHRoaXMsaCxoZSk7dmFyIFA9Si5iaW5kKHRoaXMsaCxmZSk7dGhpcy5wdWJsaXNoRmlsZT1KLmJpbmQodGhpcyxoLGRlKSx0aGlzLnNlbmRGaWxlPWdlKHtnZW5lcmF0ZVVwbG9hZFVybDpQLHB1Ymxpc2hGaWxlOnRoaXMucHVibGlzaEZpbGUsbW9kdWxlczpofSksdGhpcy5nZXRGaWxlVXJsPWZ1bmN0aW9uKGUpe3JldHVybiB5ZShoLGUpfSx0aGlzLmRvd25sb2FkRmlsZT1KLmJpbmQodGhpcyxoLGJlKSx0aGlzLmRlbGV0ZUZpbGU9Si5iaW5kKHRoaXMsaCx2ZSksdGhpcy5vYmplY3RzPXtnZXRBbGxVVUlETWV0YWRhdGE6Si5iaW5kKHRoaXMsaCxtZSksZ2V0VVVJRE1ldGFkYXRhOkouYmluZCh0aGlzLGgsX2UpLHNldFVVSURNZXRhZGF0YTpKLmJpbmQodGhpcyxoLE9lKSxyZW1vdmVVVUlETWV0YWRhdGE6Si5iaW5kKHRoaXMsaCxQZSksZ2V0QWxsQ2hhbm5lbE1ldGFkYXRhOkouYmluZCh0aGlzLGgsU2UpLGdldENoYW5uZWxNZXRhZGF0YTpKLmJpbmQodGhpcyxoLHdlKSxzZXRDaGFubmVsTWV0YWRhdGE6Si5iaW5kKHRoaXMsaCxUZSkscmVtb3ZlQ2hhbm5lbE1ldGFkYXRhOkouYmluZCh0aGlzLGgsa2UpLGdldENoYW5uZWxNZW1iZXJzOkouYmluZCh0aGlzLGgsTmUpLHNldENoYW5uZWxNZW1iZXJzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1bXSxpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKylyW2ktMV09YXJndW1lbnRzW2ldO3JldHVybiBKLmNhbGwuYXBwbHkoSix1KFt0LGgsQ2Usbih7dHlwZTpcInNldFwifSxlKV0sYShyKSwhMSkpfSxyZW1vdmVDaGFubmVsTWVtYmVyczpmdW5jdGlvbihlKXtmb3IodmFyIHI9W10saT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspcltpLTFdPWFyZ3VtZW50c1tpXTtyZXR1cm4gSi5jYWxsLmFwcGx5KEosdShbdCxoLENlLG4oe3R5cGU6XCJkZWxldGVcIn0sZSldLGEociksITEpKX0sZ2V0TWVtYmVyc2hpcHM6Si5iaW5kKHRoaXMsaCxFZSksc2V0TWVtYmVyc2hpcHM6ZnVuY3Rpb24oZSl7Zm9yKHZhciByPVtdLGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXJbaS0xXT1hcmd1bWVudHNbaV07cmV0dXJuIEouY2FsbC5hcHBseShKLHUoW3QsaCxBZSxuKHt0eXBlOlwic2V0XCJ9LGUpXSxhKHIpLCExKSl9LHJlbW92ZU1lbWJlcnNoaXBzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1bXSxpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKylyW2ktMV09YXJndW1lbnRzW2ldO3JldHVybiBKLmNhbGwuYXBwbHkoSix1KFt0LGgsQWUsbih7dHlwZTpcImRlbGV0ZVwifSxlKV0sYShyKSwhMSkpfX0sdGhpcy5jcmVhdGVVc2VyPWZ1bmN0aW9uKGUpe3JldHVybiB0Lm9iamVjdHMuc2V0VVVJRE1ldGFkYXRhKHt1dWlkOmUudXNlcklkLGRhdGE6ZS5kYXRhLGluY2x1ZGU6ZS5pbmNsdWRlfSl9LHRoaXMudXBkYXRlVXNlcj10aGlzLmNyZWF0ZVVzZXIsdGhpcy5yZW1vdmVVc2VyPWZ1bmN0aW9uKGUpe3JldHVybiB0Lm9iamVjdHMucmVtb3ZlVVVJRE1ldGFkYXRhKHt1dWlkOm51bGw9PWU/dm9pZCAwOmUudXNlcklkfSl9LHRoaXMuZmV0Y2hVc2VyPWZ1bmN0aW9uKGUpe3JldHVybiB0Lm9iamVjdHMuZ2V0VVVJRE1ldGFkYXRhKHt1dWlkOm51bGw9PWU/dm9pZCAwOmUudXNlcklkLGluY2x1ZGU6bnVsbD09ZT92b2lkIDA6ZS5pbmNsdWRlfSl9LHRoaXMuZmV0Y2hVc2Vycz10aGlzLm9iamVjdHMuZ2V0QWxsVVVJRE1ldGFkYXRhLHRoaXMuY3JlYXRlU3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHQub2JqZWN0cy5zZXRDaGFubmVsTWV0YWRhdGEoe2NoYW5uZWw6ZS5zcGFjZUlkLGRhdGE6ZS5kYXRhLGluY2x1ZGU6ZS5pbmNsdWRlfSl9LHRoaXMudXBkYXRlU3BhY2U9dGhpcy5jcmVhdGVTcGFjZSx0aGlzLnJlbW92ZVNwYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0Lm9iamVjdHMucmVtb3ZlQ2hhbm5lbE1ldGFkYXRhKHtjaGFubmVsOmUuc3BhY2VJZH0pfSx0aGlzLmZldGNoU3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHQub2JqZWN0cy5nZXRDaGFubmVsTWV0YWRhdGEoe2NoYW5uZWw6ZS5zcGFjZUlkLGluY2x1ZGU6ZS5pbmNsdWRlfSl9LHRoaXMuZmV0Y2hTcGFjZXM9dGhpcy5vYmplY3RzLmdldEFsbENoYW5uZWxNZXRhZGF0YSx0aGlzLmFkZE1lbWJlcnNoaXBzPWZ1bmN0aW9uKGUpe3ZhciBuLHI7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUuc3BhY2VJZD90Lm9iamVjdHMuc2V0Q2hhbm5lbE1lbWJlcnMoe2NoYW5uZWw6ZS5zcGFjZUlkLHV1aWRzOm51bGw9PT0obj1lLnVzZXJzKXx8dm9pZCAwPT09bj92b2lkIDA6bi5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2U6e2lkOmUudXNlcklkLGN1c3RvbTplLmN1c3RvbSxzdGF0dXM6ZS5zdGF0dXN9fSkpLGxpbWl0OjB9KTp0Lm9iamVjdHMuc2V0TWVtYmVyc2hpcHMoe3V1aWQ6ZS51c2VySWQsY2hhbm5lbHM6bnVsbD09PShyPWUuc3BhY2VzKXx8dm9pZCAwPT09cj92b2lkIDA6ci5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2U6e2lkOmUuc3BhY2VJZCxjdXN0b206ZS5jdXN0b20sc3RhdHVzOmUuc3RhdHVzfX0pKSxsaW1pdDowfSl9LHRoaXMudXBkYXRlTWVtYmVyc2hpcHM9dGhpcy5hZGRNZW1iZXJzaGlwcyx0aGlzLnJlbW92ZU1lbWJlcnNoaXBzPWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLnNwYWNlSWQ/dC5vYmplY3RzLnJlbW92ZUNoYW5uZWxNZW1iZXJzKHtjaGFubmVsOmUuc3BhY2VJZCx1dWlkczplLnVzZXJJZHMsbGltaXQ6MH0pOnQub2JqZWN0cy5yZW1vdmVNZW1iZXJzaGlwcyh7dXVpZDplLnVzZXJJZCxjaGFubmVsczplLnNwYWNlSWRzLGxpbWl0OjB9KX0sdGhpcy5mZXRjaE1lbWJlcnNoaXBzPWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLnNwYWNlSWQ/dC5vYmplY3RzLmdldENoYW5uZWxNZW1iZXJzKHtjaGFubmVsOmUuc3BhY2VJZCxmaWx0ZXI6ZS5maWx0ZXIsbGltaXQ6ZS5saW1pdCxwYWdlOmUucGFnZSxpbmNsdWRlOntjdXN0b21GaWVsZHM6ZS5pbmNsdWRlLmN1c3RvbUZpZWxkcyxVVUlERmllbGRzOmUuaW5jbHVkZS51c2VyRmllbGRzLGN1c3RvbVVVSURGaWVsZHM6ZS5pbmNsdWRlLmN1c3RvbVVzZXJGaWVsZHMsdG90YWxDb3VudDplLmluY2x1ZGUudG90YWxDb3VudH0sc29ydDpudWxsIT1lLnNvcnQ/T2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGUuc29ydCkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1hKGUsMiksbj10WzBdLHI9dFsxXTtyZXR1cm5bbi5yZXBsYWNlKFwidXNlclwiLFwidXVpZFwiKSxyXX0pKSk6bnVsbH0pLnRoZW4oKGZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlLmRhdGE9bnVsbD09PSh0PWUuZGF0YSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQubWFwKChmdW5jdGlvbihlKXtyZXR1cm57dXNlcjplLnV1aWQsY3VzdG9tOmUuY3VzdG9tLHVwZGF0ZWQ6ZS51cGRhdGVkLGVUYWc6ZS5lVGFnfX0pKSxlfSkpOnQub2JqZWN0cy5nZXRNZW1iZXJzaGlwcyh7dXVpZDplLnVzZXJJZCxmaWx0ZXI6ZS5maWx0ZXIsbGltaXQ6ZS5saW1pdCxwYWdlOmUucGFnZSxpbmNsdWRlOntjdXN0b21GaWVsZHM6ZS5pbmNsdWRlLmN1c3RvbUZpZWxkcyxjaGFubmVsRmllbGRzOmUuaW5jbHVkZS5zcGFjZUZpZWxkcyxjdXN0b21DaGFubmVsRmllbGRzOmUuaW5jbHVkZS5jdXN0b21TcGFjZUZpZWxkcyx0b3RhbENvdW50OmUuaW5jbHVkZS50b3RhbENvdW50fSxzb3J0Om51bGwhPWUuc29ydD9PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZS5zb3J0KS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWEoZSwyKSxuPXRbMF0scj10WzFdO3JldHVybltuLnJlcGxhY2UoXCJzcGFjZVwiLFwiY2hhbm5lbFwiKSxyXX0pKSk6bnVsbH0pLnRoZW4oKGZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlLmRhdGE9bnVsbD09PSh0PWUuZGF0YSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQubWFwKChmdW5jdGlvbihlKXtyZXR1cm57c3BhY2U6ZS5jaGFubmVsLGN1c3RvbTplLmN1c3RvbSx1cGRhdGVkOmUudXBkYXRlZCxlVGFnOmUuZVRhZ319KSksZX0pKX0sdGhpcy50aW1lPWYsdGhpcy5zdG9wPXRoaXMuZGVzdHJveSx0aGlzLmVuY3J5cHQ9cy5lbmNyeXB0LmJpbmQocyksdGhpcy5kZWNyeXB0PXMuZGVjcnlwdC5iaW5kKHMpLHRoaXMuZ2V0QXV0aEtleT1oLmNvbmZpZy5nZXRBdXRoS2V5LmJpbmQoaC5jb25maWcpLHRoaXMuc2V0QXV0aEtleT1oLmNvbmZpZy5zZXRBdXRoS2V5LmJpbmQoaC5jb25maWcpLHRoaXMuc2V0Q2lwaGVyS2V5PWguY29uZmlnLnNldENpcGhlcktleS5iaW5kKGguY29uZmlnKSx0aGlzLmdldFVVSUQ9aC5jb25maWcuZ2V0VVVJRC5iaW5kKGguY29uZmlnKSx0aGlzLnNldFVVSUQ9aC5jb25maWcuc2V0VVVJRC5iaW5kKGguY29uZmlnKSx0aGlzLmdldEZpbHRlckV4cHJlc3Npb249aC5jb25maWcuZ2V0RmlsdGVyRXhwcmVzc2lvbi5iaW5kKGguY29uZmlnKSx0aGlzLnNldEZpbHRlckV4cHJlc3Npb249aC5jb25maWcuc2V0RmlsdGVyRXhwcmVzc2lvbi5iaW5kKGguY29uZmlnKSx0aGlzLnNldEhlYXJ0YmVhdEludGVydmFsPWguY29uZmlnLnNldEhlYXJ0YmVhdEludGVydmFsLmJpbmQoaC5jb25maWcpLHIuaGFzTW9kdWxlKFwicHJveHlcIikmJih0aGlzLnNldFByb3h5PWZ1bmN0aW9uKGUpe2guY29uZmlnLnNldFByb3h5KGUpLHQucmVjb25uZWN0KCl9KX1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0VmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb25maWcuZ2V0VmVyc2lvbigpfSxlLnByb3RvdHlwZS5fYWRkUG5zZGtTdWZmaXg9ZnVuY3Rpb24oZSx0KXt0aGlzLl9jb25maWcuX2FkZFBuc2RrU3VmZml4KGUsdCl9LGUucHJvdG90eXBlLm5ldHdvcmtEb3duRGV0ZWN0ZWQ9ZnVuY3Rpb24oKXt0aGlzLl9saXN0ZW5lck1hbmFnZXIuYW5ub3VuY2VOZXR3b3JrRG93bigpLHRoaXMuX2NvbmZpZy5yZXN0b3JlP3RoaXMuZGlzY29ubmVjdCgpOnRoaXMuZGVzdHJveSghMCl9LGUucHJvdG90eXBlLm5ldHdvcmtVcERldGVjdGVkPWZ1bmN0aW9uKCl7dGhpcy5fbGlzdGVuZXJNYW5hZ2VyLmFubm91bmNlTmV0d29ya1VwKCksdGhpcy5yZWNvbm5lY3QoKX0sZS5ub3RpZmljYXRpb25QYXlsb2FkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBHKGUsdCl9LGUuZ2VuZXJhdGVVVUlEPWZ1bmN0aW9uKCl7cmV0dXJuIG0oKX0sZS5PUEVSQVRJT05TPWosZS5DQVRFR09SSUVTPUEsZX0oKSxLdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpczt0aGlzLl9tb2R1bGVzPXt9LE9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3QuX21vZHVsZXNbbl09ZVtuXS5iaW5kKHQpfSkpfXJldHVybiBlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3RoaXMuX2NvbmZpZz1lLEFycmF5LmlzQXJyYXkodGhpcy5fY29uZmlnLm9yaWdpbik/dGhpcy5fY3VycmVudFN1YkRvbWFpbj1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqdGhpcy5fY29uZmlnLm9yaWdpbi5sZW5ndGgpOnRoaXMuX2N1cnJlbnRTdWJEb21haW49MCx0aGlzLl9jb3JlUGFyYW1zPXt9LHRoaXMuc2hpZnRTdGFuZGFyZE9yaWdpbigpfSxlLnByb3RvdHlwZS5uZXh0T3JpZ2luPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fY29uZmlnLnNlY3VyZT9cImh0dHBzOi8vXCI6XCJodHRwOi8vXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5vcmlnaW4pcmV0dXJuXCJcIi5jb25jYXQoZSkuY29uY2F0KHRoaXMuX2NvbmZpZy5vcmlnaW4pO3RoaXMuX2N1cnJlbnRTdWJEb21haW4rPTEsdGhpcy5fY3VycmVudFN1YkRvbWFpbj49dGhpcy5fY29uZmlnLm9yaWdpbi5sZW5ndGgmJih0aGlzLl9jdXJyZW50U3ViRG9tYWluPTApO3ZhciB0PXRoaXMuX2NvbmZpZy5vcmlnaW5bdGhpcy5fY3VycmVudFN1YkRvbWFpbl07cmV0dXJuXCJcIi5jb25jYXQoZSkuY29uY2F0KHQpfSxlLnByb3RvdHlwZS5oYXNNb2R1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW4gdGhpcy5fbW9kdWxlc30sZS5wcm90b3R5cGUuc2hpZnRTdGFuZGFyZE9yaWdpbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFuZGFyZE9yaWdpbj10aGlzLm5leHRPcmlnaW4oKSx0aGlzLl9zdGFuZGFyZE9yaWdpbn0sZS5wcm90b3R5cGUuZ2V0U3RhbmRhcmRPcmlnaW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhbmRhcmRPcmlnaW59LGUucHJvdG90eXBlLlBPU1RGSUxFPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5fbW9kdWxlcy5wb3N0ZmlsZShlLHQsbil9LGUucHJvdG90eXBlLkdFVEZJTEU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLl9tb2R1bGVzLmdldGZpbGUoZSx0LG4pfSxlLnByb3RvdHlwZS5QT1NUPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLl9tb2R1bGVzLnBvc3QoZSx0LG4scil9LGUucHJvdG90eXBlLlBBVENIPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLl9tb2R1bGVzLnBhdGNoKGUsdCxuLHIpfSxlLnByb3RvdHlwZS5HRVQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLl9tb2R1bGVzLmdldChlLHQsbil9LGUucHJvdG90eXBlLkRFTEVURT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuX21vZHVsZXMuZGVsKGUsdCxuKX0sZS5wcm90b3R5cGUuX2RldGVjdEVycm9yQ2F0ZWdvcnk9ZnVuY3Rpb24oZSl7aWYoXCJFTk9URk9VTkRcIj09PWUuY29kZSlyZXR1cm4gQS5QTk5ldHdvcmtJc3N1ZXNDYXRlZ29yeTtpZihcIkVDT05OUkVGVVNFRFwiPT09ZS5jb2RlKXJldHVybiBBLlBOTmV0d29ya0lzc3Vlc0NhdGVnb3J5O2lmKFwiRUNPTk5SRVNFVFwiPT09ZS5jb2RlKXJldHVybiBBLlBOTmV0d29ya0lzc3Vlc0NhdGVnb3J5O2lmKFwiRUFJX0FHQUlOXCI9PT1lLmNvZGUpcmV0dXJuIEEuUE5OZXR3b3JrSXNzdWVzQ2F0ZWdvcnk7aWYoMD09PWUuc3RhdHVzfHxlLmhhc093blByb3BlcnR5KFwic3RhdHVzXCIpJiZ2b2lkIDA9PT1lLnN0YXR1cylyZXR1cm4gQS5QTk5ldHdvcmtJc3N1ZXNDYXRlZ29yeTtpZihlLnRpbWVvdXQpcmV0dXJuIEEuUE5UaW1lb3V0Q2F0ZWdvcnk7aWYoXCJFVElNRURPVVRcIj09PWUuY29kZSlyZXR1cm4gQS5QTk5ldHdvcmtJc3N1ZXNDYXRlZ29yeTtpZihlLnJlc3BvbnNlKXtpZihlLnJlc3BvbnNlLmJhZFJlcXVlc3QpcmV0dXJuIEEuUE5CYWRSZXF1ZXN0Q2F0ZWdvcnk7aWYoZS5yZXNwb25zZS5mb3JiaWRkZW4pcmV0dXJuIEEuUE5BY2Nlc3NEZW5pZWRDYXRlZ29yeX1yZXR1cm4gQS5QTlVua25vd25DYXRlZ29yeX0sZX0oKSxGdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLl9iYXNlNjRUb0JpbmFyeT10LHRoaXMuX2RlY29kZT1lfXJldHVybiBlLnByb3RvdHlwZS5kZWNvZGVUb2tlbj1mdW5jdGlvbihlKXt2YXIgdD1cIlwiO2UubGVuZ3RoJTQ9PTM/dD1cIj1cIjplLmxlbmd0aCU0PT0yJiYodD1cIj09XCIpO3ZhciBuPWUucmVwbGFjZSgvLS9naSxcIitcIikucmVwbGFjZSgvXy9naSxcIi9cIikrdCxyPXRoaXMuX2RlY29kZSh0aGlzLl9iYXNlNjRUb0JpbmFyeShuKSk7aWYoXCJvYmplY3RcIj09dHlwZW9mIHIpcmV0dXJuIHJ9LGV9KCksTHQ9e2V4cG9ydHM6e319LEJ0PXtleHBvcnRzOnt9fTshZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXtpZihlKXJldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIG4gaW4gdC5wcm90b3R5cGUpZVtuXT10LnByb3RvdHlwZVtuXTtyZXR1cm4gZX0oZSl9ZS5leHBvcnRzPXQsdC5wcm90b3R5cGUub249dC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fSwodGhpcy5fY2FsbGJhY2tzW1wiJFwiK2VdPXRoaXMuX2NhbGxiYWNrc1tcIiRcIitlXXx8W10pLnB1c2godCksdGhpc30sdC5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXt0aGlzLm9mZihlLG4pLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBuLmZuPXQsdGhpcy5vbihlLG4pLHRoaXN9LHQucHJvdG90eXBlLm9mZj10LnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj10LnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9dC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2lmKHRoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9LDA9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX2NhbGxiYWNrcz17fSx0aGlzO3ZhciBuLHI9dGhpcy5fY2FsbGJhY2tzW1wiJFwiK2VdO2lmKCFyKXJldHVybiB0aGlzO2lmKDE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbXCIkXCIrZV0sdGhpcztmb3IodmFyIGk9MDtpPHIubGVuZ3RoO2krKylpZigobj1yW2ldKT09PXR8fG4uZm49PT10KXtyLnNwbGljZShpLDEpO2JyZWFrfXJldHVybiAwPT09ci5sZW5ndGgmJmRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbXCIkXCIrZV0sdGhpc30sdC5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXt0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fTtmb3IodmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSksbj10aGlzLl9jYWxsYmFja3NbXCIkXCIrZV0scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTtpZihuKXtyPTA7Zm9yKHZhciBpPShuPW4uc2xpY2UoMCkpLmxlbmd0aDtyPGk7KytyKW5bcl0uYXBwbHkodGhpcyx0KX1yZXR1cm4gdGhpc30sdC5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fSx0aGlzLl9jYWxsYmFja3NbXCIkXCIrZV18fFtdfSx0LnByb3RvdHlwZS5oYXNMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuISF0aGlzLmxpc3RlbmVycyhlKS5sZW5ndGh9fShCdCk7dmFyIEh0PVh0O1h0LmRlZmF1bHQ9WHQsWHQuc3RhYmxlPVp0LFh0LnN0YWJsZVN0cmluZ2lmeT1adDt2YXIgcXQ9XCJbLi4uXVwiLHp0PVwiW0NpcmN1bGFyXVwiLFZ0PVtdLEp0PVtdO2Z1bmN0aW9uIFd0KCl7cmV0dXJue2RlcHRoTGltaXQ6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsZWRnZXNMaW1pdDpOdW1iZXIuTUFYX1NBRkVfSU5URUdFUn19ZnVuY3Rpb24gWHQoZSx0LG4scil7dmFyIGk7dm9pZCAwPT09ciYmKHI9V3QoKSksUXQoZSxcIlwiLDAsW10sdm9pZCAwLDAscik7dHJ5e2k9MD09PUp0Lmxlbmd0aD9KU09OLnN0cmluZ2lmeShlLHQsbik6SlNPTi5zdHJpbmdpZnkoZSx0bih0KSxuKX1jYXRjaChlKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoXCJbdW5hYmxlIHRvIHNlcmlhbGl6ZSwgY2lyY3VsYXIgcmVmZXJlbmNlIGlzIHRvbyBjb21wbGV4IHRvIGFuYWx5emVdXCIpfWZpbmFsbHl7Zm9yKDswIT09VnQubGVuZ3RoOyl7dmFyIG89VnQucG9wKCk7ND09PW8ubGVuZ3RoP09iamVjdC5kZWZpbmVQcm9wZXJ0eShvWzBdLG9bMV0sb1szXSk6b1swXVtvWzFdXT1vWzJdfX1yZXR1cm4gaX1mdW5jdGlvbiAkdChlLHQsbixyKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsbik7dm9pZCAwIT09aS5nZXQ/aS5jb25maWd1cmFibGU/KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLG4se3ZhbHVlOmV9KSxWdC5wdXNoKFtyLG4sdCxpXSkpOkp0LnB1c2goW3QsbixlXSk6KHJbbl09ZSxWdC5wdXNoKFtyLG4sdF0pKX1mdW5jdGlvbiBRdChlLHQsbixyLGksbyxzKXt2YXIgYTtpZihvKz0xLFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSl7Zm9yKGE9MDthPHIubGVuZ3RoO2ErKylpZihyW2FdPT09ZSlyZXR1cm4gdm9pZCAkdCh6dCxlLHQsaSk7aWYodm9pZCAwIT09cy5kZXB0aExpbWl0JiZvPnMuZGVwdGhMaW1pdClyZXR1cm4gdm9pZCAkdChxdCxlLHQsaSk7aWYodm9pZCAwIT09cy5lZGdlc0xpbWl0JiZuKzE+cy5lZGdlc0xpbWl0KXJldHVybiB2b2lkICR0KHF0LGUsdCxpKTtpZihyLnB1c2goZSksQXJyYXkuaXNBcnJheShlKSlmb3IoYT0wO2E8ZS5sZW5ndGg7YSsrKVF0KGVbYV0sYSxhLHIsZSxvLHMpO2Vsc2V7dmFyIHU9T2JqZWN0LmtleXMoZSk7Zm9yKGE9MDthPHUubGVuZ3RoO2ErKyl7dmFyIGM9dVthXTtRdChlW2NdLGMsYSxyLGUsbyxzKX19ci5wb3AoKX19ZnVuY3Rpb24gWXQoZSx0KXtyZXR1cm4gZTx0Py0xOmU+dD8xOjB9ZnVuY3Rpb24gWnQoZSx0LG4scil7dm9pZCAwPT09ciYmKHI9V3QoKSk7dmFyIGksbz1lbihlLFwiXCIsMCxbXSx2b2lkIDAsMCxyKXx8ZTt0cnl7aT0wPT09SnQubGVuZ3RoP0pTT04uc3RyaW5naWZ5KG8sdCxuKTpKU09OLnN0cmluZ2lmeShvLHRuKHQpLG4pfWNhdGNoKGUpe3JldHVybiBKU09OLnN0cmluZ2lmeShcIlt1bmFibGUgdG8gc2VyaWFsaXplLCBjaXJjdWxhciByZWZlcmVuY2UgaXMgdG9vIGNvbXBsZXggdG8gYW5hbHl6ZV1cIil9ZmluYWxseXtmb3IoOzAhPT1WdC5sZW5ndGg7KXt2YXIgcz1WdC5wb3AoKTs0PT09cy5sZW5ndGg/T2JqZWN0LmRlZmluZVByb3BlcnR5KHNbMF0sc1sxXSxzWzNdKTpzWzBdW3NbMV1dPXNbMl19fXJldHVybiBpfWZ1bmN0aW9uIGVuKGUsdCxuLHIsaSxvLHMpe3ZhciBhO2lmKG8rPTEsXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lKXtmb3IoYT0wO2E8ci5sZW5ndGg7YSsrKWlmKHJbYV09PT1lKXJldHVybiB2b2lkICR0KHp0LGUsdCxpKTt0cnl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS50b0pTT04pcmV0dXJufWNhdGNoKGUpe3JldHVybn1pZih2b2lkIDAhPT1zLmRlcHRoTGltaXQmJm8+cy5kZXB0aExpbWl0KXJldHVybiB2b2lkICR0KHF0LGUsdCxpKTtpZih2b2lkIDAhPT1zLmVkZ2VzTGltaXQmJm4rMT5zLmVkZ2VzTGltaXQpcmV0dXJuIHZvaWQgJHQocXQsZSx0LGkpO2lmKHIucHVzaChlKSxBcnJheS5pc0FycmF5KGUpKWZvcihhPTA7YTxlLmxlbmd0aDthKyspZW4oZVthXSxhLGEscixlLG8scyk7ZWxzZXt2YXIgdT17fSxjPU9iamVjdC5rZXlzKGUpLnNvcnQoWXQpO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBsPWNbYV07ZW4oZVtsXSxsLGEscixlLG8scyksdVtsXT1lW2xdfWlmKHZvaWQgMD09PWkpcmV0dXJuIHU7VnQucHVzaChbaSx0LGVdKSxpW3RdPXV9ci5wb3AoKX19ZnVuY3Rpb24gdG4oZSl7cmV0dXJuIGU9dm9pZCAwIT09ZT9lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9LGZ1bmN0aW9uKHQsbil7aWYoSnQubGVuZ3RoPjApZm9yKHZhciByPTA7cjxKdC5sZW5ndGg7cisrKXt2YXIgaT1KdFtyXTtpZihpWzFdPT09dCYmaVswXT09PW4pe249aVsyXSxKdC5zcGxpY2UociwxKTticmVha319cmV0dXJuIGUuY2FsbCh0aGlzLHQsbil9fXZhciBubj1TdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uscm49LyUyMC9nLG9uPVwiUkZDMzk4NlwiLHNuPXtkZWZhdWx0Om9uLGZvcm1hdHRlcnM6e1JGQzE3Mzg6ZnVuY3Rpb24oZSl7cmV0dXJuIG5uLmNhbGwoZSxybixcIitcIil9LFJGQzM5ODY6ZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZyhlKX19LFJGQzE3Mzg6XCJSRkMxNzM4XCIsUkZDMzk4Njpvbn0sYW49c24sdW49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxjbj1BcnJheS5pc0FycmF5LGxuPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PDI1NjsrK3QpZS5wdXNoKFwiJVwiKygodDwxNj9cIjBcIjpcIlwiKSt0LnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7cmV0dXJuIGV9KCkscG49ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dCYmdC5wbGFpbk9iamVjdHM/T2JqZWN0LmNyZWF0ZShudWxsKTp7fSxyPTA7cjxlLmxlbmd0aDsrK3Ipdm9pZCAwIT09ZVtyXSYmKG5bcl09ZVtyXSk7cmV0dXJuIG59LGhuPXthcnJheVRvT2JqZWN0OnBuLGFzc2lnbjpmdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3Qua2V5cyh0KS5yZWR1Y2UoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbbl09dFtuXSxlfSksZSl9LGNvbWJpbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm5bXS5jb25jYXQoZSx0KX0sY29tcGFjdDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W3tvYmo6e286ZX0scHJvcDpcIm9cIn1dLG49W10scj0wO3I8dC5sZW5ndGg7KytyKWZvcih2YXIgaT10W3JdLG89aS5vYmpbaS5wcm9wXSxzPU9iamVjdC5rZXlzKG8pLGE9MDthPHMubGVuZ3RoOysrYSl7dmFyIHU9c1thXSxjPW9bdV07XCJvYmplY3RcIj09dHlwZW9mIGMmJm51bGwhPT1jJiYtMT09PW4uaW5kZXhPZihjKSYmKHQucHVzaCh7b2JqOm8scHJvcDp1fSksbi5wdXNoKGMpKX1yZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKDtlLmxlbmd0aD4xOyl7dmFyIHQ9ZS5wb3AoKSxuPXQub2JqW3QucHJvcF07aWYoY24obikpe2Zvcih2YXIgcj1bXSxpPTA7aTxuLmxlbmd0aDsrK2kpdm9pZCAwIT09bltpXSYmci5wdXNoKG5baV0pO3Qub2JqW3QucHJvcF09cn19fSh0KSxlfSxkZWNvZGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUucmVwbGFjZSgvXFwrL2csXCIgXCIpO2lmKFwiaXNvLTg4NTktMVwiPT09bilyZXR1cm4gci5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksdW5lc2NhcGUpO3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHIpfWNhdGNoKGUpe3JldHVybiByfX0sZW5jb2RlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7aWYoMD09PWUubGVuZ3RoKXJldHVybiBlO3ZhciBvPWU7aWYoXCJzeW1ib2xcIj09dHlwZW9mIGU/bz1TeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk6XCJzdHJpbmdcIiE9dHlwZW9mIGUmJihvPVN0cmluZyhlKSksXCJpc28tODg1OS0xXCI9PT1uKXJldHVybiBlc2NhcGUobykucmVwbGFjZSgvJXVbMC05YS1mXXs0fS9naSwoZnVuY3Rpb24oZSl7cmV0dXJuXCIlMjYlMjNcIitwYXJzZUludChlLnNsaWNlKDIpLDE2KStcIiUzQlwifSkpO2Zvcih2YXIgcz1cIlwiLGE9MDthPG8ubGVuZ3RoOysrYSl7dmFyIHU9by5jaGFyQ29kZUF0KGEpOzQ1PT09dXx8NDY9PT11fHw5NT09PXV8fDEyNj09PXV8fHU+PTQ4JiZ1PD01N3x8dT49NjUmJnU8PTkwfHx1Pj05NyYmdTw9MTIyfHxpPT09YW4uUkZDMTczOCYmKDQwPT09dXx8NDE9PT11KT9zKz1vLmNoYXJBdChhKTp1PDEyOD9zKz1sblt1XTp1PDIwNDg/cys9bG5bMTkyfHU+PjZdK2xuWzEyOHw2MyZ1XTp1PDU1Mjk2fHx1Pj01NzM0ND9zKz1sblsyMjR8dT4+MTJdK2xuWzEyOHx1Pj42JjYzXStsblsxMjh8NjMmdV06KGErPTEsdT02NTUzNisoKDEwMjMmdSk8PDEwfDEwMjMmby5jaGFyQ29kZUF0KGEpKSxzKz1sblsyNDB8dT4+MThdK2xuWzEyOHx1Pj4xMiY2M10rbG5bMTI4fHU+PjYmNjNdK2xuWzEyOHw2MyZ1XSl9cmV0dXJuIHN9LGlzQnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiEoIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlKSYmISEoZS5jb25zdHJ1Y3RvciYmZS5jb25zdHJ1Y3Rvci5pc0J1ZmZlciYmZS5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihlKSl9LGlzUmVnRXhwOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBSZWdFeHBdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LG1heWJlTWFwOmZ1bmN0aW9uKGUsdCl7aWYoY24oZSkpe2Zvcih2YXIgbj1bXSxyPTA7cjxlLmxlbmd0aDtyKz0xKW4ucHVzaCh0KGVbcl0pKTtyZXR1cm4gbn1yZXR1cm4gdChlKX0sbWVyZ2U6ZnVuY3Rpb24gZSh0LG4scil7aWYoIW4pcmV0dXJuIHQ7aWYoXCJvYmplY3RcIiE9dHlwZW9mIG4pe2lmKGNuKHQpKXQucHVzaChuKTtlbHNle2lmKCF0fHxcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm5bdCxuXTsociYmKHIucGxhaW5PYmplY3RzfHxyLmFsbG93UHJvdG90eXBlcyl8fCF1bi5jYWxsKE9iamVjdC5wcm90b3R5cGUsbikpJiYodFtuXT0hMCl9cmV0dXJuIHR9aWYoIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVyblt0XS5jb25jYXQobik7dmFyIGk9dDtyZXR1cm4gY24odCkmJiFjbihuKSYmKGk9cG4odCxyKSksY24odCkmJmNuKG4pPyhuLmZvckVhY2goKGZ1bmN0aW9uKG4saSl7aWYodW4uY2FsbCh0LGkpKXt2YXIgbz10W2ldO28mJlwib2JqZWN0XCI9PXR5cGVvZiBvJiZuJiZcIm9iamVjdFwiPT10eXBlb2Ygbj90W2ldPWUobyxuLHIpOnQucHVzaChuKX1lbHNlIHRbaV09bn0pKSx0KTpPYmplY3Qua2V5cyhuKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsaSl7dmFyIG89bltpXTtyZXR1cm4gdW4uY2FsbCh0LGkpP3RbaV09ZSh0W2ldLG8scik6dFtpXT1vLHR9KSxpKX19LGZuPWhuLGRuPXNuLGduPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkseW49e2JyYWNrZXRzOmZ1bmN0aW9uKGUpe3JldHVybiBlK1wiW11cIn0sY29tbWE6XCJjb21tYVwiLGluZGljZXM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZStcIltcIit0K1wiXVwifSxyZXBlYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9fSxibj1BcnJheS5pc0FycmF5LHZuPVN0cmluZy5wcm90b3R5cGUuc3BsaXQsbW49QXJyYXkucHJvdG90eXBlLnB1c2gsX249ZnVuY3Rpb24oZSx0KXttbi5hcHBseShlLGJuKHQpP3Q6W3RdKX0sT249RGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcsUG49ZG4uZGVmYXVsdCxTbj17YWRkUXVlcnlQcmVmaXg6ITEsYWxsb3dEb3RzOiExLGNoYXJzZXQ6XCJ1dGYtOFwiLGNoYXJzZXRTZW50aW5lbDohMSxkZWxpbWl0ZXI6XCImXCIsZW5jb2RlOiEwLGVuY29kZXI6Zm4uZW5jb2RlLGVuY29kZVZhbHVlc09ubHk6ITEsZm9ybWF0OlBuLGZvcm1hdHRlcjpkbi5mb3JtYXR0ZXJzW1BuXSxpbmRpY2VzOiExLHNlcmlhbGl6ZURhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIE9uLmNhbGwoZSl9LHNraXBOdWxsczohMSxzdHJpY3ROdWxsSGFuZGxpbmc6ITF9LHduPWZ1bmN0aW9uIGUodCxuLHIsaSxvLHMsYSx1LGMsbCxwLGgsZixkKXt2YXIgZyx5PXQ7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYT95PWEobix5KTp5IGluc3RhbmNlb2YgRGF0ZT95PWwoeSk6XCJjb21tYVwiPT09ciYmYm4oeSkmJih5PWZuLm1heWJlTWFwKHksKGZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRGF0ZT9sKGUpOmV9KSkpLG51bGw9PT15KXtpZihpKXJldHVybiBzJiYhZj9zKG4sU24uZW5jb2RlcixkLFwia2V5XCIscCk6bjt5PVwiXCJ9aWYoXCJzdHJpbmdcIj09dHlwZW9mKGc9eSl8fFwibnVtYmVyXCI9PXR5cGVvZiBnfHxcImJvb2xlYW5cIj09dHlwZW9mIGd8fFwic3ltYm9sXCI9PXR5cGVvZiBnfHxcImJpZ2ludFwiPT10eXBlb2YgZ3x8Zm4uaXNCdWZmZXIoeSkpe2lmKHMpe3ZhciBiPWY/bjpzKG4sU24uZW5jb2RlcixkLFwia2V5XCIscCk7aWYoXCJjb21tYVwiPT09ciYmZil7Zm9yKHZhciB2PXZuLmNhbGwoU3RyaW5nKHkpLFwiLFwiKSxtPVwiXCIsXz0wO188di5sZW5ndGg7KytfKW0rPSgwPT09Xz9cIlwiOlwiLFwiKStoKHModltfXSxTbi5lbmNvZGVyLGQsXCJ2YWx1ZVwiLHApKTtyZXR1cm5baChiKStcIj1cIittXX1yZXR1cm5baChiKStcIj1cIitoKHMoeSxTbi5lbmNvZGVyLGQsXCJ2YWx1ZVwiLHApKV19cmV0dXJuW2gobikrXCI9XCIraChTdHJpbmcoeSkpXX12YXIgTyxQPVtdO2lmKHZvaWQgMD09PXkpcmV0dXJuIFA7aWYoXCJjb21tYVwiPT09ciYmYm4oeSkpTz1be3ZhbHVlOnkubGVuZ3RoPjA/eS5qb2luKFwiLFwiKXx8bnVsbDp2b2lkIDB9XTtlbHNlIGlmKGJuKGEpKU89YTtlbHNle3ZhciBTPU9iamVjdC5rZXlzKHkpO089dT9TLnNvcnQodSk6U31mb3IodmFyIHc9MDt3PE8ubGVuZ3RoOysrdyl7dmFyIFQ9T1t3XSxrPVwib2JqZWN0XCI9PXR5cGVvZiBUJiZ2b2lkIDAhPT1ULnZhbHVlP1QudmFsdWU6eVtUXTtpZighb3x8bnVsbCE9PWspe3ZhciBOPWJuKHkpP1wiZnVuY3Rpb25cIj09dHlwZW9mIHI/cihuLFQpOm46bisoYz9cIi5cIitUOlwiW1wiK1QrXCJdXCIpO19uKFAsZShrLE4scixpLG8scyxhLHUsYyxsLHAsaCxmLGQpKX19cmV0dXJuIFB9LFRuPWhuLGtuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTm49QXJyYXkuaXNBcnJheSxDbj17YWxsb3dEb3RzOiExLGFsbG93UHJvdG90eXBlczohMSxhcnJheUxpbWl0OjIwLGNoYXJzZXQ6XCJ1dGYtOFwiLGNoYXJzZXRTZW50aW5lbDohMSxjb21tYTohMSxkZWNvZGVyOlRuLmRlY29kZSxkZWxpbWl0ZXI6XCImXCIsZGVwdGg6NSxpZ25vcmVRdWVyeVByZWZpeDohMSxpbnRlcnByZXROdW1lcmljRW50aXRpZXM6ITEscGFyYW1ldGVyTGltaXQ6MWUzLHBhcnNlQXJyYXlzOiEwLHBsYWluT2JqZWN0czohMSxzdHJpY3ROdWxsSGFuZGxpbmc6ITF9LEVuPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoLyYjKFxcZCspOy9nLChmdW5jdGlvbihlLHQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHQsMTApKX0pKX0sQW49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJnQuY29tbWEmJmUuaW5kZXhPZihcIixcIik+LTE/ZS5zcGxpdChcIixcIik6ZX0sTW49ZnVuY3Rpb24oZSx0LG4scil7aWYoZSl7dmFyIGk9bi5hbGxvd0RvdHM/ZS5yZXBsYWNlKC9cXC4oW14uW10rKS9nLFwiWyQxXVwiKTplLG89LyhcXFtbXltcXF1dKl0pL2cscz1uLmRlcHRoPjAmJi8oXFxbW15bXFxdXSpdKS8uZXhlYyhpKSxhPXM/aS5zbGljZSgwLHMuaW5kZXgpOmksdT1bXTtpZihhKXtpZighbi5wbGFpbk9iamVjdHMmJmtuLmNhbGwoT2JqZWN0LnByb3RvdHlwZSxhKSYmIW4uYWxsb3dQcm90b3R5cGVzKXJldHVybjt1LnB1c2goYSl9Zm9yKHZhciBjPTA7bi5kZXB0aD4wJiZudWxsIT09KHM9by5leGVjKGkpKSYmYzxuLmRlcHRoOyl7aWYoYys9MSwhbi5wbGFpbk9iamVjdHMmJmtuLmNhbGwoT2JqZWN0LnByb3RvdHlwZSxzWzFdLnNsaWNlKDEsLTEpKSYmIW4uYWxsb3dQcm90b3R5cGVzKXJldHVybjt1LnB1c2goc1sxXSl9cmV0dXJuIHMmJnUucHVzaChcIltcIitpLnNsaWNlKHMuaW5kZXgpK1wiXVwiKSxmdW5jdGlvbihlLHQsbixyKXtmb3IodmFyIGk9cj90OkFuKHQsbiksbz1lLmxlbmd0aC0xO28+PTA7LS1vKXt2YXIgcyxhPWVbb107aWYoXCJbXVwiPT09YSYmbi5wYXJzZUFycmF5cylzPVtdLmNvbmNhdChpKTtlbHNle3M9bi5wbGFpbk9iamVjdHM/T2JqZWN0LmNyZWF0ZShudWxsKTp7fTt2YXIgdT1cIltcIj09PWEuY2hhckF0KDApJiZcIl1cIj09PWEuY2hhckF0KGEubGVuZ3RoLTEpP2Euc2xpY2UoMSwtMSk6YSxjPXBhcnNlSW50KHUsMTApO24ucGFyc2VBcnJheXN8fFwiXCIhPT11PyFpc05hTihjKSYmYSE9PXUmJlN0cmluZyhjKT09PXUmJmM+PTAmJm4ucGFyc2VBcnJheXMmJmM8PW4uYXJyYXlMaW1pdD8ocz1bXSlbY109aTpcIl9fcHJvdG9fX1wiIT09dSYmKHNbdV09aSk6cz17MDppfX1pPXN9cmV0dXJuIGl9KHUsdCxuLHIpfX0sam49e2Zvcm1hdHM6c24scGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbj1mdW5jdGlvbihlKXtpZighZSlyZXR1cm4gQ247aWYobnVsbCE9PWUuZGVjb2RlciYmdm9pZCAwIT09ZS5kZWNvZGVyJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmRlY29kZXIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uXCIpO2lmKHZvaWQgMCE9PWUuY2hhcnNldCYmXCJ1dGYtOFwiIT09ZS5jaGFyc2V0JiZcImlzby04ODU5LTFcIiE9PWUuY2hhcnNldCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWRcIik7dmFyIHQ9dm9pZCAwPT09ZS5jaGFyc2V0P0NuLmNoYXJzZXQ6ZS5jaGFyc2V0O3JldHVybnthbGxvd0RvdHM6dm9pZCAwPT09ZS5hbGxvd0RvdHM/Q24uYWxsb3dEb3RzOiEhZS5hbGxvd0RvdHMsYWxsb3dQcm90b3R5cGVzOlwiYm9vbGVhblwiPT10eXBlb2YgZS5hbGxvd1Byb3RvdHlwZXM/ZS5hbGxvd1Byb3RvdHlwZXM6Q24uYWxsb3dQcm90b3R5cGVzLGFycmF5TGltaXQ6XCJudW1iZXJcIj09dHlwZW9mIGUuYXJyYXlMaW1pdD9lLmFycmF5TGltaXQ6Q24uYXJyYXlMaW1pdCxjaGFyc2V0OnQsY2hhcnNldFNlbnRpbmVsOlwiYm9vbGVhblwiPT10eXBlb2YgZS5jaGFyc2V0U2VudGluZWw/ZS5jaGFyc2V0U2VudGluZWw6Q24uY2hhcnNldFNlbnRpbmVsLGNvbW1hOlwiYm9vbGVhblwiPT10eXBlb2YgZS5jb21tYT9lLmNvbW1hOkNuLmNvbW1hLGRlY29kZXI6XCJmdW5jdGlvblwiPT10eXBlb2YgZS5kZWNvZGVyP2UuZGVjb2RlcjpDbi5kZWNvZGVyLGRlbGltaXRlcjpcInN0cmluZ1wiPT10eXBlb2YgZS5kZWxpbWl0ZXJ8fFRuLmlzUmVnRXhwKGUuZGVsaW1pdGVyKT9lLmRlbGltaXRlcjpDbi5kZWxpbWl0ZXIsZGVwdGg6XCJudW1iZXJcIj09dHlwZW9mIGUuZGVwdGh8fCExPT09ZS5kZXB0aD8rZS5kZXB0aDpDbi5kZXB0aCxpZ25vcmVRdWVyeVByZWZpeDohMD09PWUuaWdub3JlUXVlcnlQcmVmaXgsaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOlwiYm9vbGVhblwiPT10eXBlb2YgZS5pbnRlcnByZXROdW1lcmljRW50aXRpZXM/ZS5pbnRlcnByZXROdW1lcmljRW50aXRpZXM6Q24uaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLHBhcmFtZXRlckxpbWl0OlwibnVtYmVyXCI9PXR5cGVvZiBlLnBhcmFtZXRlckxpbWl0P2UucGFyYW1ldGVyTGltaXQ6Q24ucGFyYW1ldGVyTGltaXQscGFyc2VBcnJheXM6ITEhPT1lLnBhcnNlQXJyYXlzLHBsYWluT2JqZWN0czpcImJvb2xlYW5cIj09dHlwZW9mIGUucGxhaW5PYmplY3RzP2UucGxhaW5PYmplY3RzOkNuLnBsYWluT2JqZWN0cyxzdHJpY3ROdWxsSGFuZGxpbmc6XCJib29sZWFuXCI9PXR5cGVvZiBlLnN0cmljdE51bGxIYW5kbGluZz9lLnN0cmljdE51bGxIYW5kbGluZzpDbi5zdHJpY3ROdWxsSGFuZGxpbmd9fSh0KTtpZihcIlwiPT09ZXx8bnVsbD09ZSlyZXR1cm4gbi5wbGFpbk9iamVjdHM/T2JqZWN0LmNyZWF0ZShudWxsKTp7fTtmb3IodmFyIHI9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZnVuY3Rpb24oZSx0KXt2YXIgbixyPXt9LGk9dC5pZ25vcmVRdWVyeVByZWZpeD9lLnJlcGxhY2UoL15cXD8vLFwiXCIpOmUsbz10LnBhcmFtZXRlckxpbWl0PT09MS8wP3ZvaWQgMDp0LnBhcmFtZXRlckxpbWl0LHM9aS5zcGxpdCh0LmRlbGltaXRlcixvKSxhPS0xLHU9dC5jaGFyc2V0O2lmKHQuY2hhcnNldFNlbnRpbmVsKWZvcihuPTA7bjxzLmxlbmd0aDsrK24pMD09PXNbbl0uaW5kZXhPZihcInV0Zjg9XCIpJiYoXCJ1dGY4PSVFMiU5QyU5M1wiPT09c1tuXT91PVwidXRmLThcIjpcInV0Zjg9JTI2JTIzMTAwMDMlM0JcIj09PXNbbl0mJih1PVwiaXNvLTg4NTktMVwiKSxhPW4sbj1zLmxlbmd0aCk7Zm9yKG49MDtuPHMubGVuZ3RoOysrbilpZihuIT09YSl7dmFyIGMsbCxwPXNbbl0saD1wLmluZGV4T2YoXCJdPVwiKSxmPS0xPT09aD9wLmluZGV4T2YoXCI9XCIpOmgrMTstMT09PWY/KGM9dC5kZWNvZGVyKHAsQ24uZGVjb2Rlcix1LFwia2V5XCIpLGw9dC5zdHJpY3ROdWxsSGFuZGxpbmc/bnVsbDpcIlwiKTooYz10LmRlY29kZXIocC5zbGljZSgwLGYpLENuLmRlY29kZXIsdSxcImtleVwiKSxsPVRuLm1heWJlTWFwKEFuKHAuc2xpY2UoZisxKSx0KSwoZnVuY3Rpb24oZSl7cmV0dXJuIHQuZGVjb2RlcihlLENuLmRlY29kZXIsdSxcInZhbHVlXCIpfSkpKSxsJiZ0LmludGVycHJldE51bWVyaWNFbnRpdGllcyYmXCJpc28tODg1OS0xXCI9PT11JiYobD1FbihsKSkscC5pbmRleE9mKFwiW109XCIpPi0xJiYobD1ObihsKT9bbF06bCksa24uY2FsbChyLGMpP3JbY109VG4uY29tYmluZShyW2NdLGwpOnJbY109bH1yZXR1cm4gcn0oZSxuKTplLGk9bi5wbGFpbk9iamVjdHM/T2JqZWN0LmNyZWF0ZShudWxsKTp7fSxvPU9iamVjdC5rZXlzKHIpLHM9MDtzPG8ubGVuZ3RoOysrcyl7dmFyIGE9b1tzXSx1PU1uKGEsclthXSxuLFwic3RyaW5nXCI9PXR5cGVvZiBlKTtpPVRuLm1lcmdlKGksdSxuKX1yZXR1cm4gVG4uY29tcGFjdChpKX0sc3RyaW5naWZ5OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lLGk9ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIFNuO2lmKG51bGwhPT1lLmVuY29kZXImJnZvaWQgMCE9PWUuZW5jb2RlciYmXCJmdW5jdGlvblwiIT10eXBlb2YgZS5lbmNvZGVyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLlwiKTt2YXIgdD1lLmNoYXJzZXR8fFNuLmNoYXJzZXQ7aWYodm9pZCAwIT09ZS5jaGFyc2V0JiZcInV0Zi04XCIhPT1lLmNoYXJzZXQmJlwiaXNvLTg4NTktMVwiIT09ZS5jaGFyc2V0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZFwiKTt2YXIgbj1kbi5kZWZhdWx0O2lmKHZvaWQgMCE9PWUuZm9ybWF0KXtpZighZ24uY2FsbChkbi5mb3JtYXR0ZXJzLGUuZm9ybWF0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLlwiKTtuPWUuZm9ybWF0fXZhciByPWRuLmZvcm1hdHRlcnNbbl0saT1Tbi5maWx0ZXI7cmV0dXJuKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmlsdGVyfHxibihlLmZpbHRlcikpJiYoaT1lLmZpbHRlcikse2FkZFF1ZXJ5UHJlZml4OlwiYm9vbGVhblwiPT10eXBlb2YgZS5hZGRRdWVyeVByZWZpeD9lLmFkZFF1ZXJ5UHJlZml4OlNuLmFkZFF1ZXJ5UHJlZml4LGFsbG93RG90czp2b2lkIDA9PT1lLmFsbG93RG90cz9Tbi5hbGxvd0RvdHM6ISFlLmFsbG93RG90cyxjaGFyc2V0OnQsY2hhcnNldFNlbnRpbmVsOlwiYm9vbGVhblwiPT10eXBlb2YgZS5jaGFyc2V0U2VudGluZWw/ZS5jaGFyc2V0U2VudGluZWw6U24uY2hhcnNldFNlbnRpbmVsLGRlbGltaXRlcjp2b2lkIDA9PT1lLmRlbGltaXRlcj9Tbi5kZWxpbWl0ZXI6ZS5kZWxpbWl0ZXIsZW5jb2RlOlwiYm9vbGVhblwiPT10eXBlb2YgZS5lbmNvZGU/ZS5lbmNvZGU6U24uZW5jb2RlLGVuY29kZXI6XCJmdW5jdGlvblwiPT10eXBlb2YgZS5lbmNvZGVyP2UuZW5jb2RlcjpTbi5lbmNvZGVyLGVuY29kZVZhbHVlc09ubHk6XCJib29sZWFuXCI9PXR5cGVvZiBlLmVuY29kZVZhbHVlc09ubHk/ZS5lbmNvZGVWYWx1ZXNPbmx5OlNuLmVuY29kZVZhbHVlc09ubHksZmlsdGVyOmksZm9ybWF0Om4sZm9ybWF0dGVyOnIsc2VyaWFsaXplRGF0ZTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNlcmlhbGl6ZURhdGU/ZS5zZXJpYWxpemVEYXRlOlNuLnNlcmlhbGl6ZURhdGUsc2tpcE51bGxzOlwiYm9vbGVhblwiPT10eXBlb2YgZS5za2lwTnVsbHM/ZS5za2lwTnVsbHM6U24uc2tpcE51bGxzLHNvcnQ6XCJmdW5jdGlvblwiPT10eXBlb2YgZS5zb3J0P2Uuc29ydDpudWxsLHN0cmljdE51bGxIYW5kbGluZzpcImJvb2xlYW5cIj09dHlwZW9mIGUuc3RyaWN0TnVsbEhhbmRsaW5nP2Uuc3RyaWN0TnVsbEhhbmRsaW5nOlNuLnN0cmljdE51bGxIYW5kbGluZ319KHQpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGkuZmlsdGVyP3I9KDAsaS5maWx0ZXIpKFwiXCIscik6Ym4oaS5maWx0ZXIpJiYobj1pLmZpbHRlcik7dmFyIG8scz1bXTtpZihcIm9iamVjdFwiIT10eXBlb2Ygcnx8bnVsbD09PXIpcmV0dXJuXCJcIjtvPXQmJnQuYXJyYXlGb3JtYXQgaW4geW4/dC5hcnJheUZvcm1hdDp0JiZcImluZGljZXNcImluIHQ/dC5pbmRpY2VzP1wiaW5kaWNlc1wiOlwicmVwZWF0XCI6XCJpbmRpY2VzXCI7dmFyIGE9eW5bb107bnx8KG49T2JqZWN0LmtleXMocikpLGkuc29ydCYmbi5zb3J0KGkuc29ydCk7Zm9yKHZhciB1PTA7dTxuLmxlbmd0aDsrK3Upe3ZhciBjPW5bdV07aS5za2lwTnVsbHMmJm51bGw9PT1yW2NdfHxfbihzLHduKHJbY10sYyxhLGkuc3RyaWN0TnVsbEhhbmRsaW5nLGkuc2tpcE51bGxzLGkuZW5jb2RlP2kuZW5jb2RlcjpudWxsLGkuZmlsdGVyLGkuc29ydCxpLmFsbG93RG90cyxpLnNlcmlhbGl6ZURhdGUsaS5mb3JtYXQsaS5mb3JtYXR0ZXIsaS5lbmNvZGVWYWx1ZXNPbmx5LGkuY2hhcnNldCkpfXZhciBsPXMuam9pbihpLmRlbGltaXRlcikscD0hMD09PWkuYWRkUXVlcnlQcmVmaXg/XCI/XCI6XCJcIjtyZXR1cm4gaS5jaGFyc2V0U2VudGluZWwmJihcImlzby04ODU5LTFcIj09PWkuY2hhcnNldD9wKz1cInV0Zjg9JTI2JTIzMTAwMDMlM0ImXCI6cCs9XCJ1dGY4PSVFMiU5QyU5MyZcIiksbC5sZW5ndGg+MD9wK2w6XCJcIn19O2Z1bmN0aW9uIFJuKGUpe3JldHVybiBSbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxSbihlKX12YXIgVW49ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT09Um4oZSl9O2Z1bmN0aW9uIHhuKGUpe3JldHVybiB4bj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSx4bihlKX12YXIgRG49VW4sSW49R247ZnVuY3Rpb24gR24oZSl7aWYoZSlyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIEduLnByb3RvdHlwZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoR24ucHJvdG90eXBlLHQpJiYoZVt0XT1Hbi5wcm90b3R5cGVbdF0pO3JldHVybiBlfShlKX1Hbi5wcm90b3R5cGUuY2xlYXJUaW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIGNsZWFyVGltZW91dCh0aGlzLl90aW1lciksY2xlYXJUaW1lb3V0KHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyKSxjbGVhclRpbWVvdXQodGhpcy5fdXBsb2FkVGltZW91dFRpbWVyKSxkZWxldGUgdGhpcy5fdGltZXIsZGVsZXRlIHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyLGRlbGV0ZSB0aGlzLl91cGxvYWRUaW1lb3V0VGltZXIsdGhpc30sR24ucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9wYXJzZXI9ZSx0aGlzfSxHbi5wcm90b3R5cGUucmVzcG9uc2VUeXBlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9yZXNwb25zZVR5cGU9ZSx0aGlzfSxHbi5wcm90b3R5cGUuc2VyaWFsaXplPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9zZXJpYWxpemVyPWUsdGhpc30sR24ucHJvdG90eXBlLnRpbWVvdXQ9ZnVuY3Rpb24oZSl7aWYoIWV8fFwib2JqZWN0XCIhPT14bihlKSlyZXR1cm4gdGhpcy5fdGltZW91dD1lLHRoaXMuX3Jlc3BvbnNlVGltZW91dD0wLHRoaXMuX3VwbG9hZFRpbWVvdXQ9MCx0aGlzO2Zvcih2YXIgdCBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpKXN3aXRjaCh0KXtjYXNlXCJkZWFkbGluZVwiOnRoaXMuX3RpbWVvdXQ9ZS5kZWFkbGluZTticmVhaztjYXNlXCJyZXNwb25zZVwiOnRoaXMuX3Jlc3BvbnNlVGltZW91dD1lLnJlc3BvbnNlO2JyZWFrO2Nhc2VcInVwbG9hZFwiOnRoaXMuX3VwbG9hZFRpbWVvdXQ9ZS51cGxvYWQ7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLndhcm4oXCJVbmtub3duIHRpbWVvdXQgb3B0aW9uXCIsdCl9cmV0dXJuIHRoaXN9LEduLnByb3RvdHlwZS5yZXRyeT1mdW5jdGlvbihlLHQpe3JldHVybiAwIT09YXJndW1lbnRzLmxlbmd0aCYmITAhPT1lfHwoZT0xKSxlPD0wJiYoZT0wKSx0aGlzLl9tYXhSZXRyaWVzPWUsdGhpcy5fcmV0cmllcz0wLHRoaXMuX3JldHJ5Q2FsbGJhY2s9dCx0aGlzfTt2YXIgS249bmV3IFNldChbXCJFVElNRURPVVRcIixcIkVDT05OUkVTRVRcIixcIkVBRERSSU5VU0VcIixcIkVDT05OUkVGVVNFRFwiLFwiRVBJUEVcIixcIkVOT1RGT1VORFwiLFwiRU5FVFVOUkVBQ0hcIixcIkVBSV9BR0FJTlwiXSksRm49bmV3IFNldChbNDA4LDQxMyw0MjksNTAwLDUwMiw1MDMsNTA0LDUyMSw1MjIsNTI0XSk7R24ucHJvdG90eXBlLl9zaG91bGRSZXRyeT1mdW5jdGlvbihlLHQpe2lmKCF0aGlzLl9tYXhSZXRyaWVzfHx0aGlzLl9yZXRyaWVzKys+PXRoaXMuX21heFJldHJpZXMpcmV0dXJuITE7aWYodGhpcy5fcmV0cnlDYWxsYmFjayl0cnl7dmFyIG49dGhpcy5fcmV0cnlDYWxsYmFjayhlLHQpO2lmKCEwPT09bilyZXR1cm4hMDtpZighMT09PW4pcmV0dXJuITF9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKX1pZih0JiZ0LnN0YXR1cyYmRm4uaGFzKHQuc3RhdHVzKSlyZXR1cm4hMDtpZihlKXtpZihlLmNvZGUmJktuLmhhcyhlLmNvZGUpKXJldHVybiEwO2lmKGUudGltZW91dCYmXCJFQ09OTkFCT1JURURcIj09PWUuY29kZSlyZXR1cm4hMDtpZihlLmNyb3NzRG9tYWluKXJldHVybiEwfXJldHVybiExfSxHbi5wcm90b3R5cGUuX3JldHJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xlYXJUaW1lb3V0KCksdGhpcy5yZXEmJih0aGlzLnJlcT1udWxsLHRoaXMucmVxPXRoaXMucmVxdWVzdCgpKSx0aGlzLl9hYm9ydGVkPSExLHRoaXMudGltZWRvdXQ9ITEsdGhpcy50aW1lZG91dEVycm9yPW51bGwsdGhpcy5fZW5kKCl9LEduLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZighdGhpcy5fZnVsbGZpbGxlZFByb21pc2Upe3ZhciByPXRoaXM7dGhpcy5fZW5kQ2FsbGVkJiZjb25zb2xlLndhcm4oXCJXYXJuaW5nOiBzdXBlcmFnZW50IHJlcXVlc3Qgd2FzIHNlbnQgdHdpY2UsIGJlY2F1c2UgYm90aCAuZW5kKCkgYW5kIC50aGVuKCkgd2VyZSBjYWxsZWQuIE5ldmVyIGNhbGwgLmVuZCgpIGlmIHlvdSB1c2UgcHJvbWlzZXNcIiksdGhpcy5fZnVsbGZpbGxlZFByb21pc2U9bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7ci5vbihcImFib3J0XCIsKGZ1bmN0aW9uKCl7aWYoIShuLl9tYXhSZXRyaWVzJiZuLl9tYXhSZXRyaWVzPm4uX3JldHJpZXMpKWlmKG4udGltZWRvdXQmJm4udGltZWRvdXRFcnJvcil0KG4udGltZWRvdXRFcnJvcik7ZWxzZXt2YXIgZT1uZXcgRXJyb3IoXCJBYm9ydGVkXCIpO2UuY29kZT1cIkFCT1JURURcIixlLnN0YXR1cz1uLnN0YXR1cyxlLm1ldGhvZD1uLm1ldGhvZCxlLnVybD1uLnVybCx0KGUpfX0pKSxyLmVuZCgoZnVuY3Rpb24obixyKXtuP3Qobik6ZShyKX0pKX0pKX1yZXR1cm4gdGhpcy5fZnVsbGZpbGxlZFByb21pc2UudGhlbihlLHQpfSxHbi5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsZSl9LEduLnByb3RvdHlwZS51c2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGUodGhpcyksdGhpc30sR24ucHJvdG90eXBlLm9rPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGJhY2sgcmVxdWlyZWRcIik7cmV0dXJuIHRoaXMuX29rQ2FsbGJhY2s9ZSx0aGlzfSxHbi5wcm90b3R5cGUuX2lzUmVzcG9uc2VPSz1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJih0aGlzLl9va0NhbGxiYWNrP3RoaXMuX29rQ2FsbGJhY2soZSk6ZS5zdGF0dXM+PTIwMCYmZS5zdGF0dXM8MzAwKX0sR24ucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faGVhZGVyW2UudG9Mb3dlckNhc2UoKV19LEduLnByb3RvdHlwZS5nZXRIZWFkZXI9R24ucHJvdG90eXBlLmdldCxHbi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCl7aWYoRG4oZSkpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiZ0aGlzLnNldChuLGVbbl0pO3JldHVybiB0aGlzfXJldHVybiB0aGlzLl9oZWFkZXJbZS50b0xvd2VyQ2FzZSgpXT10LHRoaXMuaGVhZGVyW2VdPXQsdGhpc30sR24ucHJvdG90eXBlLnVuc2V0PWZ1bmN0aW9uKGUpe3JldHVybiBkZWxldGUgdGhpcy5faGVhZGVyW2UudG9Mb3dlckNhc2UoKV0sZGVsZXRlIHRoaXMuaGVhZGVyW2VdLHRoaXN9LEduLnByb3RvdHlwZS5maWVsZD1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwiLmZpZWxkKG5hbWUsIHZhbCkgbmFtZSBjYW4gbm90IGJlIGVtcHR5XCIpO2lmKHRoaXMuX2RhdGEpdGhyb3cgbmV3IEVycm9yKFwiLmZpZWxkKCkgY2FuJ3QgYmUgdXNlZCBpZiAuc2VuZCgpIGlzIHVzZWQuIFBsZWFzZSB1c2Ugb25seSAuc2VuZCgpIG9yIG9ubHkgLmZpZWxkKCkgJiAuYXR0YWNoKClcIik7aWYoRG4oZSkpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiZ0aGlzLmZpZWxkKG4sZVtuXSk7cmV0dXJuIHRoaXN9aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciByIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikmJnRoaXMuZmllbGQoZSx0W3JdKTtyZXR1cm4gdGhpc31pZihudWxsPT10KXRocm93IG5ldyBFcnJvcihcIi5maWVsZChuYW1lLCB2YWwpIHZhbCBjYW4gbm90IGJlIGVtcHR5XCIpO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgdCYmKHQ9U3RyaW5nKHQpKSx0aGlzLl9nZXRGb3JtRGF0YSgpLmFwcGVuZChlLHQpLHRoaXN9LEduLnByb3RvdHlwZS5hYm9ydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9hYm9ydGVkfHwodGhpcy5fYWJvcnRlZD0hMCx0aGlzLnhociYmdGhpcy54aHIuYWJvcnQoKSx0aGlzLnJlcSYmdGhpcy5yZXEuYWJvcnQoKSx0aGlzLmNsZWFyVGltZW91dCgpLHRoaXMuZW1pdChcImFib3J0XCIpKSx0aGlzfSxHbi5wcm90b3R5cGUuX2F1dGg9ZnVuY3Rpb24oZSx0LG4scil7c3dpdGNoKG4udHlwZSl7Y2FzZVwiYmFzaWNcIjp0aGlzLnNldChcIkF1dGhvcml6YXRpb25cIixcIkJhc2ljIFwiLmNvbmNhdChyKFwiXCIuY29uY2F0KGUsXCI6XCIpLmNvbmNhdCh0KSkpKTticmVhaztjYXNlXCJhdXRvXCI6dGhpcy51c2VybmFtZT1lLHRoaXMucGFzc3dvcmQ9dDticmVhaztjYXNlXCJiZWFyZXJcIjp0aGlzLnNldChcIkF1dGhvcml6YXRpb25cIixcIkJlYXJlciBcIi5jb25jYXQoZSkpfXJldHVybiB0aGlzfSxHbi5wcm90b3R5cGUud2l0aENyZWRlbnRpYWxzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMCksdGhpcy5fd2l0aENyZWRlbnRpYWxzPWUsdGhpc30sR24ucHJvdG90eXBlLnJlZGlyZWN0cz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fbWF4UmVkaXJlY3RzPWUsdGhpc30sR24ucHJvdG90eXBlLm1heFJlc3BvbnNlU2l6ZT1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhcmd1bWVudFwiKTtyZXR1cm4gdGhpcy5fbWF4UmVzcG9uc2VTaXplPWUsdGhpc30sR24ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnttZXRob2Q6dGhpcy5tZXRob2QsdXJsOnRoaXMudXJsLGRhdGE6dGhpcy5fZGF0YSxoZWFkZXJzOnRoaXMuX2hlYWRlcn19LEduLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGUpe3ZhciB0PURuKGUpLG49dGhpcy5faGVhZGVyW1wiY29udGVudC10eXBlXCJdO2lmKHRoaXMuX2Zvcm1EYXRhKXRocm93IG5ldyBFcnJvcihcIi5zZW5kKCkgY2FuJ3QgYmUgdXNlZCBpZiAuYXR0YWNoKCkgb3IgLmZpZWxkKCkgaXMgdXNlZC4gUGxlYXNlIHVzZSBvbmx5IC5zZW5kKCkgb3Igb25seSAuZmllbGQoKSAmIC5hdHRhY2goKVwiKTtpZih0JiYhdGhpcy5fZGF0YSlBcnJheS5pc0FycmF5KGUpP3RoaXMuX2RhdGE9W106dGhpcy5faXNIb3N0KGUpfHwodGhpcy5fZGF0YT17fSk7ZWxzZSBpZihlJiZ0aGlzLl9kYXRhJiZ0aGlzLl9pc0hvc3QodGhpcy5fZGF0YSkpdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgbWVyZ2UgdGhlc2Ugc2VuZCBjYWxsc1wiKTtpZih0JiZEbih0aGlzLl9kYXRhKSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRoaXMuX2RhdGFbcl09ZVtyXSk7ZWxzZVwic3RyaW5nXCI9PXR5cGVvZiBlPyhufHx0aGlzLnR5cGUoXCJmb3JtXCIpLChuPXRoaXMuX2hlYWRlcltcImNvbnRlbnQtdHlwZVwiXSkmJihuPW4udG9Mb3dlckNhc2UoKS50cmltKCkpLHRoaXMuX2RhdGE9XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIj09PW4/dGhpcy5fZGF0YT9cIlwiLmNvbmNhdCh0aGlzLl9kYXRhLFwiJlwiKS5jb25jYXQoZSk6ZToodGhpcy5fZGF0YXx8XCJcIikrZSk6dGhpcy5fZGF0YT1lO3JldHVybiF0fHx0aGlzLl9pc0hvc3QoZSl8fG58fHRoaXMudHlwZShcImpzb25cIiksdGhpc30sR24ucHJvdG90eXBlLnNvcnRRdWVyeT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fc29ydD12b2lkIDA9PT1lfHxlLHRoaXN9LEduLnByb3RvdHlwZS5fZmluYWxpemVRdWVyeVN0cmluZz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX3F1ZXJ5LmpvaW4oXCImXCIpO2lmKGUmJih0aGlzLnVybCs9KHRoaXMudXJsLmluY2x1ZGVzKFwiP1wiKT9cIiZcIjpcIj9cIikrZSksdGhpcy5fcXVlcnkubGVuZ3RoPTAsdGhpcy5fc29ydCl7dmFyIHQ9dGhpcy51cmwuaW5kZXhPZihcIj9cIik7aWYodD49MCl7dmFyIG49dGhpcy51cmwuc2xpY2UodCsxKS5zcGxpdChcIiZcIik7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fc29ydD9uLnNvcnQodGhpcy5fc29ydCk6bi5zb3J0KCksdGhpcy51cmw9dGhpcy51cmwuc2xpY2UoMCx0KStcIj9cIituLmpvaW4oXCImXCIpfX19LEduLnByb3RvdHlwZS5fYXBwZW5kUXVlcnlTdHJpbmc9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJVbnN1cHBvcnRlZFwiKX0sR24ucHJvdG90eXBlLl90aW1lb3V0RXJyb3I9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0aGlzLl9hYm9ydGVkKXt2YXIgcj1uZXcgRXJyb3IoXCJcIi5jb25jYXQoZSt0LFwibXMgZXhjZWVkZWRcIikpO3IudGltZW91dD10LHIuY29kZT1cIkVDT05OQUJPUlRFRFwiLHIuZXJybm89bix0aGlzLnRpbWVkb3V0PSEwLHRoaXMudGltZWRvdXRFcnJvcj1yLHRoaXMuYWJvcnQoKSx0aGlzLmNhbGxiYWNrKHIpfX0sR24ucHJvdG90eXBlLl9zZXRUaW1lb3V0cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fdGltZW91dCYmIXRoaXMuX3RpbWVyJiYodGhpcy5fdGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLl90aW1lb3V0RXJyb3IoXCJUaW1lb3V0IG9mIFwiLGUuX3RpbWVvdXQsXCJFVElNRVwiKX0pLHRoaXMuX3RpbWVvdXQpKSx0aGlzLl9yZXNwb25zZVRpbWVvdXQmJiF0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lciYmKHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5fdGltZW91dEVycm9yKFwiUmVzcG9uc2UgdGltZW91dCBvZiBcIixlLl9yZXNwb25zZVRpbWVvdXQsXCJFVElNRURPVVRcIil9KSx0aGlzLl9yZXNwb25zZVRpbWVvdXQpKX07dmFyIExuPXt9O2Z1bmN0aW9uIEJuKGUsdCl7dmFyIG47aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFN5bWJvbHx8bnVsbD09ZVtTeW1ib2wuaXRlcmF0b3JdKXtpZihBcnJheS5pc0FycmF5KGUpfHwobj1mdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gSG4oZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7XCJPYmplY3RcIj09PW4mJmUuY29uc3RydWN0b3ImJihuPWUuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uKXJldHVybiBBcnJheS5mcm9tKGUpO2lmKFwiQXJndW1lbnRzXCI9PT1ufHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlyZXR1cm4gSG4oZSx0KX0oZSkpfHx0JiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe24mJihlPW4pO3ZhciByPTAsaT1mdW5jdGlvbigpe307cmV0dXJue3M6aSxuOmZ1bmN0aW9uKCl7cmV0dXJuIHI+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW3IrK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6aX19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBvLHM9ITAsYT0hMTtyZXR1cm57czpmdW5jdGlvbigpe249ZVtTeW1ib2wuaXRlcmF0b3JdKCl9LG46ZnVuY3Rpb24oKXt2YXIgZT1uLm5leHQoKTtyZXR1cm4gcz1lLmRvbmUsZX0sZTpmdW5jdGlvbihlKXthPSEwLG89ZX0sZjpmdW5jdGlvbigpe3RyeXtzfHxudWxsPT1uLnJldHVybnx8bi5yZXR1cm4oKX1maW5hbGx5e2lmKGEpdGhyb3cgb319fX1mdW5jdGlvbiBIbihlLHQpeyhudWxsPT10fHx0PmUubGVuZ3RoKSYmKHQ9ZS5sZW5ndGgpO2Zvcih2YXIgbj0wLHI9bmV3IEFycmF5KHQpO248dDtuKyspcltuXT1lW25dO3JldHVybiByfUxuLnR5cGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3BsaXQoLyAqOyAqLykuc2hpZnQoKX0sTG4ucGFyYW1zPWZ1bmN0aW9uKGUpe3ZhciB0LG49e30scj1CbihlLnNwbGl0KC8gKjsgKi8pKTt0cnl7Zm9yKHIucygpOyEodD1yLm4oKSkuZG9uZTspe3ZhciBpPXQudmFsdWUuc3BsaXQoLyAqPSAqLyksbz1pLnNoaWZ0KCkscz1pLnNoaWZ0KCk7byYmcyYmKG5bb109cyl9fWNhdGNoKGUpe3IuZShlKX1maW5hbGx5e3IuZigpfXJldHVybiBufSxMbi5wYXJzZUxpbmtzPWZ1bmN0aW9uKGUpe3ZhciB0LG49e30scj1CbihlLnNwbGl0KC8gKiwgKi8pKTt0cnl7Zm9yKHIucygpOyEodD1yLm4oKSkuZG9uZTspe3ZhciBpPXQudmFsdWUuc3BsaXQoLyAqOyAqLyksbz1pWzBdLnNsaWNlKDEsLTEpO25baVsxXS5zcGxpdCgvICo9ICovKVsxXS5zbGljZSgxLC0xKV09b319Y2F0Y2goZSl7ci5lKGUpfWZpbmFsbHl7ci5mKCl9cmV0dXJuIG59LExuLmNsZWFuSGVhZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGRlbGV0ZSBlW1wiY29udGVudC10eXBlXCJdLGRlbGV0ZSBlW1wiY29udGVudC1sZW5ndGhcIl0sZGVsZXRlIGVbXCJ0cmFuc2Zlci1lbmNvZGluZ1wiXSxkZWxldGUgZS5ob3N0LHQmJihkZWxldGUgZS5hdXRob3JpemF0aW9uLGRlbGV0ZSBlLmNvb2tpZSksZX07dmFyIHFuPUxuLHpuPVZuO2Z1bmN0aW9uIFZuKGUpe2lmKGUpcmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBWbi5wcm90b3R5cGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFZuLnByb3RvdHlwZSx0KSYmKGVbdF09Vm4ucHJvdG90eXBlW3RdKTtyZXR1cm4gZX0oZSl9ZnVuY3Rpb24gSm4oZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIFduKGUpfShlKXx8ZnVuY3Rpb24oZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSlyZXR1cm4gQXJyYXkuZnJvbShlKX0oZSl8fGZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBXbihlLHQpO3ZhciBuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtcIk9iamVjdFwiPT09biYmZS5jb25zdHJ1Y3RvciYmKG49ZS5jb25zdHJ1Y3Rvci5uYW1lKTtpZihcIk1hcFwiPT09bnx8XCJTZXRcIj09PW4pcmV0dXJuIEFycmF5LmZyb20oZSk7aWYoXCJBcmd1bWVudHNcIj09PW58fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKXJldHVybiBXbihlLHQpfShlKXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKX1mdW5jdGlvbiBXbihlLHQpeyhudWxsPT10fHx0PmUubGVuZ3RoKSYmKHQ9ZS5sZW5ndGgpO2Zvcih2YXIgbj0wLHI9bmV3IEFycmF5KHQpO248dDtuKyspcltuXT1lW25dO3JldHVybiByfWZ1bmN0aW9uIFhuKCl7dGhpcy5fZGVmYXVsdHM9W119Vm4ucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5oZWFkZXJbZS50b0xvd2VyQ2FzZSgpXX0sVm4ucHJvdG90eXBlLl9zZXRIZWFkZXJQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUpe3ZhciB0PWVbXCJjb250ZW50LXR5cGVcIl18fFwiXCI7dGhpcy50eXBlPXFuLnR5cGUodCk7dmFyIG49cW4ucGFyYW1zKHQpO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYodGhpc1tyXT1uW3JdKTt0aGlzLmxpbmtzPXt9O3RyeXtlLmxpbmsmJih0aGlzLmxpbmtzPXFuLnBhcnNlTGlua3MoZS5saW5rKSl9Y2F0Y2goZSl7fX0sVm4ucHJvdG90eXBlLl9zZXRTdGF0dXNQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUpe3ZhciB0PWUvMTAwfDA7dGhpcy5zdGF0dXNDb2RlPWUsdGhpcy5zdGF0dXM9dGhpcy5zdGF0dXNDb2RlLHRoaXMuc3RhdHVzVHlwZT10LHRoaXMuaW5mbz0xPT09dCx0aGlzLm9rPTI9PT10LHRoaXMucmVkaXJlY3Q9Mz09PXQsdGhpcy5jbGllbnRFcnJvcj00PT09dCx0aGlzLnNlcnZlckVycm9yPTU9PT10LHRoaXMuZXJyb3I9KDQ9PT10fHw1PT09dCkmJnRoaXMudG9FcnJvcigpLHRoaXMuY3JlYXRlZD0yMDE9PT1lLHRoaXMuYWNjZXB0ZWQ9MjAyPT09ZSx0aGlzLm5vQ29udGVudD0yMDQ9PT1lLHRoaXMuYmFkUmVxdWVzdD00MDA9PT1lLHRoaXMudW5hdXRob3JpemVkPTQwMT09PWUsdGhpcy5ub3RBY2NlcHRhYmxlPTQwNj09PWUsdGhpcy5mb3JiaWRkZW49NDAzPT09ZSx0aGlzLm5vdEZvdW5kPTQwND09PWUsdGhpcy51bnByb2Nlc3NhYmxlRW50aXR5PTQyMj09PWV9LFtcInVzZVwiLFwib25cIixcIm9uY2VcIixcInNldFwiLFwicXVlcnlcIixcInR5cGVcIixcImFjY2VwdFwiLFwiYXV0aFwiLFwid2l0aENyZWRlbnRpYWxzXCIsXCJzb3J0UXVlcnlcIixcInJldHJ5XCIsXCJva1wiLFwicmVkaXJlY3RzXCIsXCJ0aW1lb3V0XCIsXCJidWZmZXJcIixcInNlcmlhbGl6ZVwiLFwicGFyc2VcIixcImNhXCIsXCJrZXlcIixcInBmeFwiLFwiY2VydFwiLFwiZGlzYWJsZVRMU0NlcnRzXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe1huLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKW5bcl09YXJndW1lbnRzW3JdO3JldHVybiB0aGlzLl9kZWZhdWx0cy5wdXNoKHtmbjplLGFyZ3M6bn0pLHRoaXN9fSkpLFhuLnByb3RvdHlwZS5fc2V0RGVmYXVsdHM9ZnVuY3Rpb24oZSl7dGhpcy5fZGVmYXVsdHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZVt0LmZuXS5hcHBseShlLEpuKHQuYXJncykpfSkpfTt2YXIgJG49WG47IWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihlKXtyZXR1cm4gbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxuKGUpfXZhciByO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/cj13aW5kb3c6XCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGY/KGNvbnNvbGUud2FybihcIlVzaW5nIGJyb3dzZXItb25seSB2ZXJzaW9uIG9mIHN1cGVyYWdlbnQgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIikscj12b2lkIDApOnI9c2VsZjt2YXIgaT1CdC5leHBvcnRzLG89SHQscz1qbixhPUluLHU9VW4sYz16bixsPSRuO2Z1bmN0aW9uIHAoKXt9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsbil7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uZXcgdC5SZXF1ZXN0KFwiR0VUXCIsZSkuZW5kKG4pOjE9PT1hcmd1bWVudHMubGVuZ3RoP25ldyB0LlJlcXVlc3QoXCJHRVRcIixlKTpuZXcgdC5SZXF1ZXN0KGUsbil9O3ZhciBoPXQ9ZS5leHBvcnRzO3QuUmVxdWVzdD1tLGguZ2V0WEhSPWZ1bmN0aW9uKCl7aWYoci5YTUxIdHRwUmVxdWVzdCYmKCFyLmxvY2F0aW9ufHxcImZpbGU6XCIhPT1yLmxvY2F0aW9uLnByb3RvY29sfHwhci5BY3RpdmVYT2JqZWN0KSlyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0O3RyeXtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKX1jYXRjaChlKXt9dHJ5e3JldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQLjYuMFwiKX1jYXRjaChlKXt9dHJ5e3JldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQLjMuMFwiKX1jYXRjaChlKXt9dHJ5e3JldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQXCIpfWNhdGNoKGUpe310aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyLW9ubHkgdmVyc2lvbiBvZiBzdXBlcmFnZW50IGNvdWxkIG5vdCBmaW5kIFhIUlwiKX07dmFyIGY9XCJcIi50cmltP2Z1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvKF5cXHMqfFxccyokKS9nLFwiXCIpfTtmdW5jdGlvbiBkKGUpe2lmKCF1KGUpKXJldHVybiBlO3ZhciB0PVtdO2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiZnKHQsbixlW25dKTtyZXR1cm4gdC5qb2luKFwiJlwiKX1mdW5jdGlvbiBnKGUsdCxuKXtpZih2b2lkIDAhPT1uKWlmKG51bGwhPT1uKWlmKEFycmF5LmlzQXJyYXkobikpbi5mb3JFYWNoKChmdW5jdGlvbihuKXtnKGUsdCxuKX0pKTtlbHNlIGlmKHUobikpZm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJmcoZSxcIlwiLmNvbmNhdCh0LFwiW1wiKS5jb25jYXQocixcIl1cIiksbltyXSk7ZWxzZSBlLnB1c2goZW5jb2RlVVJJKHQpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChuKSk7ZWxzZSBlLnB1c2goZW5jb2RlVVJJKHQpKX1mdW5jdGlvbiB5KGUpe2Zvcih2YXIgdCxuLHI9e30saT1lLnNwbGl0KFwiJlwiKSxvPTAscz1pLmxlbmd0aDtvPHM7KytvKS0xPT09KG49KHQ9aVtvXSkuaW5kZXhPZihcIj1cIikpP3JbZGVjb2RlVVJJQ29tcG9uZW50KHQpXT1cIlwiOnJbZGVjb2RlVVJJQ29tcG9uZW50KHQuc2xpY2UoMCxuKSldPWRlY29kZVVSSUNvbXBvbmVudCh0LnNsaWNlKG4rMSkpO3JldHVybiByfWZ1bmN0aW9uIGIoZSl7cmV0dXJuL1svK11qc29uKCR8W14tXFx3XSkvaS50ZXN0KGUpfWZ1bmN0aW9uIHYoZSl7dGhpcy5yZXE9ZSx0aGlzLnhocj10aGlzLnJlcS54aHIsdGhpcy50ZXh0PVwiSEVBRFwiIT09dGhpcy5yZXEubWV0aG9kJiYoXCJcIj09PXRoaXMueGhyLnJlc3BvbnNlVHlwZXx8XCJ0ZXh0XCI9PT10aGlzLnhoci5yZXNwb25zZVR5cGUpfHx2b2lkIDA9PT10aGlzLnhoci5yZXNwb25zZVR5cGU/dGhpcy54aHIucmVzcG9uc2VUZXh0Om51bGwsdGhpcy5zdGF0dXNUZXh0PXRoaXMucmVxLnhoci5zdGF0dXNUZXh0O3ZhciB0PXRoaXMueGhyLnN0YXR1czsxMjIzPT09dCYmKHQ9MjA0KSx0aGlzLl9zZXRTdGF0dXNQcm9wZXJ0aWVzKHQpLHRoaXMuaGVhZGVycz1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixyLGksbz1lLnNwbGl0KC9cXHI/XFxuLykscz17fSxhPTAsdT1vLmxlbmd0aDthPHU7KythKS0xIT09KHQ9KG49b1thXSkuaW5kZXhPZihcIjpcIikpJiYocj1uLnNsaWNlKDAsdCkudG9Mb3dlckNhc2UoKSxpPWYobi5zbGljZSh0KzEpKSxzW3JdPWkpO3JldHVybiBzfSh0aGlzLnhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksdGhpcy5oZWFkZXI9dGhpcy5oZWFkZXJzLHRoaXMuaGVhZGVyW1wiY29udGVudC10eXBlXCJdPXRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiY29udGVudC10eXBlXCIpLHRoaXMuX3NldEhlYWRlclByb3BlcnRpZXModGhpcy5oZWFkZXIpLG51bGw9PT10aGlzLnRleHQmJmUuX3Jlc3BvbnNlVHlwZT90aGlzLmJvZHk9dGhpcy54aHIucmVzcG9uc2U6dGhpcy5ib2R5PVwiSEVBRFwiPT09dGhpcy5yZXEubWV0aG9kP251bGw6dGhpcy5fcGFyc2VCb2R5KHRoaXMudGV4dD90aGlzLnRleHQ6dGhpcy54aHIucmVzcG9uc2UpfWZ1bmN0aW9uIG0oZSx0KXt2YXIgbj10aGlzO3RoaXMuX3F1ZXJ5PXRoaXMuX3F1ZXJ5fHxbXSx0aGlzLm1ldGhvZD1lLHRoaXMudXJsPXQsdGhpcy5oZWFkZXI9e30sdGhpcy5faGVhZGVyPXt9LHRoaXMub24oXCJlbmRcIiwoZnVuY3Rpb24oKXt2YXIgZSx0PW51bGwscj1udWxsO3RyeXtyPW5ldyB2KG4pfWNhdGNoKGUpe3JldHVybih0PW5ldyBFcnJvcihcIlBhcnNlciBpcyB1bmFibGUgdG8gcGFyc2UgdGhlIHJlc3BvbnNlXCIpKS5wYXJzZT0hMCx0Lm9yaWdpbmFsPWUsbi54aHI/KHQucmF3UmVzcG9uc2U9dm9pZCAwPT09bi54aHIucmVzcG9uc2VUeXBlP24ueGhyLnJlc3BvbnNlVGV4dDpuLnhoci5yZXNwb25zZSx0LnN0YXR1cz1uLnhoci5zdGF0dXM/bi54aHIuc3RhdHVzOm51bGwsdC5zdGF0dXNDb2RlPXQuc3RhdHVzKToodC5yYXdSZXNwb25zZT1udWxsLHQuc3RhdHVzPW51bGwpLG4uY2FsbGJhY2sodCl9bi5lbWl0KFwicmVzcG9uc2VcIixyKTt0cnl7bi5faXNSZXNwb25zZU9LKHIpfHwoZT1uZXcgRXJyb3Ioci5zdGF0dXNUZXh0fHxyLnRleHR8fFwiVW5zdWNjZXNzZnVsIEhUVFAgcmVzcG9uc2VcIikpfWNhdGNoKHQpe2U9dH1lPyhlLm9yaWdpbmFsPXQsZS5yZXNwb25zZT1yLGUuc3RhdHVzPXIuc3RhdHVzLG4uY2FsbGJhY2soZSxyKSk6bi5jYWxsYmFjayhudWxsLHIpfSkpfWZ1bmN0aW9uIF8oZSx0LG4pe3ZhciByPWgoXCJERUxFVEVcIixlKTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYobj10LHQ9bnVsbCksdCYmci5zZW5kKHQpLG4mJnIuZW5kKG4pLHJ9aC5zZXJpYWxpemVPYmplY3Q9ZCxoLnBhcnNlU3RyaW5nPXksaC50eXBlcz17aHRtbDpcInRleHQvaHRtbFwiLGpzb246XCJhcHBsaWNhdGlvbi9qc29uXCIseG1sOlwidGV4dC94bWxcIix1cmxlbmNvZGVkOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsZm9ybTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFwiZm9ybS1kYXRhXCI6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIn0saC5zZXJpYWxpemU9e1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI6cy5zdHJpbmdpZnksXCJhcHBsaWNhdGlvbi9qc29uXCI6b30saC5wYXJzZT17XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjp5LFwiYXBwbGljYXRpb24vanNvblwiOkpTT04ucGFyc2V9LGModi5wcm90b3R5cGUpLHYucHJvdG90eXBlLl9wYXJzZUJvZHk9ZnVuY3Rpb24oZSl7dmFyIHQ9aC5wYXJzZVt0aGlzLnR5cGVdO3JldHVybiB0aGlzLnJlcS5fcGFyc2VyP3RoaXMucmVxLl9wYXJzZXIodGhpcyxlKTooIXQmJmIodGhpcy50eXBlKSYmKHQ9aC5wYXJzZVtcImFwcGxpY2F0aW9uL2pzb25cIl0pLHQmJmUmJihlLmxlbmd0aD4wfHxlIGluc3RhbmNlb2YgT2JqZWN0KT90KGUpOm51bGwpfSx2LnByb3RvdHlwZS50b0Vycm9yPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZXEsdD1lLm1ldGhvZCxuPWUudXJsLHI9XCJjYW5ub3QgXCIuY29uY2F0KHQsXCIgXCIpLmNvbmNhdChuLFwiIChcIikuY29uY2F0KHRoaXMuc3RhdHVzLFwiKVwiKSxpPW5ldyBFcnJvcihyKTtyZXR1cm4gaS5zdGF0dXM9dGhpcy5zdGF0dXMsaS5tZXRob2Q9dCxpLnVybD1uLGl9LGguUmVzcG9uc2U9dixpKG0ucHJvdG90eXBlKSxhKG0ucHJvdG90eXBlKSxtLnByb3RvdHlwZS50eXBlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNldChcIkNvbnRlbnQtVHlwZVwiLGgudHlwZXNbZV18fGUpLHRoaXN9LG0ucHJvdG90eXBlLmFjY2VwdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZXQoXCJBY2NlcHRcIixoLnR5cGVzW2VdfHxlKSx0aGlzfSxtLnByb3RvdHlwZS5hdXRoPWZ1bmN0aW9uKGUsdCxyKXsxPT09YXJndW1lbnRzLmxlbmd0aCYmKHQ9XCJcIiksXCJvYmplY3RcIj09PW4odCkmJm51bGwhPT10JiYocj10LHQ9XCJcIikscnx8KHI9e3R5cGU6XCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT9cImJhc2ljXCI6XCJhdXRvXCJ9KTt2YXIgaT1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hKXJldHVybiBidG9hKGUpO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgYmFzaWMgYXV0aCwgYnRvYSBpcyBub3QgYSBmdW5jdGlvblwiKX07cmV0dXJuIHRoaXMuX2F1dGgoZSx0LHIsaSl9LG0ucHJvdG90eXBlLnF1ZXJ5PWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlJiYoZT1kKGUpKSxlJiZ0aGlzLl9xdWVyeS5wdXNoKGUpLHRoaXN9LG0ucHJvdG90eXBlLmF0dGFjaD1mdW5jdGlvbihlLHQsbil7aWYodCl7aWYodGhpcy5fZGF0YSl0aHJvdyBuZXcgRXJyb3IoXCJzdXBlcmFnZW50IGNhbid0IG1peCAuc2VuZCgpIGFuZCAuYXR0YWNoKClcIik7dGhpcy5fZ2V0Rm9ybURhdGEoKS5hcHBlbmQoZSx0LG58fHQubmFtZSl9cmV0dXJuIHRoaXN9LG0ucHJvdG90eXBlLl9nZXRGb3JtRGF0YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb3JtRGF0YXx8KHRoaXMuX2Zvcm1EYXRhPW5ldyByLkZvcm1EYXRhKSx0aGlzLl9mb3JtRGF0YX0sbS5wcm90b3R5cGUuY2FsbGJhY2s9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9zaG91bGRSZXRyeShlLHQpKXJldHVybiB0aGlzLl9yZXRyeSgpO3ZhciBuPXRoaXMuX2NhbGxiYWNrO3RoaXMuY2xlYXJUaW1lb3V0KCksZSYmKHRoaXMuX21heFJldHJpZXMmJihlLnJldHJpZXM9dGhpcy5fcmV0cmllcy0xKSx0aGlzLmVtaXQoXCJlcnJvclwiLGUpKSxuKGUsdCl9LG0ucHJvdG90eXBlLmNyb3NzRG9tYWluRXJyb3I9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgRXJyb3IoXCJSZXF1ZXN0IGhhcyBiZWVuIHRlcm1pbmF0ZWRcXG5Qb3NzaWJsZSBjYXVzZXM6IHRoZSBuZXR3b3JrIGlzIG9mZmxpbmUsIE9yaWdpbiBpcyBub3QgYWxsb3dlZCBieSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4sIHRoZSBwYWdlIGlzIGJlaW5nIHVubG9hZGVkLCBldGMuXCIpO2UuY3Jvc3NEb21haW49ITAsZS5zdGF0dXM9dGhpcy5zdGF0dXMsZS5tZXRob2Q9dGhpcy5tZXRob2QsZS51cmw9dGhpcy51cmwsdGhpcy5jYWxsYmFjayhlKX0sbS5wcm90b3R5cGUuYWdlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gY29uc29sZS53YXJuKFwiVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGluIGJyb3dzZXIgdmVyc2lvbiBvZiBzdXBlcmFnZW50XCIpLHRoaXN9LG0ucHJvdG90eXBlLmNhPW0ucHJvdG90eXBlLmFnZW50LG0ucHJvdG90eXBlLmJ1ZmZlcj1tLnByb3RvdHlwZS5jYSxtLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlN0cmVhbWluZyBpcyBub3Qgc3VwcG9ydGVkIGluIGJyb3dzZXIgdmVyc2lvbiBvZiBzdXBlcmFnZW50XCIpfSxtLnByb3RvdHlwZS5waXBlPW0ucHJvdG90eXBlLndyaXRlLG0ucHJvdG90eXBlLl9pc0hvc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PT1uKGUpJiYhQXJyYXkuaXNBcnJheShlKSYmXCJbb2JqZWN0IE9iamVjdF1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0sbS5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUpe3RoaXMuX2VuZENhbGxlZCYmY29uc29sZS53YXJuKFwiV2FybmluZzogLmVuZCgpIHdhcyBjYWxsZWQgdHdpY2UuIFRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbiBzdXBlcmFnZW50XCIpLHRoaXMuX2VuZENhbGxlZD0hMCx0aGlzLl9jYWxsYmFjaz1lfHxwLHRoaXMuX2ZpbmFsaXplUXVlcnlTdHJpbmcoKSx0aGlzLl9lbmQoKX0sbS5wcm90b3R5cGUuX3NldFVwbG9hZFRpbWVvdXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX3VwbG9hZFRpbWVvdXQmJiF0aGlzLl91cGxvYWRUaW1lb3V0VGltZXImJih0aGlzLl91cGxvYWRUaW1lb3V0VGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLl90aW1lb3V0RXJyb3IoXCJVcGxvYWQgdGltZW91dCBvZiBcIixlLl91cGxvYWRUaW1lb3V0LFwiRVRJTUVET1VUXCIpfSksdGhpcy5fdXBsb2FkVGltZW91dCkpfSxtLnByb3RvdHlwZS5fZW5kPWZ1bmN0aW9uKCl7aWYodGhpcy5fYWJvcnRlZClyZXR1cm4gdGhpcy5jYWxsYmFjayhuZXcgRXJyb3IoXCJUaGUgcmVxdWVzdCBoYXMgYmVlbiBhYm9ydGVkIGV2ZW4gYmVmb3JlIC5lbmQoKSB3YXMgY2FsbGVkXCIpKTt2YXIgZT10aGlzO3RoaXMueGhyPWguZ2V0WEhSKCk7dmFyIHQ9dGhpcy54aHIsbj10aGlzLl9mb3JtRGF0YXx8dGhpcy5fZGF0YTt0aGlzLl9zZXRUaW1lb3V0cygpLHQub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7dmFyIG49dC5yZWFkeVN0YXRlO2lmKG4+PTImJmUuX3Jlc3BvbnNlVGltZW91dFRpbWVyJiZjbGVhclRpbWVvdXQoZS5fcmVzcG9uc2VUaW1lb3V0VGltZXIpLDQ9PT1uKXt2YXIgcjt0cnl7cj10LnN0YXR1c31jYXRjaChlKXtyPTB9aWYoIXIpe2lmKGUudGltZWRvdXR8fGUuX2Fib3J0ZWQpcmV0dXJuO3JldHVybiBlLmNyb3NzRG9tYWluRXJyb3IoKX1lLmVtaXQoXCJlbmRcIil9fTt2YXIgcj1mdW5jdGlvbih0LG4pe24udG90YWw+MCYmKG4ucGVyY2VudD1uLmxvYWRlZC9uLnRvdGFsKjEwMCwxMDA9PT1uLnBlcmNlbnQmJmNsZWFyVGltZW91dChlLl91cGxvYWRUaW1lb3V0VGltZXIpKSxuLmRpcmVjdGlvbj10LGUuZW1pdChcInByb2dyZXNzXCIsbil9O2lmKHRoaXMuaGFzTGlzdGVuZXJzKFwicHJvZ3Jlc3NcIikpdHJ5e3QuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsci5iaW5kKG51bGwsXCJkb3dubG9hZFwiKSksdC51cGxvYWQmJnQudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLHIuYmluZChudWxsLFwidXBsb2FkXCIpKX1jYXRjaChlKXt9dC51cGxvYWQmJnRoaXMuX3NldFVwbG9hZFRpbWVvdXQoKTt0cnl7dGhpcy51c2VybmFtZSYmdGhpcy5wYXNzd29yZD90Lm9wZW4odGhpcy5tZXRob2QsdGhpcy51cmwsITAsdGhpcy51c2VybmFtZSx0aGlzLnBhc3N3b3JkKTp0Lm9wZW4odGhpcy5tZXRob2QsdGhpcy51cmwsITApfWNhdGNoKGUpe3JldHVybiB0aGlzLmNhbGxiYWNrKGUpfWlmKHRoaXMuX3dpdGhDcmVkZW50aWFscyYmKHQud2l0aENyZWRlbnRpYWxzPSEwKSwhdGhpcy5fZm9ybURhdGEmJlwiR0VUXCIhPT10aGlzLm1ldGhvZCYmXCJIRUFEXCIhPT10aGlzLm1ldGhvZCYmXCJzdHJpbmdcIiE9dHlwZW9mIG4mJiF0aGlzLl9pc0hvc3Qobikpe3ZhciBpPXRoaXMuX2hlYWRlcltcImNvbnRlbnQtdHlwZVwiXSxvPXRoaXMuX3NlcmlhbGl6ZXJ8fGguc2VyaWFsaXplW2k/aS5zcGxpdChcIjtcIilbMF06XCJcIl07IW8mJmIoaSkmJihvPWguc2VyaWFsaXplW1wiYXBwbGljYXRpb24vanNvblwiXSksbyYmKG49byhuKSl9Zm9yKHZhciBzIGluIHRoaXMuaGVhZGVyKW51bGwhPT10aGlzLmhlYWRlcltzXSYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuaGVhZGVyLHMpJiZ0LnNldFJlcXVlc3RIZWFkZXIocyx0aGlzLmhlYWRlcltzXSk7dGhpcy5fcmVzcG9uc2VUeXBlJiYodC5yZXNwb25zZVR5cGU9dGhpcy5fcmVzcG9uc2VUeXBlKSx0aGlzLmVtaXQoXCJyZXF1ZXN0XCIsdGhpcyksdC5zZW5kKHZvaWQgMD09PW4/bnVsbDpuKX0saC5hZ2VudD1mdW5jdGlvbigpe3JldHVybiBuZXcgbH0sW1wiR0VUXCIsXCJQT1NUXCIsXCJPUFRJT05TXCIsXCJQQVRDSFwiLFwiUFVUXCIsXCJERUxFVEVcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7bC5wcm90b3R5cGVbZS50b0xvd2VyQ2FzZSgpXT1mdW5jdGlvbih0LG4pe3ZhciByPW5ldyBoLlJlcXVlc3QoZSx0KTtyZXR1cm4gdGhpcy5fc2V0RGVmYXVsdHMociksbiYmci5lbmQobikscn19KSksbC5wcm90b3R5cGUuZGVsPWwucHJvdG90eXBlLmRlbGV0ZSxoLmdldD1mdW5jdGlvbihlLHQsbil7dmFyIHI9aChcIkdFVFwiLGUpO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihuPXQsdD1udWxsKSx0JiZyLnF1ZXJ5KHQpLG4mJnIuZW5kKG4pLHJ9LGguaGVhZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9aChcIkhFQURcIixlKTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYobj10LHQ9bnVsbCksdCYmci5xdWVyeSh0KSxuJiZyLmVuZChuKSxyfSxoLm9wdGlvbnM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWgoXCJPUFRJT05TXCIsZSk7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLHQmJnIuc2VuZCh0KSxuJiZyLmVuZChuKSxyfSxoLmRlbD1fLGguZGVsZXRlPV8saC5wYXRjaD1mdW5jdGlvbihlLHQsbil7dmFyIHI9aChcIlBBVENIXCIsZSk7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLHQmJnIuc2VuZCh0KSxuJiZyLmVuZChuKSxyfSxoLnBvc3Q9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWgoXCJQT1NUXCIsZSk7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLHQmJnIuc2VuZCh0KSxuJiZyLmVuZChuKSxyfSxoLnB1dD1mdW5jdGlvbihlLHQsbil7dmFyIHI9aChcIlBVVFwiLGUpO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihuPXQsdD1udWxsKSx0JiZyLnNlbmQodCksbiYmci5lbmQobikscn19KEx0LEx0LmV4cG9ydHMpO3ZhciBRbj1MdC5leHBvcnRzO2Z1bmN0aW9uIFluKGUpe3ZhciB0PShuZXcgRGF0ZSkuZ2V0VGltZSgpLG49KG5ldyBEYXRlKS50b0lTT1N0cmluZygpLHI9Y29uc29sZSYmY29uc29sZS5sb2c/Y29uc29sZTp3aW5kb3cmJndpbmRvdy5jb25zb2xlJiZ3aW5kb3cuY29uc29sZS5sb2c/d2luZG93LmNvbnNvbGU6Y29uc29sZTtyLmxvZyhcIjw8PDw8XCIpLHIubG9nKFwiW1wiLmNvbmNhdChuLFwiXVwiKSxcIlxcblwiLGUudXJsLFwiXFxuXCIsZS5xcyksci5sb2coXCItLS0tLVwiKSxlLm9uKFwicmVzcG9uc2VcIiwoZnVuY3Rpb24obil7dmFyIGk9KG5ldyBEYXRlKS5nZXRUaW1lKCktdCxvPShuZXcgRGF0ZSkudG9JU09TdHJpbmcoKTtyLmxvZyhcIj4+Pj4+PlwiKSxyLmxvZyhcIltcIi5jb25jYXQobyxcIiAvIFwiKS5jb25jYXQoaSxcIl1cIiksXCJcXG5cIixlLnVybCxcIlxcblwiLGUucXMsXCJcXG5cIixuLnRleHQpLHIubG9nKFwiLS0tLS1cIil9KSl9ZnVuY3Rpb24gWm4oZSx0LG4pe3ZhciByPXRoaXM7dGhpcy5fY29uZmlnLmxvZ1ZlcmJvc2l0eSYmKGU9ZS51c2UoWW4pKSx0aGlzLl9jb25maWcucHJveHkmJnRoaXMuX21vZHVsZXMucHJveHkmJihlPXRoaXMuX21vZHVsZXMucHJveHkuY2FsbCh0aGlzLGUpKSx0aGlzLl9jb25maWcua2VlcEFsaXZlJiZ0aGlzLl9tb2R1bGVzLmtlZXBBbGl2ZSYmKGU9dGhpcy5fbW9kdWxlcy5rZWVwQWxpdmUoZSkpO3ZhciBpPWU7aWYodC5hYm9ydFNpZ25hbCl2YXIgbz10LmFib3J0U2lnbmFsLnN1YnNjcmliZSgoZnVuY3Rpb24oKXtpLmFib3J0KCksbygpfSkpO3JldHVybiEwPT09dC5mb3JjZUJ1ZmZlcmVkP2k9XCJ1bmRlZmluZWRcIj09dHlwZW9mIEJsb2I/aS5idWZmZXIoKS5yZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTppLnJlc3BvbnNlVHlwZShcImFycmF5YnVmZmVyXCIpOiExPT09dC5mb3JjZUJ1ZmZlcmVkJiYoaT1pLmJ1ZmZlcighMSkpLChpPWkudGltZW91dCh0LnRpbWVvdXQpKS5vbihcImFib3J0XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIG4oe2NhdGVnb3J5OkEuUE5Vbmtub3duQ2F0ZWdvcnksZXJyb3I6ITAsb3BlcmF0aW9uOnQub3BlcmF0aW9uLGVycm9yRGF0YTpuZXcgRXJyb3IoXCJBYm9ydGVkXCIpfSxudWxsKX0pKSxpLmVuZCgoZnVuY3Rpb24oZSxpKXt2YXIgbyxzPXt9O2lmKHMuZXJyb3I9bnVsbCE9PWUscy5vcGVyYXRpb249dC5vcGVyYXRpb24saSYmaS5zdGF0dXMmJihzLnN0YXR1c0NvZGU9aS5zdGF0dXMpLGUpe2lmKGUucmVzcG9uc2UmJmUucmVzcG9uc2UudGV4dCYmIXIuX2NvbmZpZy5sb2dWZXJib3NpdHkpdHJ5e3MuZXJyb3JEYXRhPUpTT04ucGFyc2UoZS5yZXNwb25zZS50ZXh0KX1jYXRjaCh0KXtzLmVycm9yRGF0YT1lfWVsc2Ugcy5lcnJvckRhdGE9ZTtyZXR1cm4gcy5jYXRlZ29yeT1yLl9kZXRlY3RFcnJvckNhdGVnb3J5KGUpLG4ocyxudWxsKX1pZih0Lmlnbm9yZUJvZHkpbz17aGVhZGVyczppLmhlYWRlcnMscmVkaXJlY3RzOmkucmVkaXJlY3RzLHJlc3BvbnNlOml9O2Vsc2UgdHJ5e289SlNPTi5wYXJzZShpLnRleHQpfWNhdGNoKGUpe3JldHVybiBzLmVycm9yRGF0YT1pLHMuZXJyb3I9ITAsbihzLG51bGwpfXJldHVybiBvLmVycm9yJiYxPT09by5lcnJvciYmby5zdGF0dXMmJm8ubWVzc2FnZSYmby5zZXJ2aWNlPyhzLmVycm9yRGF0YT1vLHMuc3RhdHVzQ29kZT1vLnN0YXR1cyxzLmVycm9yPSEwLHMuY2F0ZWdvcnk9ci5fZGV0ZWN0RXJyb3JDYXRlZ29yeShzKSxuKHMsbnVsbCkpOihvLmVycm9yJiZvLmVycm9yLm1lc3NhZ2UmJihzLmVycm9yRGF0YT1vLmVycm9yKSxuKHMsbykpfSkpLGl9ZnVuY3Rpb24gZXIoZSx0LG4pe3JldHVybiBpKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgcjtyZXR1cm4gbyh0aGlzLChmdW5jdGlvbihpKXtzd2l0Y2goaS5sYWJlbCl7Y2FzZSAwOnJldHVybiByPVFuLnBvc3QoZSksdC5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdD1lLmtleSxuPWUudmFsdWU7cj1yLmZpZWxkKHQsbil9KSksci5hdHRhY2goXCJmaWxlXCIsbix7Y29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIn0pLFs0LHJdO2Nhc2UgMTpyZXR1cm5bMixpLnNlbnQoKV19fSkpfSkpfWZ1bmN0aW9uIHRyKGUsdCxuKXt2YXIgcj1Rbi5nZXQodGhpcy5nZXRTdGFuZGFyZE9yaWdpbigpK3QudXJsKS5zZXQodC5oZWFkZXJzKS5xdWVyeShlKTtyZXR1cm4gWm4uY2FsbCh0aGlzLHIsdCxuKX1mdW5jdGlvbiBucihlLHQsbil7dmFyIHI9UW4uZ2V0KHRoaXMuZ2V0U3RhbmRhcmRPcmlnaW4oKSt0LnVybCkuc2V0KHQuaGVhZGVycykucXVlcnkoZSk7cmV0dXJuIFpuLmNhbGwodGhpcyxyLHQsbil9ZnVuY3Rpb24gcnIoZSx0LG4scil7dmFyIGk9UW4ucG9zdCh0aGlzLmdldFN0YW5kYXJkT3JpZ2luKCkrbi51cmwpLnF1ZXJ5KGUpLnNldChuLmhlYWRlcnMpLnNlbmQodCk7cmV0dXJuIFpuLmNhbGwodGhpcyxpLG4scil9ZnVuY3Rpb24gaXIoZSx0LG4scil7dmFyIGk9UW4ucGF0Y2godGhpcy5nZXRTdGFuZGFyZE9yaWdpbigpK24udXJsKS5xdWVyeShlKS5zZXQobi5oZWFkZXJzKS5zZW5kKHQpO3JldHVybiBabi5jYWxsKHRoaXMsaSxuLHIpfWZ1bmN0aW9uIG9yKGUsdCxuKXt2YXIgcj1Rbi5kZWxldGUodGhpcy5nZXRTdGFuZGFyZE9yaWdpbigpK3QudXJsKS5zZXQodC5oZWFkZXJzKS5xdWVyeShlKTtyZXR1cm4gWm4uY2FsbCh0aGlzLHIsdCxuKX1mdW5jdGlvbiBzcihlLHQpe3ZhciBuPW5ldyBVaW50OEFycmF5KGUuYnl0ZUxlbmd0aCt0LmJ5dGVMZW5ndGgpO3JldHVybiBuLnNldChuZXcgVWludDhBcnJheShlKSwwKSxuLnNldChuZXcgVWludDhBcnJheSh0KSxlLmJ5dGVMZW5ndGgpLG4uYnVmZmVyfXZhciBhcix1cj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImFsZ29cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJhZXMtMjU2LWNiY1wifSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmVuY3J5cHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG47cmV0dXJuIG8odGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmdldEtleShlKV07Y2FzZSAxOmlmKG49ci5zZW50KCksdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXJldHVyblsyLHRoaXMuZW5jcnlwdEFycmF5QnVmZmVyKG4sdCldO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVyblsyLHRoaXMuZW5jcnlwdFN0cmluZyhuLHQpXTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZW5jcnlwdCB0aGlzIGZpbGUuIEluIGJyb3dzZXJzIGZpbGUgZW5jcnlwdGlvbiBzdXBwb3J0cyBvbmx5IHN0cmluZyBvciBBcnJheUJ1ZmZlclwiKX19KSl9KSl9LGUucHJvdG90eXBlLmRlY3J5cHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG47cmV0dXJuIG8odGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmdldEtleShlKV07Y2FzZSAxOmlmKG49ci5zZW50KCksdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXJldHVyblsyLHRoaXMuZGVjcnlwdEFycmF5QnVmZmVyKG4sdCldO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVyblsyLHRoaXMuZGVjcnlwdFN0cmluZyhuLHQpXTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZGVjcnlwdCB0aGlzIGZpbGUuIEluIGJyb3dzZXJzIGZpbGUgZGVjcnlwdGlvbiBzdXBwb3J0cyBvbmx5IHN0cmluZyBvciBBcnJheUJ1ZmZlclwiKX19KSl9KSl9LGUucHJvdG90eXBlLmVuY3J5cHRGaWxlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHIsaSxzO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5nZXRLZXkoZSldO2Nhc2UgMTpyZXR1cm4gcj1vLnNlbnQoKSxbNCx0LnRvQXJyYXlCdWZmZXIoKV07Y2FzZSAyOnJldHVybiBpPW8uc2VudCgpLFs0LHRoaXMuZW5jcnlwdEFycmF5QnVmZmVyKHIsaSldO2Nhc2UgMzpyZXR1cm4gcz1vLnNlbnQoKSxbMixuLmNyZWF0ZSh7bmFtZTp0Lm5hbWUsbWltZVR5cGU6XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixkYXRhOnN9KV19fSkpfSkpfSxlLnByb3RvdHlwZS5kZWNyeXB0RmlsZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciByLGkscztyZXR1cm4gbyh0aGlzLChmdW5jdGlvbihvKXtzd2l0Y2goby5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZ2V0S2V5KGUpXTtjYXNlIDE6cmV0dXJuIHI9by5zZW50KCksWzQsdC50b0FycmF5QnVmZmVyKCldO2Nhc2UgMjpyZXR1cm4gaT1vLnNlbnQoKSxbNCx0aGlzLmRlY3J5cHRBcnJheUJ1ZmZlcihyLGkpXTtjYXNlIDM6cmV0dXJuIHM9by5zZW50KCksWzIsbi5jcmVhdGUoe25hbWU6dC5uYW1lLGRhdGE6c30pXX19KSl9KSl9LGUucHJvdG90eXBlLmdldEtleT1mdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsbixyO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKGkpe3N3aXRjaChpLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9QnVmZmVyLmZyb20oZSksWzQsY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsdC5idWZmZXIpXTtjYXNlIDE6cmV0dXJuIG49aS5zZW50KCkscj1CdWZmZXIuZnJvbShCdWZmZXIuZnJvbShuKS50b1N0cmluZyhcImhleFwiKS5zbGljZSgwLDMyKSxcInV0ZjhcIikuYnVmZmVyLFsyLGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIscixcIkFFUy1DQkNcIiwhMCxbXCJlbmNyeXB0XCIsXCJkZWNyeXB0XCJdKV19fSkpfSkpfSxlLnByb3RvdHlwZS5lbmNyeXB0QXJyYXlCdWZmZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4scixpO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxNikpLHI9c3IsaT1bbi5idWZmZXJdLFs0LGNyeXB0by5zdWJ0bGUuZW5jcnlwdCh7bmFtZTpcIkFFUy1DQkNcIixpdjpufSxlLHQpXTtjYXNlIDE6cmV0dXJuWzIsci5hcHBseSh2b2lkIDAsaS5jb25jYXQoW28uc2VudCgpXSkpXX19KSl9KSl9LGUucHJvdG90eXBlLmRlY3J5cHRBcnJheUJ1ZmZlcj1mdW5jdGlvbihlLHQpe3JldHVybiBpKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbjtyZXR1cm4gbyh0aGlzLChmdW5jdGlvbihyKXtyZXR1cm4gbj10LnNsaWNlKDAsMTYpLFsyLGNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7bmFtZTpcIkFFUy1DQkNcIixpdjpufSxlLHQuc2xpY2UoMTYpKV19KSl9KSl9LGUucHJvdG90eXBlLmVuY3J5cHRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4scixpLHM7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24obyl7c3dpdGNoKG8ubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDE2KSkscj1CdWZmZXIuZnJvbSh0KS5idWZmZXIsWzQsY3J5cHRvLnN1YnRsZS5lbmNyeXB0KHtuYW1lOlwiQUVTLUNCQ1wiLGl2Om59LGUscildO2Nhc2UgMTpyZXR1cm4gaT1vLnNlbnQoKSxzPXNyKG4uYnVmZmVyLGkpLFsyLEJ1ZmZlci5mcm9tKHMpLnRvU3RyaW5nKFwidXRmOFwiKV19fSkpfSkpfSxlLnByb3RvdHlwZS5kZWNyeXB0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLHIsaSxzO3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKG8pe3N3aXRjaChvLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49QnVmZmVyLmZyb20odCkscj1uLnNsaWNlKDAsMTYpLGk9bi5zbGljZSgxNiksWzQsY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtuYW1lOlwiQUVTLUNCQ1wiLGl2OnJ9LGUsaSldO2Nhc2UgMTpyZXR1cm4gcz1vLnNlbnQoKSxbMixCdWZmZXIuZnJvbShzKS50b1N0cmluZyhcInV0ZjhcIildfX0pKX0pKX0sZS5JVl9MRU5HVEg9MTYsZX0oKSxjcj0oYXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe2lmKGUgaW5zdGFuY2VvZiBGaWxlKXRoaXMuZGF0YT1lLHRoaXMubmFtZT10aGlzLmRhdGEubmFtZSx0aGlzLm1pbWVUeXBlPXRoaXMuZGF0YS50eXBlO2Vsc2UgaWYoZS5kYXRhKXt2YXIgdD1lLmRhdGE7dGhpcy5kYXRhPW5ldyBGaWxlKFt0XSxlLm5hbWUse3R5cGU6ZS5taW1lVHlwZX0pLHRoaXMubmFtZT1lLm5hbWUsZS5taW1lVHlwZSYmKHRoaXMubWltZVR5cGU9ZS5taW1lVHlwZSl9aWYodm9pZCAwPT09dGhpcy5kYXRhKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGNvbnN0cnVjdCBhIGZpbGUgb3V0IG9mIHN1cHBsaWVkIG9wdGlvbnMuXCIpO2lmKHZvaWQgMD09PXRoaXMubmFtZSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBndWVzcyBmaWxlbmFtZSBvdXQgb2YgdGhlIG9wdGlvbnMuIFBsZWFzZSBwcm92aWRlIG9uZS5cIil9cmV0dXJuIGUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdGhpcyhlKX0sZS5wcm90b3R5cGUudG9CdWZmZXI9ZnVuY3Rpb24oKXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBmZWF0dXJlIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMgZW52aXJvbm1lbnRzLlwiKX0pKX0pKX0sZS5wcm90b3R5cGUudG9TdHJlYW09ZnVuY3Rpb24oKXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBmZWF0dXJlIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMgZW52aXJvbm1lbnRzLlwiKX0pKX0pKX0sZS5wcm90b3R5cGUudG9GaWxlVXJpPWZ1bmN0aW9uKCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgZmVhdHVyZSBpcyBvbmx5IHN1cHBvcnRlZCBpbiByZWFjdCBuYXRpdmUgZW52aXJvbm1lbnRzLlwiKX0pKX0pKX0sZS5wcm90b3R5cGUudG9CbG9iPWZ1bmN0aW9uKCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiBvKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVyblsyLHRoaXMuZGF0YV19KSl9KSl9LGUucHJvdG90eXBlLnRvQXJyYXlCdWZmZXI9ZnVuY3Rpb24oKXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbyh0aGlzLChmdW5jdGlvbih0KXtyZXR1cm5bMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxuKXt2YXIgcj1uZXcgRmlsZVJlYWRlcjtyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsKGZ1bmN0aW9uKCl7aWYoci5yZXN1bHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilyZXR1cm4gdChyLnJlc3VsdCl9KSksci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwoZnVuY3Rpb24oKXtuKHIuZXJyb3IpfSkpLHIucmVhZEFzQXJyYXlCdWZmZXIoZS5kYXRhKX0pKV19KSl9KSl9LGUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGkodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24odCl7cmV0dXJuWzIsbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQsbil7dmFyIHI9bmV3IEZpbGVSZWFkZXI7ci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiByLnJlc3VsdClyZXR1cm4gdChyLnJlc3VsdCl9KSksci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwoZnVuY3Rpb24oKXtuKHIuZXJyb3IpfSkpLHIucmVhZEFzQmluYXJ5U3RyaW5nKGUuZGF0YSl9KSldfSkpfSkpfSxlLnByb3RvdHlwZS50b0ZpbGU9ZnVuY3Rpb24oKXtyZXR1cm4gaSh0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIG8odGhpcywoZnVuY3Rpb24oZSl7cmV0dXJuWzIsdGhpcy5kYXRhXX0pKX0pKX0sZX0oKSxhci5zdXBwb3J0c0ZpbGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGUsYXIuc3VwcG9ydHNCbG9iPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBCbG9iLGFyLnN1cHBvcnRzQXJyYXlCdWZmZXI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyLGFyLnN1cHBvcnRzQnVmZmVyPSExLGFyLnN1cHBvcnRzU3RyZWFtPSExLGFyLnN1cHBvcnRzU3RyaW5nPSEwLGFyLnN1cHBvcnRzRW5jcnlwdEZpbGU9ITAsYXIuc3VwcG9ydHNGaWxlVXJpPSExLGFyKTtmdW5jdGlvbiBscihlKXtpZighbmF2aWdhdG9yfHwhbmF2aWdhdG9yLnNlbmRCZWFjb24pcmV0dXJuITE7bmF2aWdhdG9yLnNlbmRCZWFjb24oZSl9ZnVuY3Rpb24gcHIoZSl7Zm9yKHZhciB0PVAuZW5jLkJhc2U2NC5wYXJzZShlKS53b3JkcyxuPW5ldyBBcnJheUJ1ZmZlcig0KnQubGVuZ3RoKSxyPW5ldyBVaW50OEFycmF5KG4pLGk9MCxvPTAscz0wO3M8dC5sZW5ndGg7cys9MSl7dmFyIGE9dFtzXTtyW289NCpzXT0oNDI3ODE5MDA4MCZhKT4+MjQscltvKzFdPSgxNjcxMTY4MCZhKT4+MTYscltvKzJdPSg2NTI4MCZhKT4+OCxyW28rM109MjU1JmF9Zm9yKHZhciB1PW8rMzt1Pj1vO3UtPTEpMD09PXJbdV0mJmk8MyYmKGkrPTEpO3JldHVybiBpPjA/ci5idWZmZXIuc2xpY2UoMCxyLmJ5dGVMZW5ndGgtaSk6ci5idWZmZXJ9ZnVuY3Rpb24gaHIoZSl7dmFyIHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLmNvbnN0cnVjdG9yPT09T2JqZWN0fTtpZighdChlKSlyZXR1cm4gZTt2YXIgbj17fTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIGk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBTdHJpbmd9KHIpLG89cixzPWVbcl07QXJyYXkuaXNBcnJheShyKXx8aSYmci5pbmRleE9mKFwiLFwiKT49MD9vPShpP3Iuc3BsaXQoXCIsXCIpOnIpLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSs9U3RyaW5nLmZyb21DaGFyQ29kZSh0KX0pLFwiXCIpOihmdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZSYmaXNGaW5pdGUoZSl9KHIpfHxpJiYhaXNOYU4ocikpJiYobz1TdHJpbmcuZnJvbUNoYXJDb2RlKGk/cGFyc2VJbnQociwxMCk6MTApKTtuW29dPXQocyk/aHIocyk6c30pKSxufXZhciBmcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBuKHQpe3ZhciBuPXRoaXMscj10Lmxpc3RlblRvQnJvd3Nlck5ldHdvcmtFdmVudHMsaT12b2lkIDA9PT1yfHxyO3JldHVybiB0LnNka0ZhbWlseT1cIldlYlwiLHQubmV0d29ya2luZz1uZXcgS3Qoe2RlbDpvcixnZXQ6bnIscG9zdDpycixwYXRjaDppcixzZW5kQmVhY29uOmxyLGdldGZpbGU6dHIscG9zdGZpbGU6ZXJ9KSx0LmNib3I9bmV3IEZ0KChmdW5jdGlvbihlKXtyZXR1cm4gaHIocC5kZWNvZGUoZSkpfSkscHIpLHQuUHViTnViRmlsZT1jcix0LmNyeXB0b2dyYXBoeT1uZXcgdXIsbj1lLmNhbGwodGhpcyx0KXx8dGhpcyxpJiYod2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsKGZ1bmN0aW9uKCl7bi5uZXR3b3JrRG93bkRldGVjdGVkKCl9KSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwoZnVuY3Rpb24oKXtuLm5ldHdvcmtVcERldGVjdGVkKCl9KSkpLG59cmV0dXJuIHQobixlKSxufShHdCk7cmV0dXJuIGZyfSkpO1xuIiwgIi8vIG5vaW5zcGVjdGlvbiBKU1VudXNlZEdsb2JhbFN5bWJvbHNcblxuaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCJcbmNvbnN0IFB1Yk51YiA9IHJlcXVpcmUoXCJwdWJudWJcIilcblxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXG5cbmxldCBwdWJOdWIgPSBuZXcgUHViTnViKHtcbiAgICBwdWJsaXNoS2V5OiBcInB1Yi1jLTcyNjFmMTg0LWMyMWMtNDUyZi05NmM4LTJlMWM5MDA5ZjM5M1wiLFxuICAgIHN1YnNjcmliZUtleTogXCJzdWItYy05YzE5ZjAwNC1jNzkxLTQzYjUtODNmOC0xZThjNmYzMWY2MGRcIixcbiAgICB1dWlkOiBcIlwiXG59KVxuXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XG5cdHN5bmNLZXk6IHN0cmluZ1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNeVBsdWdpblNldHRpbmdzID0ge1xuXHRzeW5jS2V5OiBcIlwiXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3NcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKVxuXG5cdFx0Ly8gVGhpcyBjcmVhdGVzIGFuIGljb24gaW4gdGhlIGxlZnQgcmliYm9uLlxuXHRcdC8vIGNvbnN0IHJpYmJvbkljb25FbCA9IHRoaXMuYWRkUmliYm9uSWNvbignZGljZScsICdTYW1wbGUgUGx1Z2luJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0Ly8gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBpY29uLlxuXHRcdC8vIFx0bmV3IE5vdGljZSgnVGhpcyBpcyBhIG5vdGljZSEnKVxuXHRcdC8vIH0pXG5cdFx0Ly8gUGVyZm9ybSBhZGRpdGlvbmFsIHRoaW5ncyB3aXRoIHRoZSByaWJib25cblx0XHQvLyByaWJib25JY29uRWwuYWRkQ2xhc3MoJ215LXBsdWdpbi1yaWJib24tY2xhc3MnKVxuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc3RhdHVzIGJhciBpdGVtIHRvIHRoZSBib3R0b20gb2YgdGhlIGFwcC4gRG9lcyBub3Qgd29yayBvbiBtb2JpbGUgYXBwcy5cblx0XHQvLyBjb25zdCBzdGF0dXNCYXJJdGVtRWwgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKVxuXHRcdC8vIHN0YXR1c0Jhckl0ZW1FbC5zZXRUZXh0KCdTdGF0dXMgQmFyIFRleHQnKVxuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2ltcGxlIGNvbW1hbmQgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFueXdoZXJlXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiBcInVwbG9hZC12YXVsdFwiLFxuXHRcdFx0bmFtZTogXCJVcGxvYWQgdmF1bHQgdG8gb3RoZXIgZGV2aWNlc1wiLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHVwbG9hZFZhdWx0KHRoaXMuc2V0dGluZ3Muc3luY0tleSlcblx0XHR9KVxuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiBcImNvcHktc3luYy1rZXlcIixcblx0XHRcdG5hbWU6IFwiQ29weSBzeW5jIGtleVwiLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IGNvcHlTeW5jS2V5KClcbiAgICAgICAgfSlcblxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogXCJnZW5lcmF0ZS1zeW5jLWtleS1xci1jb2RlXCIsXG5cdFx0XHRuYW1lOiBcIkdlbmVyYXRlIHN5bmMga2V5IFFSIENvZGVcIixcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiBudWxsXG5cdFx0fSlcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTYW1wbGVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSlcblxuXHRcdC8vIElmIHRoZSBwbHVnaW4gaG9va3MgdXAgYW55IGdsb2JhbCBET00gZXZlbnRzIChvbiBwYXJ0cyBvZiB0aGUgYXBwIHRoYXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBwbHVnaW4pXG5cdFx0Ly8gVXNpbmcgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoaXMgcGx1Z2luIGlzIGRpc2FibGVkLlxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJjbGlja1wiLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhcImNsaWNrXCIsIGV2dClcblx0XHR9KVxuXG5cdFx0Ly8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXG5cdFx0dGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiBjb25zb2xlLmxvZyhcInNldEludGVydmFsXCIpLCA1ICogNjAgKiAxMDAwKSlcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSlcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXG5cdH1cbn1cblxuY2xhc3MgU2FtcGxlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XG5cdFx0c3VwZXIoYXBwKVxuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpc1xuXHRcdGNvbnRlbnRFbC5zZXRUZXh0KFwiV29haCFcIilcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzXG5cdFx0Y29udGVudEVsLmVtcHR5KClcblx0fVxufVxuXG5jbGFzcyBTYW1wbGVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogTXlQbHVnaW5cblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNeVBsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKVxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luXG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzXG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpXG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHt0ZXh0OiBcIlN5bmMgU2V0dGluZ3NcIn0pXG5cblx0XHRsZXQga2V5U2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJTeW5jIEtleVwiKVxuXHRcdFx0LnNldERlc2MoXCJVc2UgdGhpcyBrZXkgdG8gc3luYyBiZXR3ZWVuIGRldmljZXMgd2l0aCB0aGUgbWF0Y2hpbmcga2V5LlwiKVxuXG5cdFx0XHQuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cblx0XHRcdFx0LnNldEJ1dHRvblRleHQoXCJHZW5lcmF0ZSBLZXlcIilcblx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgZXZ0ID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jS2V5ID0gdXVpZHY0KClcblx0XHRcdFx0XHRuZXcgTm90aWNlKFwiR2VuZXJhdGVkIHN5bmMga2V5IVwiKVxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXG5cdFx0XHR9KSlcblxuXHRcdFx0LmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXG5cdFx0XHRcdC5zZXRCdXR0b25UZXh0KFwiQ29weVwiKVxuXHRcdFx0XHQub25DbGljayhldnQgPT4gY29weVN5bmNLZXkoKSkpXG5cblx0XHRcdC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxuXHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIlFSIENvZGUgW1dJUF1cIilcblx0XHRcdFx0Lm9uQ2xpY2soZXZ0ID0+IG51bGwpKVxuXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIlBhc3RlIEtleVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jIGV2dCA9PiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jS2V5ID0gYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC5yZWFkVGV4dCgpKSlcblxuICAgICAgICAvLyBUT0RPOiBDaGVjayBmb3JtYXQgb2YgcGFzdGVkIGtleVxuICAgICAgICAvLyBUT0RPOiBBZGQgaW4gUVIgQ29kZSBmdW5jdGlvbmFsaXR5IHRvIGNvcHkgdGhlIHN5bmMga2V5XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBsb2FkVmF1bHQoc3luY0tleTogc3RyaW5nKSB7XG4gICAgcHViTnViLnV1aWQgPSBzeW5jS2V5XG5cbiAgICBcbn1cblxuZnVuY3Rpb24gcHVsbFZhdWx0KHN5bmNLZXk6IHN0cmluZykge1xuXG59XG5cbmZ1bmN0aW9uIGNvcHlTeW5jS2V5KCkge1xuICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRoaXMucGx1Z2luLnNldHRpbmdzLnN5bmNLZXkpLnRoZW4oXyA9PiBudWxsKVxuICAgIG5ldyBOb3RpY2UodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0tleSAhPT0gbnVsbCA/IFwiQ29waWVkIHN5bmMga2V5IVwiIDogXCJObyBzeW5jIGtleSB0byBjb3B5IVwiKVxufVxuXG5mdW5jdGlvbiB1dWlkdjQoKSB7XG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIChbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYyA9PlxuXHRcdChjIF4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxKSlbMF0gJiAxNSA+PiBjIC8gNCkudG9TdHJpbmcoMTYpXG5cdClcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBLEtBQUMsU0FBUyxHQUFFLEdBQUU7QUFBQyxNQUFVLE9BQU8sV0FBakIsWUFBMEIsQUFBYSxPQUFPLFdBQXBCLGNBQTJCLFFBQU8sVUFBUSxNQUFJLEFBQVksT0FBTyxVQUFuQixjQUEyQixPQUFPLE1BQUksT0FBTyxLQUFJLEtBQUUsQUFBYSxPQUFPLGNBQXBCLGNBQStCLGFBQVcsS0FBRyxNQUFNLFNBQU87QUFBQSxNQUFLLFNBQU0sV0FBVTtBQUFDO0FBQzFOLEFBYW9GLFVBQUksSUFBRSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sSUFBRSxPQUFPLGtCQUFnQixFQUFDLFdBQVUsZ0JBQWMsU0FBTyxTQUFTLElBQUUsSUFB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R0FBRSxPQUFPLEVBQUMsVUFBUyxXQUFVO0FBQUMsZUFBSyxRQUFNLElBQUksR0FBRSxLQUFLLEdBQUUsTUFBTTtBQUFBLFdBQUssaUJBQWdCLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQVEsS0FBRSxLQUFLLE1BQU0sT0FBTSxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRyxJQUFFLE1BQUk7QUFBQyxnQkFBRyxLQUFHO0FBQUUsaUJBQUUsTUFBRyxJQUFFLEdBQUUsS0FBRTtBQUFBLGlCQUFPO0FBQUMsa0JBQUksS0FBRSxHQUFFLEtBQUUsS0FBSSxLQUFFLEdBQUUsS0FBRTtBQUFHLGlCQUFFLE1BQUssUUFBRyxLQUFHLE9BQUksS0FBSSxPQUFHLEtBQUcsT0FBSSxNQUFJLE9BQUksS0FBRyxHQUFFLEtBQUUsS0FBSyxRQUFHLEtBQUcsT0FBSSxNQUFLLE9BQUcsS0FBRyxPQUFJLE1BQUksT0FBSSxNQUFJLEdBQUUsS0FBRTtBQUFBO0FBQUksaUJBQUUsS0FBSSxRQUFHLEtBQUcsT0FBSSxLQUFJLE9BQUcsS0FBRyxPQUFJLE1BQUssT0FBRyxJQUFFLE9BQUksT0FBTSxNQUFFLEtBQUUsQ0FBQyxLQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsS0FBRyxLQUFJLFFBQUcsS0FBRyxPQUFJLEtBQUksT0FBRyxLQUFHLE9BQUksTUFBSyxPQUFHLEtBQUcsT0FBSSxPQUFNLE1BQUUsS0FBRSxLQUFFLEtBQUUsS0FBRSxLQUFHLEtBQUUsSUFBRSxLQUFFLElBQUUsS0FBRSxJQUFFLEtBQUUsS0FBRSxLQUFFLEdBQUUsS0FBRSxJQUFFLEtBQUUsSUFBRSxLQUFFLElBQUUsS0FBRSxLQUFFLEtBQUU7QUFBQTtBQUFFLGFBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRTtBQUFBLFdBQUcsYUFBWSxXQUFVO0FBQUMsY0FBSSxLQUFFLEtBQUssT0FBTSxLQUFFLEdBQUUsT0FBTSxLQUFFLElBQUUsS0FBSyxhQUFZLEtBQUUsSUFBRSxHQUFFO0FBQVMsaUJBQU8sR0FBRSxPQUFJLE1BQUksT0FBSyxLQUFHLEtBQUUsSUFBRyxHQUFFLEtBQUksTUFBRSxPQUFLLEtBQUcsTUFBSSxHQUFFLE1BQU0sS0FBRSxhQUFZLEdBQUUsS0FBSSxNQUFFLE9BQUssS0FBRyxNQUFJLElBQUUsR0FBRSxXQUFTLElBQUUsR0FBRSxRQUFPLEtBQUssWUFBVyxLQUFLO0FBQUEsV0FBTyxPQUFNLFdBQVU7QUFBQyxjQUFJLEtBQUUsR0FBRSxNQUFNLEtBQUs7QUFBTSxpQkFBTyxHQUFFLFFBQU0sS0FBSyxNQUFNLFNBQVE7QUFBQTtBQUFLLFdBQUUsU0FBTyxHQUFFLGNBQWMsS0FBRyxHQUFFLGFBQVcsR0FBRSxrQkFBa0I7QUFBQSxRQUFJLE9BQU0sSUFBRyxLQUFFLEdBQUcsSUFBSSxNQUFLLEVBQUUsS0FBSyxPQUFLLEVBQUUsSUFBSSxLQUFLLE9BQU8sRUFBQyxNQUFLLFNBQVMsSUFBRSxJQUFFO0FBQUMsYUFBRSxLQUFLLFVBQVEsSUFBSSxHQUFFLFFBQUssQUFBVSxPQUFPLE1BQWpCLFlBQXFCLE1BQUUsRUFBRSxNQUFNO0FBQUksWUFBSSxLQUFFLEdBQUUsV0FBVSxLQUFFLElBQUU7QUFBRSxXQUFFLFdBQVMsTUFBSSxNQUFFLEdBQUUsU0FBUyxNQUFJLEdBQUU7QUFBUSxpQkFBUSxLQUFFLEtBQUssUUFBTSxHQUFFLFNBQVEsS0FBRSxLQUFLLFFBQU0sR0FBRSxTQUFRLEtBQUUsR0FBRSxPQUFNLEtBQUUsR0FBRSxPQUFNLEtBQUUsR0FBRSxLQUFFLElBQUU7QUFBSSxhQUFFLE9BQUksWUFBVyxHQUFFLE9BQUk7QUFBVSxXQUFFLFdBQVMsR0FBRSxXQUFTLElBQUUsS0FBSztBQUFBLFNBQVMsT0FBTSxXQUFVO0FBQUMsWUFBSSxLQUFFLEtBQUs7QUFBUSxXQUFFLFNBQVEsR0FBRSxPQUFPLEtBQUs7QUFBQSxTQUFRLFFBQU8sU0FBUyxJQUFFO0FBQUMsZUFBTyxLQUFLLFFBQVEsT0FBTyxLQUFHO0FBQUEsU0FBTSxVQUFTLFNBQVMsSUFBRTtBQUFDLFlBQUksS0FBRSxLQUFLO0FBQVEsZUFBTyxLQUFFLEdBQUUsU0FBUyxLQUFHLEdBQUUsU0FBUSxHQUFFLFNBQVMsS0FBSyxNQUFNLFFBQVEsT0FBTztBQUFBLFlBQU8sSUFBRyxLQUFFLEdBQUcsSUFBSSxXQUFVLEVBQUUsSUFBSSxTQUFPLEVBQUMsV0FBVSxTQUFTLElBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRSxPQUFNLEtBQUUsR0FBRSxVQUFTLEtBQUUsS0FBSztBQUFLLFdBQUUsU0FBUSxLQUFFO0FBQUcsaUJBQVEsS0FBRSxHQUFFLEtBQUUsSUFBRSxNQUFHO0FBQUUsbUJBQVEsS0FBRyxJQUFFLE9BQUksT0FBSyxLQUFHLEtBQUUsSUFBRSxJQUFFLFFBQU0sS0FBSSxJQUFFLEtBQUUsTUFBSSxPQUFLLEtBQUksTUFBRSxLQUFHLElBQUUsSUFBRSxRQUFNLElBQUUsR0FBRSxLQUFFLE1BQUksT0FBSyxLQUFJLE1BQUUsS0FBRyxJQUFFLElBQUUsS0FBSSxLQUFFLEdBQUUsSUFBRSxNQUFHLEtBQUUsT0FBSSxLQUFFLElBQUU7QUFBSSxlQUFFLEtBQUssR0FBRSxPQUFPLE9BQUksSUFBRyxLQUFFLE1BQUc7QUFBSyxZQUFHLEtBQUUsR0FBRSxPQUFPO0FBQUksaUJBQUssR0FBRSxTQUFPO0FBQUcsZUFBRSxLQUFLO0FBQUcsZUFBTyxHQUFFLEtBQUs7QUFBQSxTQUFLLE9BQU0sU0FBUyxJQUFFO0FBQUMsWUFBSSxLQUFFLEdBQUUsUUFBTyxLQUFFLEtBQUs7QUFBSyxRQUFDLE1BQUUsR0FBRSxPQUFPLFFBQU0sQUFBSyxNQUFFLEdBQUUsUUFBUSxRQUFqQixNQUF1QixNQUFFO0FBQUcsaUJBQVEsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsS0FBRSxJQUFFO0FBQUksY0FBRyxLQUFFLEdBQUU7QUFBQyxnQkFBSSxLQUFFLEdBQUUsUUFBUSxHQUFFLE9BQU8sS0FBRSxPQUFLLEtBQUUsSUFBRSxHQUFFLEtBQUUsR0FBRSxRQUFRLEdBQUUsT0FBTyxTQUFNLElBQUUsS0FBRSxJQUFFO0FBQUUsZUFBRSxPQUFJLE1BQUssTUFBRSxPQUFJLEtBQUcsS0FBRSxJQUFFLEdBQUU7QUFBQTtBQUFJLGVBQU8sRUFBRSxPQUFPLElBQUU7QUFBQSxTQUFJLE1BQUssdUVBQXFFLFNBQVMsSUFBRTtBQUFDLG9CQUFXLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBUSxPQUFFLEtBQUcsTUFBRSxLQUFFLENBQUMsS0FBRSxNQUFHLEtBQUUsT0FBSSxLQUFFLE9BQUksS0FBRyxNQUFHO0FBQUE7QUFBRSxvQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsaUJBQVEsT0FBRSxLQUFHLE1BQUUsS0FBRSxLQUFFLENBQUMsTUFBRyxLQUFFLE9BQUksS0FBRSxPQUFJLEtBQUcsTUFBRztBQUFBO0FBQUUsb0JBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFRLE9BQUUsS0FBRyxNQUFFLEtBQUUsTUFBRyxLQUFFLE9BQUksS0FBRSxPQUFJLEtBQUcsTUFBRztBQUFBO0FBQUUsb0JBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFRLE9BQUUsS0FBRyxNQUFHLE1BQUUsQ0FBQyxPQUFJLEtBQUUsT0FBSSxLQUFFLE9BQUksS0FBRyxNQUFHO0FBQUE7QUFBRSxpQkFBUSxLQUFFLEdBQUUsS0FBRyxNQUFFLEdBQUUsS0FBSyxXQUFVLEtBQUUsR0FBRSxRQUFPLEtBQUUsR0FBRSxNQUFLLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRyxJQUFFO0FBQUksYUFBRSxNQUFHLGFBQVcsR0FBRSxJQUFJLEdBQUUsSUFBSSxLQUFFLE1BQUk7QUFBRSxhQUFFLEdBQUUsTUFBSSxHQUFFLE9BQU8sRUFBQyxVQUFTLFdBQVU7QUFBQyxlQUFLLFFBQU0sSUFBSSxHQUFFLEtBQUssQ0FBQyxZQUFXLFlBQVcsWUFBVztBQUFBLFdBQWEsaUJBQWdCLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQVEsS0FBRSxHQUFFLEtBQUcsSUFBRSxNQUFJO0FBQUMsZ0JBQUksS0FBRSxHQUFFLEtBQUUsS0FBRTtBQUFHLGVBQUUsTUFBRyxXQUFVLE9BQUcsSUFBRSxPQUFJLE1BQUksYUFBWSxPQUFHLEtBQUcsT0FBSTtBQUFBO0FBQUcsZUFBRSxLQUFLLE1BQU07QUFBTSxjQUFJLEtBQUUsR0FBRSxLQUFFLElBQUcsS0FBRyxNQUFFLEdBQUUsS0FBRSxJQUFHLEdBQUUsS0FBRSxLQUFJLEtBQUUsR0FBRSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsS0FBSSxLQUFFLEdBQUUsS0FBRSxLQUFJLEtBQUUsR0FBRSxLQUFFLEtBQUksS0FBRSxHQUFFLEtBQUUsS0FBSSxLQUFFLEdBQUUsS0FBRSxLQUFJLEtBQUUsR0FBRSxLQUFFLEtBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxJQUFHLEtBQUUsR0FBRSxJQUFHLEtBQUUsR0FBRSxJQUFHLEtBQUUsR0FBRSxJQUFHLElBQUUsR0FBRSxHQUFFLEtBQUksS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsS0FBSSxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxLQUFJLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFO0FBQUksZUFBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEdBQUUsS0FBSSxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxLQUFJLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLEtBQUksS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsS0FBSSxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxLQUFJLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLEtBQUksS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFHLEdBQUUsTUFBSyxLQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsR0FBRSxNQUFLLEtBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxHQUFFO0FBQUssYUFBRSxLQUFHLEdBQUUsS0FBRyxLQUFFLEdBQUUsR0FBRSxLQUFHLEdBQUUsS0FBRyxLQUFFLEdBQUUsR0FBRSxLQUFHLEdBQUUsS0FBRyxLQUFFLEdBQUUsR0FBRSxLQUFHLEdBQUUsS0FBRyxLQUFFO0FBQUEsV0FBRyxhQUFZLFdBQVU7QUFBQyxjQUFJLEtBQUUsS0FBSyxPQUFNLEtBQUUsR0FBRSxPQUFNLEtBQUUsSUFBRSxLQUFLLGFBQVksS0FBRSxJQUFFLEdBQUU7QUFBUyxhQUFFLE9BQUksTUFBSSxPQUFLLEtBQUcsS0FBRTtBQUFHLGNBQUksS0FBRSxHQUFFLE1BQU0sS0FBRTtBQUFZLGVBQUksR0FBRSxLQUFJLE1BQUUsT0FBSyxLQUFHLE1BQUksV0FBVSxPQUFHLElBQUUsT0FBSSxNQUFJLGFBQVksT0FBRyxLQUFHLE9BQUksSUFBRyxHQUFFLEtBQUksTUFBRSxPQUFLLEtBQUcsTUFBSSxXQUFVLE9BQUcsSUFBRSxPQUFJLE1BQUksYUFBWSxPQUFHLEtBQUcsT0FBSSxJQUFHLEdBQUUsV0FBUyxJQUFHLElBQUUsU0FBTyxJQUFHLEtBQUssWUFBVyxLQUFHLE1BQUUsS0FBSyxPQUFPLE9BQU0sS0FBRSxHQUFFLElBQUUsSUFBRTtBQUFJLGlC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RyxJQUFFLE1BQUksSUFBSSxVQUFRLEVBQUMsU0FBUSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxNQUFJLE1BQUUsR0FBRSxPQUFPLEtBQUksS0FBRSxHQUFFLE9BQU8sRUFBQyxTQUFRLEtBQUUsTUFBSSxRQUFRLElBQUUsS0FBRyxLQUFFLEdBQUUsT0FBTyxHQUFFLE1BQU0sTUFBTSxLQUFHLElBQUUsS0FBRyxHQUFFLFdBQVMsSUFBRSxJQUFFLEdBQUUsT0FBTyxFQUFDLEtBQUksSUFBRSxJQUFHLElBQUUsTUFBSztBQUFBLGFBQU0sS0FBRSxHQUFFLHNCQUFvQixHQUFFLE9BQU8sRUFBQyxLQUFJLEdBQUUsSUFBSSxPQUFPLEVBQUMsS0FBSSxPQUFJLFNBQVEsU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsaUJBQU8sS0FBRyxNQUFFLEtBQUssSUFBSSxPQUFPLEtBQUksSUFBSSxRQUFRLElBQUUsR0FBRSxTQUFRLEdBQUUsU0FBUSxHQUFFLEtBQUcsR0FBRSxJQUFJLE1BQUUsR0FBRSxRQUFRLEtBQUssTUFBSyxJQUFFLElBQUUsR0FBRSxLQUFJLEtBQUksTUFBTSxLQUFHO0FBQUEsV0FBRyxTQUFRLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFPLEtBQUUsS0FBSyxJQUFJLE9BQU8sS0FBRyxLQUFFLEtBQUssT0FBTyxJQUFFLEdBQUUsU0FBUSxLQUFFLEdBQUUsSUFBSSxRQUFRLElBQUUsR0FBRSxTQUFRLEdBQUUsUUFBTyxHQUFFLE9BQU0sR0FBRSxLQUFHLEdBQUUsSUFBRyxHQUFFLFFBQVEsS0FBSyxNQUFLLElBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQTtBQUFBLFdBQVMsV0FBVTtBQUFDLGlCQUFRLEtBQUUsR0FBRSxLQUFFLEdBQUUsSUFBSSxhQUFZLEtBQUUsR0FBRSxNQUFLLEtBQUUsSUFBRyxLQUFFLElBQUcsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLElBQUcsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLElBQUcsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLElBQUcsS0FBRSxHQUFFLE1BQUksSUFBRTtBQUFJLGFBQUUsTUFBRyxNQUFJLEtBQUUsTUFBRyxJQUFFLE1BQUcsSUFBRTtBQUFJLFlBQUksS0FBRSxHQUFFLEtBQUU7QUFBRSxhQUFJLEtBQUUsR0FBRSxNQUFJLElBQUUsTUFBSTtBQUFDLGNBQUksS0FBRyxNQUFFLEtBQUUsTUFBRyxJQUFFLE1BQUcsSUFBRSxNQUFHLElBQUUsTUFBRyxPQUFLLElBQUUsTUFBSSxLQUFFO0FBQUcsYUFBRSxNQUFHLElBQUUsR0FBRSxNQUFHO0FBQUUsY0FBSSxLQUFFLEdBQUUsS0FBRyxLQUFFLEdBQUUsS0FBRyxLQUFFLEdBQUUsS0FBRyxLQUFFLE1BQUksR0FBRSxNQUFHLFdBQVM7QUFBRSxhQUFFLE1BQUcsTUFBRyxLQUFHLE9BQUksR0FBRSxHQUFFLE1BQUcsTUFBRyxLQUFHLE9BQUksSUFBRyxHQUFFLE1BQUcsTUFBRyxJQUFFLE9BQUksSUFBRyxHQUFFLE1BQUcsSUFBRSxLQUFFLFdBQVMsS0FBRSxRQUFNLEtBQUUsTUFBSSxLQUFFLFdBQVMsSUFBRSxHQUFFLE1BQUcsTUFBRyxLQUFHLE9BQUksR0FBRSxHQUFFLE1BQUcsTUFBRyxLQUFHLE9BQUksSUFBRyxHQUFFLE1BQUcsTUFBRyxJQUFFLE9BQUksSUFBRyxHQUFFLE1BQUcsSUFBRSxLQUFHLE1BQUUsS0FBRSxHQUFFLEdBQUUsR0FBRSxLQUFFLE9BQUssTUFBRyxHQUFFLEdBQUUsUUFBSyxLQUFFLEtBQUU7QUFBQTtBQUFFLFlBQUksS0FBRSxDQUFDLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUc7QUFBSSxhQUFFLEdBQUUsTUFBSSxHQUFFLE9BQU8sRUFBQyxVQUFTLFdBQVU7QUFBQyxtQkFBUSxLQUFHLE1BQUUsS0FBSyxNQUFNLE9BQU0sS0FBRSxHQUFFLFdBQVMsR0FBRSxLQUFFLElBQUksT0FBSyxXQUFTLEtBQUUsS0FBRyxJQUFHLEtBQUUsS0FBSyxlQUFhLElBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRTtBQUFJLGdCQUFHLEtBQUU7QUFBRSxpQkFBRSxNQUFHLEdBQUU7QUFBQSxpQkFBTztBQUFDLGtCQUFJLEtBQUUsR0FBRSxLQUFFO0FBQUcsbUJBQUUsS0FBRSxJQUFFLE1BQUcsQUFBRyxLQUFFLE1BQUwsS0FBUyxNQUFFLEdBQUUsT0FBSSxPQUFLLEtBQUcsR0FBRSxPQUFJLEtBQUcsUUFBTSxLQUFHLEdBQUUsT0FBSSxJQUFFLFFBQU0sSUFBRSxHQUFFLE1BQUksT0FBSyxNQUFFLEdBQUcsTUFBRSxNQUFHLElBQUUsT0FBSSxRQUFNLE9BQUssS0FBRyxHQUFFLE9BQUksS0FBRyxRQUFNLEtBQUcsR0FBRSxPQUFJLElBQUUsUUFBTSxJQUFFLEdBQUUsTUFBSSxLQUFHLE1BQUcsR0FBRSxLQUFFLEtBQUUsTUFBSSxLQUFJLEdBQUUsTUFBRyxHQUFFLEtBQUUsTUFBRztBQUFBO0FBQUUsZUFBSSxLQUFFLEtBQUssa0JBQWdCLElBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRTtBQUFJLGlCQUFFLEtBQUUsSUFBRSxLQUFFLEtBQUUsSUFBRSxHQUFFLE1BQUcsR0FBRSxLQUFFLElBQUcsR0FBRSxNQUFHLElBQUUsTUFBRyxLQUFHLEtBQUUsS0FBRSxHQUFFLEdBQUUsT0FBSSxPQUFLLEdBQUUsR0FBRSxPQUFJLEtBQUcsUUFBTSxHQUFFLEdBQUUsT0FBSSxJQUFFLFFBQU0sR0FBRSxHQUFFLE1BQUk7QUFBQSxXQUFLLGNBQWEsU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFLLGNBQWMsSUFBRSxJQUFFLEtBQUssY0FBYSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUEsV0FBSSxjQUFhLFNBQVMsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLEdBQUUsS0FBRTtBQUFHLGFBQUUsS0FBRSxLQUFHLEdBQUUsS0FBRSxJQUFHLEdBQUUsS0FBRSxLQUFHLElBQUUsS0FBSyxjQUFjLElBQUUsSUFBRSxLQUFLLGlCQUFnQixJQUFFLElBQUUsSUFBRSxJQUFFLEtBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRyxHQUFFLEtBQUUsS0FBRyxHQUFFLEtBQUUsSUFBRyxHQUFFLEtBQUUsS0FBRztBQUFBLFdBQUcsZUFBYyxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFRLEtBQUUsS0FBSyxVQUFTLEtBQUUsR0FBRSxNQUFHLEdBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxLQUFHLEdBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxLQUFHLEdBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxLQUFHLEdBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLEtBQUUsSUFBRSxNQUFJO0FBQUMsZ0JBQUksS0FBRSxHQUFFLE9BQUksTUFBSSxHQUFFLE9BQUksS0FBRyxPQUFLLEdBQUUsT0FBSSxJQUFFLE9BQUssR0FBRSxNQUFJLE1BQUcsR0FBRSxPQUFLLEtBQUUsR0FBRSxPQUFJLE1BQUksR0FBRSxPQUFJLEtBQUcsT0FBSyxHQUFFLE9BQUksSUFBRSxPQUFLLEdBQUUsTUFBSSxNQUFHLEdBQUUsT0FBSyxLQUFFLEdBQUUsT0FBSSxNQUFJLEdBQUUsT0FBSSxLQUFHLE9BQUssR0FBRSxPQUFJLElBQUUsT0FBSyxHQUFFLE1BQUksTUFBRyxHQUFFO0FBQUssaUJBQUUsR0FBRSxPQUFJLE1BQUksR0FBRSxPQUFJLEtBQUcsT0FBSyxHQUFFLE9BQUksSUFBRSxPQUFLLEdBQUUsTUFBSSxNQUFHLEdBQUUsT0FBSyxLQUFFLElBQUUsS0FBRSxJQUFFLEtBQUU7QUFBQTtBQUFFLGVBQUcsSUFBRSxPQUFJLE9BQUssS0FBRyxHQUFFLE9BQUksS0FBRyxRQUFNLEtBQUcsR0FBRSxPQUFJLElBQUUsUUFBTSxJQUFFLEdBQUUsTUFBSSxPQUFJLEdBQUUsT0FBSyxLQUFHLElBQUUsT0FBSSxPQUFLLEtBQUcsR0FBRSxPQUFJLEtBQUcsUUFBTSxLQUFHLEdBQUUsT0FBSSxJQUFFLFFBQU0sSUFBRSxHQUFFLE1BQUksT0FBSSxHQUFFLE9BQUssS0FBRyxJQUFFLE9BQUksT0FBSyxLQUFHLEdBQUUsT0FB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QUMsVUFBUyxHQUFFLFVBQVMsUUFBTyxHQUFFO0FBQUE7QUFBWSxVQUFJLEtBQUcsSUFBSSxHQUFHO0FBQVcsU0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUMsVUFBUyxHQUFFLFFBQVEsVUFBUyxRQUFPLEdBQUUsUUFBUSxRQUFPLFFBQU8sR0FBRTtBQUFBLFVBQVksR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxFQUFFLElBQUc7QUFBQTtBQUFPLFVBQUksS0FBRyxJQUFJLEdBQUc7QUFBbUIsU0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxFQUFFLEVBQUUsSUFBRyxLQUFHLEVBQUMsVUFBUztBQUFBLFVBQVEsR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxFQUFDLFVBQVMsR0FBRSxVQUFTLFFBQU8sR0FBRSxRQUFPLFFBQU8sR0FBRTtBQUFBO0FBQVksVUFBSSxLQUFHLElBQUksR0FBRztBQUF3QixTQUFHLFFBQVMsU0FBUyxJQUFFO0FBQUMsZUFBTyxHQUFHO0FBQUEsVUFBTSxHQUFHLE9BQVEsV0FBVTtBQUFDLGVBQU8sR0FBRztBQUFBLFVBQVUsR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUMsVUFBUyxHQUFFLFVBQVMsUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFLFFBQVEsVUFBUSxDQUFDLEdBQUcsR0FBRSxRQUFRO0FBQUEsVUFBYSxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBTyxHQUFHLEtBQUssRUFBRSxFQUFFLElBQUcsS0FBRyxFQUFDLFVBQVMsR0FBRSxXQUFTLEdBQUUsUUFBTyxHQUFFO0FBQUEsVUFBYyxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUMsUUFBTyxHQUFFLFFBQU8sVUFBUyxHQUFFLFVBQVMsUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFO0FBQUEsVUFBWSxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUMsVUFBUyxHQUFFLFVBQVMsUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFO0FBQUE7QUFBWSxVQUFJLEtBQUcsSUFBSSxHQUFHO0FBQWEsU0FBRyxRQUFTLFNBQVMsSUFBRTtBQUFDLGVBQU8sR0FBRyxHQUFFLFVBQVMsR0FBRSxRQUFPLEdBQUU7QUFBQSxVQUFXLEdBQUcsT0FBUSxXQUFVO0FBQUMsZUFBTyxHQUFHO0FBQUEsVUFBVSxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBTyxHQUFHLEtBQUssRUFBRSxFQUFFLElBQUcsS0FBRyxFQUFDLFFBQU8sR0FBRSxRQUFRLFdBQVMsQ0FBQyxHQUFHLEdBQUUsUUFBUTtBQUFBLFVBQWEsR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sQUFBSSxHQUFFLFFBQVEsU0FBUyxXQUF2QixLQUErQixBQUFJLEdBQUUsUUFBUSxPQUFPLFdBQXJCLElBQTRCLEdBQUcsS0FBSyxVQUFRLEdBQUcsS0FBSyxFQUFFLEVBQUUsSUFBRyxLQUFHLEVBQUMsVUFBUyxHQUFFLFFBQVEsVUFBUyxRQUFPLEdBQUUsUUFBUTtBQUFBLFVBQWEsR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUUsRUFBRSxJQUFHLEtBQUcsRUFBQyxVQUFTLEdBQUUsUUFBTyxHQUFFO0FBQUEsVUFBYyxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUMsVUFBUyxHQUFFLFVBQVMsUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFO0FBQUE7QUFBWSxVQUFJLEtBQUcsSUFBSSxHQUFHO0FBQTBCLFNBQUcsUUFBUyxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUc7QUFBQSxVQUFNLEdBQUcsT0FBUSxXQUFVO0FBQUMsZUFBTyxHQUFHO0FBQUEsVUFBVSxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBTyxHQUFHLEtBQUssRUFBQyxVQUFTLEdBQUUsVUFBUyxRQUFPLEdBQUUsUUFBTyxRQUFPLEdBQUUsUUFBUSxVQUFRLENBQUMsR0FBRyxHQUFFLFFBQVE7QUFBQSxVQUFhLEdBQUcsR0FBRyxHQUFHLE1BQU0sU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxFQUFFLEVBQUUsSUFBRyxLQUFHLEVBQUMsVUFBUyxHQUFFLFdBQVMsR0FBRSxRQUFPLEdBQUU7QUFBQSxVQUFjLEdBQUcsR0FBRyxHQUFHLE1BQU0sU0FBUyxJQUFFO0FBQUMsZUFBTyxHQUFHLEtBQUssRUFBQyxRQUFPLEdBQUUsUUFBTyxVQUFTLEdBQUUsVUFBUyxRQUFPLEdBQUU7QUFBQSxVQUFZLEdBQUcsR0FBRyxHQUFHLE1BQU0sU0FBUyxJQUFFO0FBQUMsZUFBTyxHQUFHLEtBQUssRUFBQyxVQUFTLEdBQUUsVUFBUyxRQUFPLEdBQUU7QUFBQTtBQUFZLFVBQUksS0FBRyxJQUFJLEdBQUc7QUFBZSxTQUFHLFFBQVMsU0FBUyxJQUFFO0FBQUMsZUFBTyxHQUFHLEdBQUUsVUFBUyxHQUFFO0FBQUEsVUFBVyxHQUFHLE9BQVEsV0FBVTtBQUFDLGVBQU8sR0FBRztBQUFBLFVBQVUsR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sQUFBSSxHQUFFLFFBQVEsU0FBUyxXQUF2QixLQUErQixBQUFJLEdBQUUsUUFBUSxPQUFPLFdBQXJCLElBQTRCLEdBQUcsS0FBSyxVQUFRLEdBQUcsS0FBSyxFQUFDLFVBQVMsR0FBRSxRQUFRLFVBQVMsUUFBTyxHQUFFLFFBQVE7QUFBQSxVQUFZLEdBQUcsR0FBRyxHQUFHLE1BQU0sU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxFQUFDLFVBQVMsR0FBRSxVQUFTLFFBQU8sR0FBRSxRQUFPLFFBQU8sR0FBRTtBQUFBLFVBQWEsR0FBRyxHQUFHLEdBQUcsTUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUUsRUFBRSxJQUFHLEtBQUcsRUFBQyxVQUFTLEdBQUUsUUFBTyxHQUFFO0FBQUEsVUFBYyxHQUFHLEdBQUcsR0FBRyxNQUFNLFNBQVMsSUFBRTtBQUFDLGVBQU8sR0FBRyxLQUFLLEVBQUMsVUFBUyxHQUFFLFVBQVMsUUFBTyxHQUFFO0FBQUE7QUFBWSxVQUFJLEtBQUcsSUFBSSxHQUFHO0FBQWdCLFNBQUcsR0FBRyxHQUFHLE1BQU0sU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxFQUFDLFVBQVMsR0FBRSxRQUFRLFVBQVMsUUFBTyxHQUFFLFFBQVE7QUFBQTtBQUFZLFVBQUksS0FBRyxXQUFVO0FBQUMsb0JBQVcsSUFBRTtBQUFDLGNBQUksS0FBRTtBQUFLLGVBQUssU0FBTyxJQUFJLE1BQUcsS0FBSyxXQUFTLElBQUcsS0FBSyxTQUFPLElBQUcsS0FBSyxhQUFXLElBQUksR0FBRyxLQUFLLFFBQU8sS0FBRyxLQUFLLE9BQU8sVUFBVyxTQUFTLElBQUU7QUFBQyxZQUF5QixHQUFFLFNBQTNCLDBCQUFpQyxHQUFFLFdBQVcsU0FBUyxHQUFFO0FBQUEsY0FBZSxLQUFLLE9BQU8sTUFBTSxJQUFHO0FBQUE7QUFBUSxlQUFPLE9BQU8sZUFBZSxHQUFFLFdBQVUsV0FBVSxFQUFDLEtBQUksV0FBVTtBQUFDLGlCQUFPLEtBQUs7QUFBQSxXQUFRLFlBQVcsT0FBRyxjQUFhLFNBQUssR0FBRSxVQUFVLFlBQVUsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLEdBQUUsVUFBUyxLQUFFLEdBQUU7QUFBTyxlQUFLLFdBQVMsRUFBRSxFQUFFLElBQUcsRUFBRSxLQUFLLFdBQVUsUUFBSSxFQUFFLEFBQU0sTUFBTixPQUFRLEtBQUUsS0FBSSxRQUFJLEtBQUssU0FBTyxFQUFFLEVBQUUsSUFBRyxFQUFFLEtBQUssU0FBUSxRQUFJLEVBQUUsQUFBTSxNQUFOLE9BQVEsS0FBRSxLQUFJLFFBQUksS0FBSyxPQUFPLFdBQVcsR0FBRyxLQUFLLFVBQVMsS0FBSztBQUFBLFdBQVUsR0FBRSxVQUFVLGNBQVksU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLEdBQUUsVUFBUyxLQUFFLEdBQUU7QUFBTyxlQUFLLFdBQVMsS0FBSyxTQUFTLE9BQVEsU0FBUyxJQUFFO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxBQUFRLE1BQUUsQ0FBRSxDQUFNLE1BQU4sT0FBUSxTQUFPLEdBQUUsU0FBUyxVQUF0QyxRQUE0QyxBQUFTLE9BQVQsVUFBWTtBQUFBLGNBQUssS0FBSyxTQUFPLEtBQUssT0FBTyxPQUFRLFNBQVMsSUFBRTtBQUFDLGdCQUFJO0FBQUUsbUJBQU8sQUFBUSxNQUFFLENBQUUsQ0FBTSxNQUFOLE9BQVEsU0FBTyxHQUFFLFNBQVMsVUFBdEMsUUFBNEMsQUFBUyxPQUFULFVBQVk7QUFBQSxjQUFLLEtBQUssT0FBTyxXQUFXLEdBQUcsS0FBSyxTQUFTLE1BQU0sSUFBRyxLQUFLLE9BQU8sTUFBTTtBQUFBLFdBQU0sR0FBRSxVQUFVLGlCQUFlLFdBQVU7QUFBQyxlQUFLLFdBQVMsSUFBRyxLQUFLLFNBQU8sSUFBRyxLQUFLLE9BQU8sV0FBVyxHQUFHLEtBQUssU0FBUyxNQUFNLElBQUcsS0FBSyxPQUFPLE1BQU07QUFBQSxXQUFNLEdBQUUsVUFBVSxZQUFVLFdBQVU7QUFBQyxlQUFLLE9BQU8sV0FBVztBQUFBLFdBQU8sR0FBRSxVQUFVLGFBQVcsV0FBVTtBQUFDLGVBQUssT0FBTyxXQUFXO0FBQUEsV0FBTztBQUFBLFdBQUssS0FBRyxXQUFVO0FBQUMsb0JBQVcsSUFBRTtBQUFDLGNBQUksS0FBRSxNQUFLLEtBQUUsR0FBRSxZQUFXLEtBQUUsR0FBRSxNQUFLLEtBQUUsSUFBSSxFQUFFLEVBQUMsT0FBTTtBQUFJLGVBQUssVUFBUTtBQUFFLGNBQUksS0FBRSxJQUFJLEVBQUUsRUFBQyxRQUFPLE9BQUksS0FBRSxHQUFFO0FBQWEsYUFBRSxLQUFLO0FBQUcsY0FBSSxLQUFFLElBQUksRUFBRSxJQUFFO0FBQUcsZUFBSyxnQkFBYztBQUFFLGNBQUksS0FBRSxJQUFJLEVBQUUsRUFBQyxxQkFBb0I7QUFBTSxlQUFLLG9CQUFrQjtBQUFFLGNBQUksS0FBRSxFQUFDLFFBQU8sSUFBRSxZQUFXLElBQUUsUUFBTyxJQUFFLGNBQWEsSUFBRSxjQUFhLElBQUUsa0JBQWlCLElBQUUsWUFBVyxHQUFFO0FBQVksZUFBSyxPQUFLLEdBQUUsWUFBVyxLQUFLLGNBQVksU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxHQUFFLFlBQVksSUFBRSxJQUFFLEdBQUU7QUFBQSxhQUFPLEtBQUssY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLEdBQUUsWUFBWSxJQUFFLElBQUUsR0FBRTtBQUFBO0FBQU8sY0FBSSxLQUFFLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFFLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFFLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFFLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFFLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFFLElBQUk7QUFBRSxjQUFHLEtBQUssbUJBQWlCLElBQUUsS0FBSyxVQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLFVBQVEsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLEtBQUssbUJBQWlCLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLFlBQVUsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLEtBQUssa0JBQWdCLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxBQUFLLEdBQUUsd0JBQVAsTUFBMkI7QUFBQyxnQkFBSSxLQUFFLElBQUksR0FBRyxFQUFDLFdBQVUsS0FBSyxXQUFVLGVBQWMsS0FBSztBQUFrQixpQkFBSyxZQUFVLEdBQUUsVUFBVSxLQUFLLEtBQUcsS0FBSyxjQUFZLEdBQUUsWUFBWSxLQUFLLEtBQUcsS0FBSyxjQUFZO0FBQUEsaUJBQU07QUFBQyxnQkFBSSxLQUFFLElBQUksRUFBRSxFQUFDLGNBQWEsSUFBRSxlQUFjLElBQUUsbUJBQWtCLElBQUUsa0JBQWlCLElBQUUsbUJBQWtCLElBQUUsUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFLFFBQU8saUJBQWdCLElBQUUsWUFBVyxTQUFTLElBQUU7QUFBQyxxQkFBTyxHQUFHLElBQUU7QUFBQTtBQUFNLGlCQUFLLFlBQVUsR0FBRSxxQkFBcUIsS0FBSyxLQUFHLEtBQUssY0FBWSxHQUFFLHVCQUF1QixLQUFLLEtBQUcsS0FBSyxhQUFXLEdBQUUsV0FBVyxLQUFLLEtBQUcsS0FBSyxZQUFVLEdBQUUsVUFBVSxLQUFLLEtBQUcsS0FBSyxpQkFBZSxHQUFFLGVBQWUsS0FBSyxLQUFHLEtBQUssd0JBQXNCLEdBQUUsc0JBQXNCLEtBQUssS0FBRyxLQUFLLDZCQUEyQixHQUFFLDJCQUEyQixLQUFLLEtBQUcsS0FBSyxXQUFTLEdBQUUsaUJBQWlCLEtBQUssS0FBRyxLQUFLLFdBQVMsR0FBRSxvQkFBb0IsS0FBSyxLQUFHLEtBQUssVUFBUSxTQUFTLElBQUU7QUFBQyxpQkFBRSxlQUFlLEtBQUcsR0FBRTtBQUFBO0FBQUE7QUFBYyxlQUFLLGNBQVksR0FBRSxZQUFZLEtBQUssS0FBRyxLQUFLLGlCQUFlLEdBQUUsZUFBZSxLQUFLLEtBQUcsS0FBSyxxQkFBbUIsR0FBRSxtQkFBbUIsS0FBSyxLQUFHLEtBQUssYUFBVyxHQUFFLFdBQVcsS0FBSyxLQUFHLEtBQUssV0FBUyxHQUFFLFNBQVMsS0FBSyxLQUFHLEtBQUssV0FBUyxHQUFFLFNBQVMsS0FBSyxLQUFHLEtBQUssZ0JBQWMsRUFBQyxZQUFXLEVBQUUsS0FBSyxNQUFLLElBQUUsSUFBRyxjQUFhLEVBQUUsS0FBSyxNQUFLLElBQUUsSUFBRyxhQUFZLEVBQUUsS0FBSyxNQUFLLElBQUUsSUFBRyxnQkFBZSxFQUFFLEtBQUssTUFBSyxJQUFFLElBQUcsYUFBWSxFQUFFLEtBQUssTUFBSyxJQUFFLE1BQUksS0FBSyxPQUFLLEVBQUMsYUFBWSxFQUFFLEtBQUssTUFBSyxJQUFFLElBQUcsZ0JBQWUsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLGNBQWEsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLGNBQWEsRUFBRSxLQUFLLE1BQUssSUFBRSxPQUFLLEtBQUssVUFBUSxFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksS0FBSyxXQUFTLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLFdBQVMsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLEtBQUssUUFBTSxFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksS0FBSyxhQUFXLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLFFBQU0sRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLEtBQUssY0FBWSxFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksS0FBSyxVQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLE9BQUssU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxHQUFFLFlBQVUsT0FBRyxHQUFFLGlCQUFlLE9BQUcsR0FBRSxRQUFRLElBQUU7QUFBQSxhQUFJLEtBQUssU0FBTyxFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksS0FBSyxVQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLGlCQUFlLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLGdCQUFjLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLGdCQUFjLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLG1CQUFpQixFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksS0FBSyxzQkFBb0IsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLEtBQUssb0JBQWtCLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLFlBQVUsRUFBRSxLQUFLLE1BQUssSUFBRTtBQUFJLGNBQUksS0FBRSxFQUFFLEtBQUssTUFBSyxJQUFFO0FBQUksZUFBSyxjQUFZLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxLQUFLLFdBQVMsR0FBRyxFQUFDLG1CQUFrQixJQUFFLGFBQVksS0FBSyxhQUFZLFNBQVEsT0FBSSxLQUFLLGFBQVcsU0FBUyxJQUFFO0FBQUMsbUJBQU8sR0FBRyxJQUFFO0FBQUEsYUFBSSxLQUFLLGVBQWEsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLEtBQUssYUFBVyxFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksS0FBSyxVQUFRLEVBQUMsb0JBQW1CLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSxpQkFBZ0IsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLGlCQUFnQixFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksb0JBQW1CLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSx1QkFBc0IsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLG9CQUFtQixFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksb0JBQW1CLEVBQUUsS0FBSyxNQUFLLElBQUUsS0FBSSx1QkFBc0IsRUFBRSxLQUFLLE1BQUssSUFBRSxLQUFJLG1CQUFrQixFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksbUJBQWtCLFNBQVMsSUFBRTtBQUFDLHFCQUFRLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxVQUFVLFFBQU87QUFBSSxpQkFBRSxLQUFFLEtBQUcsVUFBVTtBQUFHLG1CQUFPLEVBQUUsS0FBSyxNQUFNLEdBQUUsRUFBRSxDQUFDLElBQUUsSUFBRSxJQUFHLEVBQUUsRUFBQyxNQUFLLFNBQU8sTUFBSSxFQUFFLEtBQUc7QUFBQSxhQUFNLHNCQUFxQixTQUFTLElBQUU7QUFBQyxxQkFBUSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsVUFBVSxRQUFPO0FBQUksaUJBQUUsS0FBRSxLQUFHLFVBQVU7QUFBRyxtQkFBTyxFQUFFLEtBQUssTUFBTSxHQUFFLEVBQUUsQ0FBQyxJQUFFLElBQUUsSUFBRyxFQUFFLEVBQUMsTUFBSyxZQUFVLE1BQUksRUFBRSxLQUFHO0FBQUEsYUFBTSxnQkFBZSxFQUFFLEtBQUssTUFBSyxJQUFFLEtBQUksZ0JBQWUsU0FBUyxJQUFFO0FBQUMscUJBQVEsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLFVBQVUsUUFBTztBQUFJLGlCQUFFLEtBQUUsS0FBRyxVQUFVO0FBQUcsbUJBQU8sRUFBRSxLQUFLLE1BQU0sR0FBRSxFQUFFLENBQUMsSUFBRSxJQUFFLElBQUcsRUFBRSxFQUFDLE1BQUssU0FBTyxNQUFJLEVBQUUsS0FBRztBQUFBLGFBQU0sbUJBQWtCLFNBQVMsSUFBRTtBQUFDLHFCQUFRLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxVQUFVLFFBQU87QUFBSSxpQkFBRSxLQUFFLEtBQUcsVUFBVTtBQUFHLG1CQUFPLEVBQUUsS0FBSyxNQUFNLEdBQUUsRUFBRSxDQUFDLElBQUUsSUFBRSxJQUFHLEVBQUUsRUFBQyxNQUFLLFlBQVUsTUFBSSxFQUFFLEtBQUc7QUFBQSxlQUFPLEtBQUssYUFBVyxTQUFTLElBQUU7QUFBQyxtQkFBTyxHQUFFLFFBQVEsZ0JBQWdCLEVBQUMsTUFBSyxHQUFFLFFBQU8sTUFBSyxHQUFFLE1BQUssU0FBUSxHQUFFO0FBQUEsYUFBVyxLQUFLLGFBQVcsS0FBSyxZQUFXLEtBQUssYUFBVyxTQUFTLElBQUU7QUFBQyxtQkFBTyxHQUFFLFFBQVEsbUJBQW1CLEVBQUMsTUFBSyxBQUFNLE1BQU4sT0FBUSxTQUFPLEdBQUU7QUFBQSxhQUFVLEtBQUssWUFBVSxTQUFTLElBQUU7QUFBQyxtQkFBTyxHQUFFLFFBQVEsZ0JBQWdCLEVBQUMsTUFBSyxBQUFNLE1BQU4sT0FBUSxTQUFPLEdBQUUsUUFBTyxTQUFRLEFBQU0sTUFBTixPQUFRLFNBQU8sR0FBRTtBQUFBLGFBQVcsS0FBSyxhQUFXLEtBQUssUUFBUSxvQkFBbUIsS0FBSyxjQUFZLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEdBQUUsUUFBUSxtQkFBbUIsRUFBQyxTQUFRLEdBQUUsU0FBUSxNQUFLLEdBQUUsTUFBSyxTQUFRLEdBQUU7QUFBQSxhQUFXLEtBQUssY0FBWSxLQUFLLGFBQVksS0FBSyxjQUFZLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEdBQUUsUUFBUSxzQkFBc0IsRUFBQyxTQUFRLEdBQUU7QUFBQSxhQUFXLEtBQUssYUFBVyxTQUFTLElBQUU7QUFBQyxtQkFBTyxHQUFFLFFBQVEsbUJBQW1CLEVBQUMsU0FBUSxHQUFFLFNBQVEsU0FBUSxHQUFFO0FBQUEsYUFBVyxLQUFLLGNBQVksS0FBSyxRQUFRLHVCQUFzQixLQUFLLGlCQUFlLFNBQVMsSUFBRTtBQUFDLGdCQUFJLElBQUU7QUFBRSxtQkFBTSxBQUFVLE9BQU8sR0FBRSxXQUFuQixXQUEyQixHQUFFLFFBQVEsa0JBQWtCLEVBQUMsU0FBUSxHQUFFLFNBQVEsT0FBTSxBQUFRLE1BQUUsR0FBRSxXQUFaLFFBQW9CLEFBQVMsT0FBVCxTQUFXLFNBQU8sR0FBRSxJQUFLLFNBQVMsSUFBRTtBQUFDLHFCQUFNLEFBQVUsT0FBTyxNQUFqQixXQUFtQixLQUFFLEVBQUMsSUFBRyxHQUFFLFFBQU8sUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFO0FBQUEsZ0JBQVcsT0FBTSxPQUFJLEdBQUUsUUFBUSxlQUFlLEVBQUMsTUFBSyxHQUFFLFFBQU8sVUFBUyxBQUFRLE1BQUUsR0FBRSxZQUFaLFFBQXFCLEFBQVMsT0FBVCxTQUFXLFNBQU8sR0FBRSxJQUFLLFNBQVMsSUFBRTtBQUFDLHFCQUFNLEFBQVUsT0FBTyxNQUFqQixXQUFtQixLQUFFLEVBQUMsSUFBRyxHQUFFLFNBQVEsUUFBTyxHQUFFLFFBQU8sUUFBTyxHQUFFO0FBQUEsZ0JBQVcsT0FBTTtBQUFBLGFBQUssS0FBSyxvQkFBa0IsS0FBSyxnQkFBZSxLQUFLLG9CQUFrQixTQUFTLElBQUU7QUFBQyxtQkFBTSxBQUFVLE9BQU8sR0FBRSxXQUFuQixXQUEyQixHQUFFLFFBQVEscUJBQXFCLEVBQUMsU0FBUSxHQUFFLFNBQVEsT0FBTSxHQUFFLFNBQVEsT0FBTSxPQUFJLEdBQUUsUUFBUSxrQkFBa0IsRUFBQyxNQUFLLEdBQUUsUUFBTyxVQUFTLEdBQUUsVUFBUyxPQUFNO0FBQUEsYUFBSyxLQUFLLG1CQUFpQixTQUFTLElBQUU7QUFBQyxtQkFBTSxBQUFVLE9BQU8sR0FBRSxXQUFuQixXQUEyQixHQUFFLFFBQVEsa0JBQWtCLEVBQUMsU0FBUSxHQUFFLFNBQVEsUUFBTyxHQUFFLFFBQU8sT0FBTSxHQUFFLE9BQU0sTUFBSyxHQUFFLE1BQUssU0FBUSxFQUFDLGNBQWEsR0FBRSxRQUFRLGNBQWEsWUFBVyxHQUFFLFFBQVEsWUFBVyxrQkFBaUIsR0FBRSxRQUFRLGtCQUFpQixZQUFXLEdBQUUsUUFBUSxjQUFZLE1BQUssQUFBTSxHQUFFLFFBQVIsT0FBYSxPQUFPLFlBQVksT0FBTyxRQUFRLEdBQUUsTUFBTSxJQUFLLFNBQVMsSUFBRTtBQUFDLGtCQUFJLEtBQUUsRUFBRSxJQUFFLElBQUcsS0FBRSxHQUFFLElBQUcsS0FBRSxHQUFFO0FBQUcscUJBQU0sQ0FBQyxHQUFFLFFBQVEsUUFBTyxTQUFRO0FBQUEsa0JBQU8sUUFBTyxLQUFNLFNBQVMsSUFBRTtBQUFDLGtCQUFJO0FBQUUscUJBQU8sR0FBRSxPQUFLLEFBQVEsTUFBRSxHQUFFLFVBQVosUUFBbUIsQUFBUyxPQUFULFNBQVcsU0FBTyxHQUFFLElBQUssU0FBUyxJQUFFO0FBQUMsdUJBQU0sRUFBQyxNQUFLLEdBQUUsTUFBSyxRQUFPLEdBQUUsUUFBTyxTQUFRLEdBQUUsU0FBUSxNQUFLLEdBQUU7QUFBQSxrQkFBUztBQUFBLGlCQUFLLEdBQUUsUUFBUSxlQUFlLEVBQUMsTUFBSyxHQUFFLFFBQU8sUUFBTyxHQUFFLFFBQU8sT0FBTSxHQUFFLE9BQU0sTUFBSyxHQUFFLE1BQUssU0FBUSxFQUFDLGNBQWEsR0FBRSxRQUFRLGNBQWEsZUFBYyxHQUFFLFFBQVEsYUFBWSxxQkFBb0IsR0FBRSxRQUFRLG1CQUFrQixZQUFXLEdBQUUsUUFBUSxjQUFZLE1BQUssQUFBTSxHQUFFLFFBQVIsT0FBYSxPQUFPLFlBQVksT0FBTyxRQUFRLEdBQUUsTUFBTSxJQUFLLFNBQVMsSUFBRTtBQUFDLGtCQUFJLEtBQUUsRUFBRSxJQUFFLElBQUcsS0FBRSxHQUFFLElBQUcsS0FBRSxHQUFFO0FBQUcscUJBQU0sQ0FBQyxHQUFFLFFBQVEsU0FBUSxZQUFXO0FBQUEsa0JBQU8sUUFBTyxLQUFNLFNBQVMsSUFBRTtBQUFDLGtCQUFJO0FBQUUscUJBQU8sR0FBRSxPQUFLLEFBQVEsTUFBRSxHQUFFLFVBQVosUUFBbUIsQUFBUyxPQUFULFNBQVcsU0FBTyxHQUFFLElBQUssU0FBUyxJQUFFO0FBQUMsdUJBQU0sRUFBQyxPQUFNLEdBQUUsU0FBUSxRQUFPLEdBQUUsUUFBTyxTQUFRLEdBQUUsU0FBUSxNQUFLLEdBQUU7QUFBQSxrQkFBUztBQUFBO0FBQUEsYUFBTSxLQUFLLE9BQUssSUFBRSxLQUFLLE9BQUssS0FBSyxTQUFRLEtBQUssVUFBUSxHQUFFLFFBQVEsS0FBSyxLQUFHLEtBQUssVUFBUSxHQUFFLFFBQVEsS0FBSyxLQUFHLEtBQUssYUFBVyxHQUFFLE9BQU8sV0FBVyxLQUFLLEdBQUUsU0FBUSxLQUFLLGFBQVcsR0FBRSxPQUFPLFdBQVcsS0FBSyxHQUFFLFNBQVEsS0FBSyxlQUFhLEdBQUUsT0FBTyxhQUFhLEtBQUssR0FBRSxTQUFRLEtBQUssVUFBUSxHQUFFLE9BQU8sUUFBUSxLQUFLLEdBQUUsU0FBUSxLQUFLLFVBQVEsR0FBRSxPQUFPLFFBQVEsS0FBSyxHQUFFLFNBQVEsS0FBSyxzQkFBb0IsR0FBRSxPQUFPLG9CQUFvQixLQUFLLEdBQUUsU0FBUSxLQUFLLHNCQUFvQixHQUFFLE9BQU8sb0JBQW9CLEtBQUssR0FBRSxTQUFRLEtBQUssdUJBQXFCLEdBQUUsT0FBTyxxQkFBcUIsS0FBSyxHQUFFLFNBQVEsR0FBRSxVQUFVLFlBQVcsTUFBSyxXQUFTLFNBQVMsSUFBRTtBQUFDLGVBQUUsT0FBTyxTQUFTLEtBQUcsR0FBRTtBQUFBO0FBQUE7QUFBYyxlQUFPLEdBQUUsVUFBVSxhQUFXLFdBQVU7QUFBQyxpQkFBTyxLQUFLLFFBQVE7QUFBQSxXQUFjLEdBQUUsVUFBVSxrQkFBZ0IsU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFLLFFBQVEsZ0JBQWdCLElBQUU7QUFBQSxXQUFJLEdBQUUsVUFBVSxzQkFBb0IsV0FBVTtBQUFDLGVBQUssaUJBQWlCLHVCQUFzQixLQUFLLFFBQVEsVUFBUSxLQUFLLGVBQWEsS0FBSyxRQUFRO0FBQUEsV0FBSyxHQUFFLFVBQVUsb0JBQWtCLFdBQVU7QUFBQyxlQUFLLGlCQUFpQixxQkFBb0IsS0FBSztBQUFBLFdBQWEsR0FBRSxzQkFBb0IsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxJQUFJLEVBQUUsSUFBRTtBQUFBLFdBQUksR0FBRSxlQUFhLFdBQVU7QUFBQyxpQkFBTztBQUFBLFdBQUssR0FBRSxhQUFXLEdBQUUsR0FBRSxhQUFXLEdBQUU7QUFBQSxXQUFLLEtBQUcsV0FBVTtBQUFDLG9CQUFXLElBQUU7QUFBQyxjQUFJLEtBQUU7QUFBSyxlQUFLLFdBQVMsSUFBRyxPQUFPLEtBQUssSUFBRyxRQUFTLFNBQVMsSUFBRTtBQUFDLGVBQUUsU0FBUyxNQUFHLEdBQUUsSUFBRyxLQUFLO0FBQUE7QUFBQTtBQUFNLGVBQU8sR0FBRSxVQUFVLE9BQUssU0FBUyxJQUFFO0FBQUMsZUFBSyxVQUFRLElBQUUsTUFBTSxRQUFRLEtBQUssUUFBUSxVQUFRLEtBQUssb0JBQWtCLEtBQUssTUFBTSxLQUFLLFdBQVMsS0FBSyxRQUFRLE9BQU8sVUFBUSxLQUFLLG9CQUFrQixHQUFFLEtBQUssY0FBWSxJQUFHLEtBQUs7QUFBQSxXQUF1QixHQUFFLFVBQVUsYUFBVyxXQUFVO0FBQUMsY0FBSSxLQUFFLEtBQUssUUFBUSxTQUFPLGFBQVc7QUFBVSxjQUFHLEFBQVUsT0FBTyxLQUFLLFFBQVEsVUFBOUI7QUFBcUMsbUJBQU0sR0FBRyxPQUFPLElBQUcsT0FBTyxLQUFLLFFBQVE7QUFBUSxlQUFLLHFCQUFtQixHQUFFLEtBQUsscUJBQW1CLEtBQUssUUFBUSxPQUFPLFVBQVMsTUFBSyxvQkFBa0I7QUFBRyxjQUFJLEtBQUUsS0FBSyxRQUFRLE9BQU8sS0FBSztBQUFtQixpQkFBTSxHQUFHLE9BQU8sSUFBRyxPQUFPO0FBQUEsV0FBSSxHQUFFLFVBQVUsWUFBVSxTQUFTLElBQUU7QUFBQyxpQkFBTyxNQUFLLEtBQUs7QUFBQSxXQUFVLEdBQUUsVUFBVSxzQkFBb0IsV0FBVTtBQUFDLGlCQUFPLEtBQUssa0JBQWdCLEtBQUssY0FBYSxLQUFLO0FBQUEsV0FBaUIsR0FBRSxVQUFVLG9CQUFrQixXQUFVO0FBQUMsaUJBQU8sS0FBSztBQUFBLFdBQWlCLEdBQUUsVUFBVSxXQUFTLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFLLFNBQVMsU0FBUyxJQUFFLElBQUU7QUFBQSxXQUFJLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFLLFNBQVMsUUFBUSxJQUFFLElBQUU7QUFBQSxXQUFJLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFPLEtBQUssU0FBUyxLQUFLLElBQUUsSUFBRSxJQUFFO0FBQUEsV0FBSSxHQUFFLFVBQVUsUUFBTSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFLLFNBQVMsTUFBTSxJQUFFLElBQUUsSUFBRTtBQUFBLFdBQUksR0FBRSxVQUFVLE1BQUksU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFPLEtBQUssU0FBUyxJQUFJLElBQUUsSUFBRTtBQUFBLFdBQUksR0FBRSxVQUFVLFNBQU8sU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFPLEtBQUssU0FBUyxJQUFJLElBQUUsSUFBRTtBQUFBLFdBQUksR0FBRSxVQUFVLHVCQUFxQixTQUFTLElBQUU7QUFBQyxjQUFHLEFBQWMsR0FBRSxTQUFoQjtBQUFxQixtQkFBTyxFQUFFO0FBQXdCLGNBQUcsQUFBaUIsR0FBRSxTQUFuQjtBQUF3QixtQkFBTyxFQUFFO0FBQXdCLGNBQUcsQUFBZSxHQUFFLFNBQWpCO0FBQXNCLG1CQUFPLEVBQUU7QUFBd0IsY0FBRyxBQUFjLEdBQUUsU0FBaEI7QUFBcUIsbUJBQU8sRUFBRTtBQUF3QixjQUFHLEFBQUksR0FBRSxXQUFOLEtBQWMsR0FBRSxlQUFlLGFBQVcsQUFBUyxHQUFFLFdBQVg7QUFBa0IsbUJBQU8sRUFBRTtBQUF3QixjQUFHLEdBQUU7QUFBUSxtQkFBTyxFQUFFO0FBQWtCLGNBQUcsQUFBYyxHQUFFLFNBQWhCO0FBQXFCLG1CQUFPLEVBQUU7QUFBd0IsY0FBRyxHQUFFLFVBQVM7QUFBQyxnQkFBRyxHQUFFLFNBQVM7QUFBVyxxQkFBTyxFQUFFO0FBQXFCLGdCQUFHLEdBQUUsU0FBUztBQUFVLHFCQUFPLEVBQUU7QUFBQTtBQUF1QixpQkFBTyxFQUFFO0FBQUEsV0FBbUI7QUFBQSxXQUFLLEtBQUcsV0FBVTtBQUFDLG9CQUFXLElBQUUsSUFBRTtBQUFDLGVBQUssa0JBQWdCLElBQUUsS0FBSyxVQUFRO0FBQUE7QUFBRSxlQUFPLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRTtBQUFHLGFBQUUsU0FBTyxLQUFHLElBQUUsS0FBRSxNQUFJLEdBQUUsU0FBTyxLQUFHLEtBQUksTUFBRTtBQUFNLGNBQUksS0FBRSxHQUFFLFFBQVEsT0FBTSxLQUFLLFFBQVEsT0FBTSxPQUFLLElBQUUsS0FBRSxLQUFLLFFBQVEsS0FBSyxnQkFBZ0I7QUFBSSxjQUFHLEFBQVUsT0FBTyxNQUFqQjtBQUFtQixtQkFBTztBQUFBLFdBQUc7QUFBQSxXQUFLLEtBQUcsRUFBQyxTQUFRLE1BQUksS0FBRyxFQUFDLFNBQVE7QUFBSSxPQUFDLFNBQVMsSUFBRTtBQUFDLG9CQUFXLElBQUU7QUFBQyxjQUFHO0FBQUUsbUJBQU8sU0FBUyxJQUFFO0FBQUMsdUJBQVEsTUFBSyxHQUFFO0FBQVUsbUJBQUUsTUFBRyxHQUFFLFVBQVU7QUFBRyxxQkFBTztBQUFBLGNBQUc7QUFBQTtBQUFHLFdBQUUsVUFBUSxJQUFFLEdBQUUsVUFBVSxLQUFHLEdBQUUsVUFBVSxtQkFBaUIsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFLLGFBQVcsS0FBSyxjQUFZLElBQUksTUFBSyxXQUFXLE1BQUksTUFBRyxLQUFLLFdBQVcsTUFBSSxPQUFJLElBQUksS0FBSyxLQUFHO0FBQUEsV0FBTSxHQUFFLFVBQVUsT0FBSyxTQUFTLElBQUUsSUFBRTtBQUFDLHdCQUFZO0FBQUMsaUJBQUssSUFBSSxJQUFFLEtBQUcsR0FBRSxNQUFNLE1BQUs7QUFBQTtBQUFXLGlCQUFPLEdBQUUsS0FBRyxJQUFFLEtBQUssR0FBRyxJQUFFLEtBQUc7QUFBQSxXQUFNLEdBQUUsVUFBVSxNQUFJLEdBQUUsVUFBVSxpQkFBZSxHQUFFLFVBQVUscUJBQW1CLEdBQUUsVUFBVSxzQkFBb0IsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFHLEtBQUssYUFBVyxLQUFLLGNBQVksSUFBRyxBQUFHLFVBQVUsVUFBYjtBQUFvQixtQkFBTyxLQUFLLGFBQVcsSUFBRztBQUFLLGNBQUksSUFBRSxLQUFFLEtBQUssV0FBVyxNQUFJO0FBQUcsY0FBRyxDQUFDO0FBQUUsbUJBQU87QUFBSyxjQUFHLEFBQUcsVUFBVSxVQUFiO0FBQW9CLG1CQUFPLE9BQU8sS0FBSyxXQUFXLE1BQUksS0FBRztBQUFLLG1CQUFRLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTztBQUFJLGdCQUFJLE1BQUUsR0FBRSxTQUFNLE1BQUcsR0FBRSxPQUFLLElBQUU7QUFBQyxpQkFBRSxPQUFPLElBQUU7QUFBRztBQUFBO0FBQU0saUJBQU8sQUFBSSxHQUFFLFdBQU4sS0FBYyxPQUFPLEtBQUssV0FBVyxNQUFJLEtBQUc7QUFBQSxXQUFNLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLGVBQUssYUFBVyxLQUFLLGNBQVk7QUFBRyxtQkFBUSxLQUFFLElBQUksTUFBTSxVQUFVLFNBQU8sSUFBRyxLQUFFLEtBQUssV0FBVyxNQUFJLEtBQUcsS0FBRSxHQUFFLEtBQUUsVUFBVSxRQUFPO0FBQUksZUFBRSxLQUFFLEtBQUcsVUFBVTtBQUFHLGNBQUcsSUFBRTtBQUFDLGlCQUFFO0FBQUUscUJBQVEsS0FBRyxNQUFFLEdBQUUsTUFBTSxJQUFJLFFBQU8sS0FBRSxJQUFFLEVBQUU7QUFBRSxpQkFBRSxJQUFHLE1BQU0sTUFBSztBQUFBO0FBQUcsaUJBQU87QUFBQSxXQUFNLEdBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEtBQUssYUFBVyxLQUFLLGNBQVksSUFBRyxLQUFLLFdBQVcsTUFBSSxPQUFJO0FBQUEsV0FBSSxHQUFFLFVBQVUsZUFBYSxTQUFTLElBQUU7QUFBQyxpQkFBTSxDQUFDLENBQUMsS0FBSyxVQUFVLElBQUc7QUFBQTtBQUFBLFFBQVM7QUFBSSxVQUFJLEtBQUc7QUFBRyxTQUFHLFVBQVEsSUFBRyxHQUFHLFNBQU8sSUFBRyxHQUFHLGtCQUFnQjtBQUFHLFVBQUksS0FBRyxTQUFRLEtBQUcsY0FBYSxLQUFHLElBQUcsS0FBRztBQUFHLG9CQUFhO0FBQUMsZUFBTSxFQUFDLFlBQVcsT0FBTyxrQkFBaUIsWUFBVyxPQUFPO0FBQUE7QUFBa0Isa0JBQVksSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLFlBQUk7QUFBRSxRQUFTLE9BQVQsVUFBYSxNQUFFLE9BQU0sR0FBRyxJQUFFLElBQUcsR0FBRSxJQUFHLFFBQU8sR0FBRTtBQUFHLFlBQUc7QUFBQyxlQUFFLEFBQUksR0FBRyxXQUFQLElBQWMsS0FBSyxVQUFVLElBQUUsSUFBRSxNQUFHLEtBQUssVUFBVSxJQUFFLEdBQUcsS0FBRztBQUFBLGlCQUFTLElBQU47QUFBUyxpQkFBTyxLQUFLLFVBQVU7QUFBQSxrQkFBdUU7QUFBUSxpQkFBSyxBQUFJLEdBQUcsV0FBUCxLQUFlO0FBQUMsZ0JBQUksS0FBRSxHQUFHO0FBQU0sWUFBSSxHQUFFLFdBQU4sSUFBYSxPQUFPLGVBQWUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLE1BQUksR0FBRSxHQUFHLEdBQUUsTUFBSSxHQUFFO0FBQUE7QUFBQTtBQUFJLGVBQU87QUFBQTtBQUFFLGtCQUFZLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFJLEtBQUUsT0FBTyx5QkFBeUIsSUFBRTtBQUFHLFFBQVMsR0FBRSxRQUFYLFNBQWUsR0FBRSxlQUFjLFFBQU8sZUFBZSxJQUFFLElBQUUsRUFBQyxPQUFNLE9BQUksR0FBRyxLQUFLLENBQUMsSUFBRSxJQUFFLElBQUUsUUFBSyxHQUFHLEtBQUssQ0FBQyxJQUFFLElBQUUsT0FBSyxJQUFFLE1BQUcsSUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFFLElBQUU7QUFBQTtBQUFLLGtCQUFZLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFJO0FBQUUsWUFBRyxNQUFHLEdBQUUsQUFBVSxPQUFPLE1BQWpCLFlBQW9CLEFBQU8sT0FBUCxNQUFTO0FBQUMsZUFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU87QUFBSSxnQkFBRyxHQUFFLFFBQUs7QUFBRSxxQkFBTyxLQUFLLEdBQUcsSUFBRyxJQUFFLElBQUU7QUFBRyxjQUFHLEFBQVMsR0FBRSxlQUFYLFVBQXVCLEtBQUUsR0FBRTtBQUFXLG1CQUFPLEtBQUssR0FBRyxJQUFHLElBQUUsSUFBRTtBQUFHLGNBQUcsQUFBUyxHQUFFLGVBQVgsVUFBdUIsS0FBRSxJQUFFLEdBQUU7QUFBVyxtQkFBTyxLQUFLLEdBQUcsSUFBRyxJQUFFLElBQUU7QUFBRyxjQUFHLEdBQUUsS0FBSyxLQUFHLE1BQU0sUUFBUTtBQUFHLGlCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTztBQUFJLGlCQUFHLEdBQUUsS0FBRyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQSxlQUFPO0FBQUMsZ0JBQUksS0FBRSxPQUFPLEtBQUs7QUFBRyxpQkFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sTUFBSTtBQUFDLGtCQUFJLEtBQUUsR0FBRTtBQUFHLGlCQUFHLEdBQUUsS0FBRyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFBO0FBQUksYUFBRTtBQUFBO0FBQUE7QUFBTyxrQkFBWSxJQUFFLElBQUU7QUFBQyxlQUFPLEtBQUUsS0FBRSxLQUFHLEtBQUUsS0FBRSxJQUFFO0FBQUE7QUFBRSxrQkFBWSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsUUFBUyxPQUFULFVBQWEsTUFBRTtBQUFNLFlBQUksSUFBRSxLQUFFLEdBQUcsSUFBRSxJQUFHLEdBQUUsSUFBRyxRQUFPLEdBQUUsT0FBSTtBQUFFLFlBQUc7QUFBQyxlQUFFLEFBQUksR0FBRyxXQUFQLElBQWMsS0FBSyxVQUFVLElBQUUsSUFBRSxNQUFHLEtBQUssVUFBVSxJQUFFLEdBQUcsS0FBRztBQUFBLGlCQUFTLElBQU47QUFBUyxpQkFBTyxLQUFLLFVBQVU7QUFBQSxrQkFBdUU7QUFBUSxpQkFBSyxBQUFJLEdBQUcsV0FBUCxLQUFlO0FBQUMsZ0JBQUksS0FBRSxHQUFHO0FBQU0sWUFBSSxHQUFFLFdBQU4sSUFBYSxPQUFPLGVBQWUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLE1BQUksR0FBRSxHQUFHLEdBQUUsTUFBSSxHQUFFO0FBQUE7QUFBQTtBQUFJLGVBQU87QUFBQTtBQUFFLGtCQUFZLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFJO0FBQUUsWUFBRyxNQUFHLEdBQUUsQUFBVSxPQUFPLE1BQWpCLFlBQW9CLEFBQU8sT0FBUCxNQUFTO0FBQUMsZUFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU87QUFBSSxnQkFBRyxHQUFFLFFBQUs7QUFBRSxxQkFBTyxLQUFLLEdBQUcsSUFBRyxJQUFFLElBQUU7QUFBRyxjQUFHO0FBQUMsZ0JBQUcsQUFBWSxPQUFPLEdBQUUsVUFBckI7QUFBNEI7QUFBQSxtQkFBYSxJQUFOO0FBQVM7QUFBQTtBQUFPLGNBQUcsQUFBUyxHQUFFLGVBQVgsVUFBdUIsS0FBRSxHQUFFO0FBQVcsbUJBQU8sS0FBSyxHQUFHLElBQUcsSUFBRSxJQUFFO0FBQUcsY0FBRyxBQUFTLEdBQUUsZUFBWCxVQUF1QixLQUFFLElBQUUsR0FBRTtBQUFXLG1CQUFPLEtBQUssR0FBRyxJQUFHLElBQUUsSUFBRTtBQUFHLGNBQUcsR0FBRSxLQUFLLEtBQUcsTUFBTSxRQUFRO0FBQUcsaUJBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPO0FBQUksaUJBQUcsR0FBRSxLQUFHLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFBLGVBQU87QUFBQyxnQkFBSSxLQUFFLElBQUcsS0FBRSxPQUFPLEtBQUssSUFBRyxLQUFLO0FBQUksaUJBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLE1BQUk7QUFBQyxrQkFBSSxLQUFFLEdBQUU7QUFBRyxpQkFBRyxHQUFFLEtBQUcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEtBQUcsR0FBRSxNQUFHLEdBQUU7QUFBQTtBQUFHLGdCQUFHLEFBQVMsT0FBVDtBQUFXLHFCQUFPO0FBQUUsZUFBRyxLQUFLLENBQUMsSUFBRSxJQUFFLE1BQUksR0FBRSxNQUFHO0FBQUE7QUFBRSxhQUFFO0FBQUE7QUFBQTtBQUFPLGtCQUFZLElBQUU7QUFBQyxlQUFPLEtBQUUsQUFBUyxPQUFULFNBQVcsS0FBRSxTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPO0FBQUEsV0FBRyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUcsR0FBRyxTQUFPO0FBQUUscUJBQVEsS0FBRSxHQUFFLEtBQUUsR0FBRyxRQUFPLE1BQUk7QUFBQyxrQkFBSSxLQUFFLEdBQUc7QUFBRyxrQkFBRyxHQUFFLE9BQUssTUFBRyxHQUFFLE9BQUssSUFBRTtBQUFDLHFCQUFFLEdBQUUsSUFBRyxHQUFHLE9BQU8sSUFBRTtBQUFHO0FBQUE7QUFBQTtBQUFPLGlCQUFPLEdBQUUsS0FBSyxNQUFLLElBQUU7QUFBQTtBQUFBO0FBQUksVUFBSSxLQUFHLE9BQU8sVUFBVSxTQUFRLEtBQUcsUUFBTyxLQUFHLFdBQVUsS0FBRyxFQUFDLFNBQVEsSUFBRyxZQUFXLEVBQUMsU0FBUSxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUcsS0FBSyxJQUFFLElBQUc7QUFBQSxTQUFNLFNBQVEsU0FBUyxJQUFFO0FBQUMsZUFBTyxPQUFPO0FBQUEsV0FBSyxTQUFRLFdBQVUsU0FBUSxNQUFJLEtBQUcsSUFBRyxLQUFHLE9BQU8sVUFBVSxnQkFBZSxLQUFHLE1BQU0sU0FBUSxLQUFHLFdBQVU7QUFBQyxpQkFBUSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsS0FBSSxFQUFFO0FBQUUsYUFBRSxLQUFLLE1BQU0sT0FBRSxLQUFHLE1BQUksTUFBSSxHQUFFLFNBQVMsS0FBSztBQUFlLGVBQU87QUFBQSxXQUFLLEtBQUcsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBUSxLQUFFLE1BQUcsR0FBRSxlQUFhLE9BQU8sT0FBTyxRQUFNLElBQUcsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUU7QUFBRSxVQUFTLEdBQUUsUUFBWCxVQUFnQixJQUFFLE1BQUcsR0FBRTtBQUFJLGVBQU87QUFBQSxTQUFHLEtBQUcsRUFBQyxlQUFjLElBQUcsUUFBTyxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sT0FBTyxLQUFLLElBQUcsT0FBUSxTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPLEdBQUUsTUFBRyxHQUFFLEtBQUc7QUFBQSxXQUFJO0FBQUEsU0FBSSxTQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBTSxHQUFHLE9BQU8sSUFBRTtBQUFBLFNBQUksU0FBUSxTQUFTLElBQUU7QUFBQyxpQkFBUSxLQUFFLENBQUMsRUFBQyxLQUFJLEVBQUMsR0FBRSxNQUFHLE1BQUssUUFBTSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUU7QUFBRSxtQkFBUSxLQUFFLEdBQUUsS0FBRyxLQUFFLEdBQUUsSUFBSSxHQUFFLE9BQU0sS0FBRSxPQUFPLEtBQUssS0FBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sRUFBRSxJQUFFO0FBQUMsZ0JBQUksS0FBRSxHQUFFLEtBQUcsS0FBRSxHQUFFO0FBQUcsWUFBVSxPQUFPLE1BQWpCLFlBQW9CLEFBQU8sT0FBUCxRQUFVLEFBQUssR0FBRSxRQUFRLFFBQWYsTUFBb0IsSUFBRSxLQUFLLEVBQUMsS0FBSSxJQUFFLE1BQUssT0FBSSxHQUFFLEtBQUs7QUFBQTtBQUFJLGVBQU8sU0FBUyxJQUFFO0FBQUMsaUJBQUssR0FBRSxTQUFPLEtBQUc7QUFBQyxnQkFBSSxLQUFFLEdBQUUsT0FBTSxLQUFFLEdBQUUsSUFBSSxHQUFFO0FBQU0sZ0JBQUcsR0FBRyxLQUFHO0FBQUMsdUJBQVEsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFO0FBQUUsZ0JBQVMsR0FBRSxRQUFYLFVBQWUsR0FBRSxLQUFLLEdBQUU7QUFBSSxpQkFBRSxJQUFJLEdBQUUsUUFBTTtBQUFBO0FBQUE7QUFBQSxVQUFLLEtBQUc7QUFBQSxTQUFHLFFBQU8sU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLFlBQUksS0FBRSxHQUFFLFFBQVEsT0FBTTtBQUFLLFlBQUcsQUFBZSxPQUFmO0FBQWlCLGlCQUFPLEdBQUUsUUFBUSxrQkFBaUI7QUFBVSxZQUFHO0FBQUMsaUJBQU8sbUJBQW1CO0FBQUEsaUJBQVMsSUFBTjtBQUFTLGlCQUFPO0FBQUE7QUFBQSxTQUFJLFFBQU8sU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFHLEFBQUksR0FBRSxXQUFOO0FBQWEsaUJBQU87QUFBRSxZQUFJLEtBQUU7QUFBRSxZQUFHLEFBQVUsT0FBTyxNQUFqQixXQUFtQixLQUFFLE9BQU8sVUFBVSxTQUFTLEtBQUssTUFBRyxBQUFVLE9BQU8sTUFBakIsWUFBcUIsTUFBRSxPQUFPLE1BQUksQUFBZSxPQUFmO0FBQWlCLGlCQUFPLE9BQU8sSUFBRyxRQUFRLG1CQUFtQixTQUFTLElBQUU7QUFBQyxtQkFBTSxXQUFTLFNBQVMsR0FBRSxNQUFNLElBQUcsTUFBSTtBQUFBO0FBQVMsaUJBQVEsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRSxXQUFXO0FBQUcsVUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBTSxPQUFOLE9BQVMsTUFBRyxNQUFJLE1BQUcsTUFBSSxNQUFHLE1BQUksTUFBRyxNQUFJLE1BQUcsTUFBSSxNQUFHLE9BQUssT0FBSSxHQUFHLFdBQVUsQ0FBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsTUFBRyxHQUFFLE9BQU8sTUFBRyxLQUFFLE1BQUksTUFBRyxHQUFHLE1BQUcsS0FBRSxPQUFLLE1BQUcsR0FBRyxNQUFJLE1BQUcsS0FBRyxHQUFHLE1BQUksS0FBRyxNQUFHLEtBQUUsU0FBTyxNQUFHLFFBQU0sTUFBRyxHQUFHLE1BQUksTUFBRyxNQUFJLEdBQUcsTUFBSSxNQUFHLElBQUUsTUFBSSxHQUFHLE1BQUksS0FBRyxNQUFJLE9BQUcsR0FBRSxLQUFFLFFBQVEsU0FBSyxPQUFJLEtBQUcsT0FBSyxHQUFFLFdBQVcsTUFBSSxNQUFHLEdBQUcsTUFBSSxNQUFHLE1BQUksR0FBRyxNQUFJLE1BQUcsS0FBRyxNQUFJLEdBQUcsTUFBSSxNQUFHLElBQUUsTUFBSSxHQUFHLE1BQUksS0FBRztBQUFBO0FBQUksZUFBTztBQUFBLFNBQUcsVUFBUyxTQUFTLElBQUU7QUFBQyxlQUFNLENBQUUsRUFBQyxNQUFHLEFBQVUsT0FBTyxNQUFqQixhQUFxQixDQUFDLENBQUUsSUFBRSxlQUFhLEdBQUUsWUFBWSxZQUFVLEdBQUUsWUFBWSxTQUFTO0FBQUEsU0FBSyxVQUFTLFNBQVMsSUFBRTtBQUFDLGVBQU0sQUFBb0IsT0FBTyxVQUFVLFNBQVMsS0FBSyxRQUFuRDtBQUFBLFNBQXVELFVBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxZQUFHLEdBQUcsS0FBRztBQUFDLG1CQUFRLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sTUFBRztBQUFFLGVBQUUsS0FBSyxHQUFFLEdBQUU7QUFBSyxpQkFBTztBQUFBO0FBQUUsZUFBTyxHQUFFO0FBQUEsU0FBSSxPQUFNLFlBQVcsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFHLENBQUM7QUFBRSxpQkFBTztBQUFFLFlBQUcsQUFBVSxPQUFPLE1BQWpCLFVBQW1CO0FBQUMsY0FBRyxHQUFHO0FBQUcsZUFBRSxLQUFLO0FBQUEsZUFBTztBQUFDLGdCQUFHLENBQUMsTUFBRyxBQUFVLE9BQU8sTUFBakI7QUFBbUIscUJBQU0sQ0FBQyxJQUFFO0FBQUcsWUFBQyxPQUFJLElBQUUsZ0JBQWMsR0FBRSxvQkFBa0IsQ0FBQyxHQUFHLEtBQUssT0FBTyxXQUFVLFFBQU0sSUFBRSxNQUFHO0FBQUE7QUFBSSxpQkFBTztBQUFBO0FBQUUsWUFBRyxDQUFDLE1BQUcsQUFBVSxPQUFPLE1BQWpCO0FBQW1CLGlCQUFNLENBQUMsSUFBRyxPQUFPO0FBQUcsWUFBSSxLQUFFO0FBQUUsZUFBTyxHQUFHLE9BQUksQ0FBQyxHQUFHLE9BQUssTUFBRSxHQUFHLElBQUUsTUFBSSxHQUFHLE9BQUksR0FBRyxNQUFJLElBQUUsUUFBUyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUcsR0FBRyxLQUFLLElBQUUsS0FBRztBQUFDLGdCQUFJLEtBQUUsR0FBRTtBQUFHLGtCQUFHLEFBQVUsT0FBTyxNQUFqQixZQUFvQixNQUFHLEFBQVUsT0FBTyxNQUFqQixXQUFtQixHQUFFLE1BQUcsR0FBRSxJQUFFLElBQUUsTUFBRyxHQUFFLEtBQUs7QUFBQTtBQUFRLGVBQUUsTUFBRztBQUFBLFlBQUssTUFBRyxPQUFPLEtBQUssSUFBRyxPQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLEdBQUU7QUFBRyxpQkFBTyxHQUFHLEtBQUssSUFBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLEdBQUUsS0FBRyxJQUFFLE1BQUcsR0FBRSxNQUFHLElBQUU7QUFBQSxXQUFJO0FBQUEsV0FBSyxLQUFHLElBQUcsS0FBRyxJQUFHLEtBQUcsT0FBTyxVQUFVLGdCQUFlLEtBQUcsRUFBQyxVQUFTLFNBQVMsSUFBRTtBQUFDLGVBQU8sS0FBRTtBQUFBLFNBQU0sT0FBTSxTQUFRLFNBQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFPLEtBQUUsTUFBSSxLQUFFO0FBQUEsU0FBSyxRQUFPLFNBQVMsSUFBRTtBQUFDLGVBQU87QUFBQSxXQUFJLEtBQUcsTUFBTSxTQUFRLEtBQUcsT0FBTyxVQUFVLE9BQU0sS0FBRyxNQUFNLFVBQVUsTUFBSyxLQUFHLFNBQVMsSUFBRSxJQUFFO0FBQUMsV0FBRyxNQUFNLElBQUUsR0FBRyxNQUFHLEtBQUUsQ0FBQztBQUFBLFNBQUssS0FBRyxLQUFLLFVBQVUsYUFBWSxLQUFHLEdBQUcsU0FBUSxLQUFHLEVBQUMsZ0JBQWUsT0FBRyxXQUFVLE9BQUcsU0FBUSxTQUFRLGlCQUFnQixPQUFHLFdBQVUsS0FBSSxRQUFPLE1BQUcsU0FBUSxHQUFHLFFBQU8sa0JBQWlCLE9BQUcsUUFBTyxJQUFHLFdBQVUsR0FBRyxXQUFXLEtBQUksU0FBUSxPQUFHLGVBQWMsU0FBUyxJQUFFO0FBQUMsZUFBTyxHQUFHLEtBQUs7QUFBQSxTQUFJLFdBQVUsT0FBRyxvQkFBbUIsU0FBSSxLQUFHLFlBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsWUFBSSxJQUFFLEtBQUU7QUFBRSxZQUFHLEFBQVksT0FBTyxNQUFuQixhQUFxQixLQUFFLEdBQUUsSUFBRSxNQUFHLGNBQWEsT0FBSyxLQUFFLEdBQUUsTUFBRyxBQUFVLE9BQVYsV0FBYSxHQUFHLE9BQUssTUFBRSxHQUFHLFNBQVMsSUFBRyxTQUFTLElBQUU7QUFBQyxpQkFBTyxjQUFhLE9BQUssR0FBRSxNQUFHO0FBQUEsYUFBTSxBQUFPLE9BQVAsTUFBUztBQUFDLGNBQUc7QUFBRSxtQkFBTyxNQUFHLENBQUMsS0FBRSxHQUFFLElBQUUsR0FBRyxTQUFRLElBQUUsT0FBTSxNQUFHO0FBQUUsZUFBRTtBQUFBO0FBQUcsWUFBRyxBQUFVLE9BQU8sTUFBRSxPQUFuQixZQUF1QixBQUFVLE9BQU8sTUFBakIsWUFBb0IsQUFBVyxPQUFPLE1BQWxCLGFBQXFCLEFBQVUsT0FBTyxNQUFqQixZQUFvQixBQUFVLE9BQU8sTUFBakIsWUFBb0IsR0FBRyxTQUFTLEtBQUc7QUFBQyxjQUFHLElBQUU7QUFBQyxnQkFBSSxLQUFFLEtBQUUsS0FBRSxHQUFFLElBQUUsR0FBRyxTQUFRLElBQUUsT0FBTTtBQUFHLGdCQUFHLEFBQVUsT0FBVixXQUFhLElBQUU7QUFBQyx1QkFBUSxLQUFFLEdBQUcsS0FBSyxPQUFPLEtBQUcsTUFBSyxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUU7QUFBRSxzQkFBSSxDQUFJLE9BQUosSUFBTSxLQUFHLE9BQUssR0FBRSxHQUFFLEdBQUUsS0FBRyxHQUFHLFNBQVEsSUFBRSxTQUFRO0FBQUkscUJBQU0sQ0FBQyxHQUFFLE1BQUcsTUFBSTtBQUFBO0FBQUcsbUJBQU0sQ0FBQyxHQUFFLE1BQUcsTUFBSSxHQUFFLEdBQUUsSUFBRSxHQUFHLFNBQVEsSUFBRSxTQUFRO0FBQUE7QUFBSyxpQkFBTSxDQUFDLEdBQUUsTUFBRyxNQUFJLEdBQUUsT0FBTztBQUFBO0FBQUssWUFBSSxJQUFFLEtBQUU7QUFBRyxZQUFHLEFBQVMsT0FBVDtBQUFXLGlCQUFPO0FBQUUsWUFBRyxBQUFVLE9BQVYsV0FBYSxHQUFHO0FBQUcsZUFBRSxDQUFDLEVBQUMsT0FBTSxHQUFFLFNBQU8sSUFBRSxHQUFFLEtBQUssUUFBTSxPQUFLO0FBQUEsaUJBQWlCLEdBQUc7QUFBRyxlQUFFO0FBQUEsYUFBTTtBQUFDLGNBQUksS0FBRSxPQUFPLEtBQUs7QUFBRyxlQUFFLEtBQUUsR0FBRSxLQUFLLE1BQUc7QUFBQTtBQUFFLGlCQUFRLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRSxLQUFHLEtBQUUsQUFBVSxPQUFPLE1BQWpCLFlBQW9CLEFBQVMsR0FBRSxVQUFYLFNBQWlCLEdBQUUsUUFBTSxHQUFFO0FBQUcsY0FBRyxDQUFDLE1BQUcsQUFBTyxPQUFQLE1BQVM7QUFBQyxnQkFBSSxLQUFFLEdBQUcsTUFBRyxBQUFZLE9BQU8sTUFBbkIsYUFBcUIsR0FBRSxJQUFFLE1BQUcsS0FBRSxLQUFHLE1BQUUsTUFBSSxLQUFFLE1BQUksS0FBRTtBQUFLLGVBQUcsSUFBRSxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFBO0FBQUssZUFBTztBQUFBLFNBQUcsS0FBRyxJQUFHLEtBQUcsT0FBTyxVQUFVLGdCQUFlLEtBQUcsTUFBTSxTQUFRLEtBQUcsRUFBQyxXQUFVLE9BQUcsaUJBQWdCLE9BQUcsWUFBVyxJQUFHLFNBQVEsU0FBUSxpQkFBZ0IsT0FBRyxPQUFNLE9BQUcsU0FBUSxHQUFHLFFBQU8sV0FBVSxLQUFJLE9BQU0sR0FBRSxtQkFBa0IsT0FBRywwQkFBeUIsT0FBRyxnQkFBZSxLQUFJLGFBQVksTUFBRyxjQUFhLE9BQUcsb0JBQW1CLFNBQUksS0FBRyxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUUsUUFBUSxhQUFhLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sT0FBTyxhQUFhLFNBQVMsSUFBRTtBQUFBO0FBQUEsU0FBUyxLQUFHLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBTyxNQUFHLEFBQVUsT0FBTyxNQUFqQixZQUFvQixHQUFFLFNBQU8sR0FBRSxRQUFRLE9BQUssS0FBRyxHQUFFLE1BQU0sT0FBSztBQUFBLFNBQUcsS0FBRyxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFHLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRSxZQUFVLEdBQUUsUUFBUSxlQUFjLFVBQVEsSUFBRSxLQUFFLGlCQUFnQixLQUFFLEdBQUUsUUFBTSxLQUFHLGVBQWUsS0FBSyxLQUFHLEtBQUUsS0FBRSxHQUFFLE1BQU0sR0FBRSxHQUFFLFNBQU8sSUFBRSxLQUFFO0FBQUcsY0FBRyxJQUFFO0FBQUMsZ0JBQUcsQ0FBQyxHQUFFLGdCQUFjLEdBQUcsS0FBSyxPQUFPLFdBQVUsT0FBSSxDQUFDLEdBQUU7QUFBZ0I7QUFBTyxlQUFFLEtBQUs7QUFBQTtBQUFHLG1CQUFRLEtBQUUsR0FBRSxHQUFFLFFBQU0sS0FBRyxBQUFRLE1BQUUsR0FBRSxLQUFLLFNBQWpCLFFBQXNCLEtBQUUsR0FBRSxTQUFPO0FBQUMsZ0JBQUcsTUFBRyxHQUFFLENBQUMsR0FBRSxnQkFBYyxHQUFHLEtBQUssT0FBTyxXQUFVLEdBQUUsR0FBRyxNQUFNLEdBQUUsUUFBTSxDQUFDLEdBQUU7QUFBZ0I7QUFBTyxlQUFFLEtBQUssR0FBRTtBQUFBO0FBQUksaUJBQU8sTUFBRyxHQUFFLEtBQUssTUFBSSxHQUFFLE1BQU0sR0FBRSxTQUFPLE1BQUssU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMscUJBQVEsS0FBRSxLQUFFLEtBQUUsR0FBRyxJQUFFLEtBQUcsS0FBRSxHQUFFLFNBQU8sR0FBRSxNQUFHLEdBQUUsRUFBRSxJQUFFO0FBQUMsa0JBQUksSUFBRSxLQUFFLEdBQUU7QUFBRyxrQkFBRyxBQUFPLE9BQVAsUUFBVSxHQUFFO0FBQVkscUJBQUUsR0FBRyxPQUFPO0FBQUEsbUJBQU87QUFBQyxxQkFBRSxHQUFFLGVBQWEsT0FBTyxPQUFPLFFBQU07QUFBRyxvQkFBSSxLQUFFLEFBQU0sR0FBRSxPQUFPLE9BQWYsT0FBbUIsQUFBTSxHQUFFLE9BQU8sR0FBRSxTQUFPLE9BQXhCLE1BQTJCLEdBQUUsTUFBTSxHQUFFLE1BQUksSUFBRSxLQUFFLFNBQVMsSUFBRTtBQUFJLG1CQUFFLGVBQWEsQUFBSyxPQUFMLEtBQU8sQ0FBQyxNQUFNLE9BQUksT0FBSSxNQUFHLE9BQU8sUUFBSyxNQUFHLE1BQUcsS0FBRyxHQUFFLGVBQWEsTUFBRyxHQUFFLGFBQVksTUFBRSxJQUFJLE1BQUcsS0FBRSxBQUFjLE9BQWQsZUFBa0IsSUFBRSxNQUFHLE1BQUcsS0FBRSxFQUFDLEdBQUU7QUFBQTtBQUFHLG1CQUFFO0FBQUE7QUFBRSxtQkFBTztBQUFBLFlBQUcsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFBLFNBQUssS0FBRyxFQUFDLFNBQVEsSUFBRyxPQUFNLFNBQVMsSUFBRSxJQUFFO0FBQUMsWUFBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLGNBQUcsQ0FBQztBQUFFLG1CQUFPO0FBQUcsY0FBRyxBQUFPLEdBQUUsWUFBVCxRQUFrQixBQUFTLEdBQUUsWUFBWCxVQUFvQixBQUFZLE9BQU8sR0FBRSxXQUFyQjtBQUE2QixrQkFBTSxJQUFJLFVBQVU7QUFBaUMsY0FBRyxBQUFTLEdBQUUsWUFBWCxVQUFvQixBQUFVLEdBQUUsWUFBWixXQUFxQixBQUFlLEdBQUUsWUFBakI7QUFBeUIsa0JBQU0sSUFBSSxVQUFVO0FBQXFFLGNBQUksS0FBRSxBQUFTLEdBQUUsWUFBWCxTQUFtQixHQUFHLFVBQVEsR0FBRTtBQUFRLGlCQUFNLEVBQUMsV0FBVSxBQUFTLEdBQUUsY0FBWCxTQUFxQixHQUFHLFlBQVUsQ0FBQyxDQUFDLEdBQUUsV0FBVSxpQkFBZ0IsQUFBVyxPQUFPLEdBQUUsbUJBQXBCLFlBQW9DLEdBQUUsa0JBQWdCLEdBQUcsaUJBQWdCLFlBQVcsQUFBVSxPQUFPLEdBQUUsY0FBbkIsV0FBOEIsR0FBRSxhQUFXLEdBQUcsWUFBVyxTQUFRLElBQUUsaUJBQWdCLEFBQVcsT0FBTyxHQUFFLG1CQUFwQixZQUFvQyxHQUFFLGtCQUFnQixHQUFHLGlCQUFnQixPQUFNLEFBQVcsT0FBTyxHQUFFLFNBQXBCLFlBQTBCLEdBQUUsUUFBTSxHQUFHLE9BQU0sU0FBUSxBQUFZLE9BQU8sR0FBRSxXQUFyQixhQUE2QixHQUFFLFVBQVEsR0FBRyxTQUFRLFdBQVUsQUFBVSxPQUFPLEdBQUUsYUFBbkIsWUFBOEIsR0FBRyxTQUFTLEdBQUUsYUFBVyxHQUFFLFlBQVUsR0FBRyxXQUFVLE9BQU0sQUFBVSxPQUFPLEdBQUUsU0FBbkIsWUFBMEIsQUFBSyxHQUFFLFVBQVAsUUFBYSxDQUFDLEdBQUUsUUFBTSxHQUFHLE9BQU0sbUJBQWtCLEFBQUssR0FBRSxzQkFBUCxNQUF5QiwwQkFBeUIsQUFBVyxPQUFPLEdBQUUsNEJBQXBCLFlBQTZDLEdBQUUsMkJBQXlCLEdBQUcsMEJBQXlCLGdCQUFlLEFBQVUsT0FBTyxHQUFFLGtCQUFuQixXQUFrQyxHQUFFLGlCQUFlLEdBQUcsZ0JBQWUsYUFBWSxBQUFLLEdBQUUsZ0JBQVAsT0FBbUIsY0FBYSxBQUFXLE9BQU8sR0FBRSxnQkFBcEIsWUFBaUMsR0FBRSxlQUFhLEdBQUcsY0FBYSxvQkFBbUIsQUFBVyxPQUFPLEdBQUUsc0JBQXBCLFlBQXVDLEdBQUUscUJBQW1CLEdBQUc7QUFBQSxVQUFxQjtBQUFHLFlBQUcsQUFBSyxPQUFMLE1BQVEsQUFBTSxNQUFOO0FBQVEsaUJBQU8sR0FBRSxlQUFhLE9BQU8sT0FBTyxRQUFNO0FBQUcsaUJBQVEsS0FBRSxBQUFVLE9BQU8sTUFBakIsV0FBbUIsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxvQkFBa0IsR0FBRSxRQUFRLE9BQU0sTUFBSSxJQUFFLEtBQUUsR0FBRSxtQkFBaUIsSUFBRSxJQUFFLFNBQU8sR0FBRSxnQkFBZSxLQUFFLEdBQUUsTUFBTSxHQUFFLFdBQVUsS0FBRyxLQUFFLElBQUcsS0FBRSxHQUFFO0FBQVEsY0FBRyxHQUFFO0FBQWdCLGlCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFO0FBQUUsY0FBSSxHQUFFLElBQUcsUUFBUSxhQUFqQixLQUE0QixDQUFtQixHQUFFLFFBQXJCLG1CQUF3QixLQUFFLFVBQVEsQUFBd0IsR0FBRSxRQUExQix5QkFBK0IsTUFBRSxlQUFjLEtBQUUsSUFBRSxLQUFFLEdBQUU7QUFBUSxlQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFO0FBQUUsZ0JBQUcsT0FBSSxJQUFFO0FBQUMsa0JBQUksSUFBRSxJQUFFLEtBQUUsR0FBRSxLQUFHLEtBQUUsR0FBRSxRQUFRLE9BQU0sS0FBRSxBQUFLLE9BQUwsS0FBTyxHQUFFLFFBQVEsT0FBSyxLQUFFO0FBQUUsY0FBSyxPQUFMLEtBQVEsTUFBRSxHQUFFLFFBQVEsSUFBRSxHQUFHLFNBQVEsSUFBRSxRQUFPLEtBQUUsR0FBRSxxQkFBbUIsT0FBSyxNQUFLLE1BQUUsR0FBRSxRQUFRLEdBQUUsTUFBTSxHQUFFLEtBQUcsR0FBRyxTQUFRLElBQUUsUUFBTyxLQUFFLEdBQUcsU0FBUyxHQUFHLEdBQUUsTUFBTSxLQUFFLElBQUcsS0FBSSxTQUFTLElBQUU7QUFBQyx1QkFBTyxHQUFFLFFBQVEsSUFBRSxHQUFHLFNBQVEsSUFBRTtBQUFBLG1CQUFhLE1BQUcsR0FBRSw0QkFBMEIsQUFBZSxPQUFmLGdCQUFtQixNQUFFLEdBQUcsTUFBSSxHQUFFLFFBQVEsU0FBTyxNQUFLLE1BQUUsR0FBRyxNQUFHLENBQUMsTUFBRyxLQUFHLEdBQUcsS0FBSyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUcsUUFBUSxHQUFFLEtBQUcsTUFBRyxHQUFFLE1BQUc7QUFBQTtBQUFFLGlCQUFPO0FBQUEsVUFBRyxJQUFFLE1BQUcsSUFBRSxLQUFFLEdBQUUsZUFBYSxPQUFPLE9BQU8sUUFBTSxJQUFHLEtBQUUsT0FBTyxLQUFLLEtBQUcsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLEtBQUcsS0FBRSxHQUFHLElBQUUsR0FBRSxLQUFHLElBQUUsQUFBVSxPQUFPLE1BQWpCO0FBQW9CLGVBQUUsR0FBRyxNQUFNLElBQUUsSUFBRTtBQUFBO0FBQUcsZUFBTyxHQUFHLFFBQVE7QUFBQSxTQUFJLFdBQVUsU0FBUyxJQUFFLElBQUU7QUFBQyxZQUFJLElBQUUsS0FBRSxJQUFFLEtBQUUsU0FBUyxJQUFFO0FBQUMsY0FBRyxDQUFDO0FBQUUsbUJBQU87QUFBRyxjQUFHLEFBQU8sR0FBRSxZQUFULFFBQWtCLEFBQVMsR0FBRSxZQUFYLFVBQW9CLEFBQVksT0FBTyxHQUFFLFdBQXJCO0FBQTZCLGtCQUFNLElBQUksVUFBVTtBQUFpQyxjQUFJLEtBQUUsR0FBRSxXQUFTLEdBQUc7QUFBUSxjQUFHLEFBQVMsR0FBRSxZQUFYLFVBQW9CLEFBQVUsR0FBRSxZQUFaLFdBQXFCLEFBQWUsR0FBRSxZQUFqQjtBQUF5QixrQkFBTSxJQUFJLFVBQVU7QUFBcUUsY0FBSSxLQUFFLEdBQUc7QUFBUSxjQUFHLEFBQVMsR0FBRSxXQUFYLFFBQWtCO0FBQUMsZ0JBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxZQUFXLEdBQUU7QUFBUSxvQkFBTSxJQUFJLFVBQVU7QUFBbUMsaUJBQUUsR0FBRTtBQUFBO0FBQU8sY0FBSSxLQUFFLEdBQUcsV0FBVyxLQUFHLEtBQUUsR0FBRztBQUFPLGlCQUFPLENBQVksT0FBTyxHQUFFLFVBQXJCLGNBQTZCLEdBQUcsR0FBRSxZQUFXLE1BQUUsR0FBRSxTQUFRLEVBQUMsZ0JBQWUsQUFBVyxPQUFPLEdBQUUsa0JBQXBCLFlBQW1DLEdBQUUsaUJBQWUsR0FBRyxnQkFBZSxXQUFVLEFBQVMsR0FBRSxjQUFYLFNBQXFCLEdBQUcsWUFBVSxDQUFDLENBQUMsR0FBRSxXQUFVLFNBQVEsSUFBRSxpQkFBZ0IsQUFBVyxPQUFPLEdBQUUsbUJBQXBCLFlBQW9DLEdBQUUsa0JBQWdCLEdBQUcsaUJBQWdCLFdBQVUsQUFBUyxHQUFFLGNBQVgsU0FBcUIsR0FBRyxZQUFVLEdBQUUsV0FBVSxRQUFPLEFBQVcsT0FBTyxHQUFFLFVBQXBCLFlBQTJCLEdBQUUsU0FBTyxHQUFHLFFBQU8sU0FBUSxBQUFZLE9BQU8sR0FBRSxXQUFyQixhQUE2QixHQUFFLFVBQVEsR0FBRyxTQUFRLGtCQUFpQixBQUFXLE9BQU8sR0FBRSxvQkFBcEIsWUFBcUMsR0FBRSxtQkFBaUIsR0FBRyxrQkFBaUIsUUFBTyxJQUFFLFFBQU8sSUFBRSxXQUFVLElBQUUsZUFBYyxBQUFZLE9BQU8sR0FBRSxpQkFBckIsYUFBbUMsR0FBRSxnQkFBYyxHQUFHLGVBQWMsV0FBVSxBQUFXLE9BQU8sR0FBRSxhQUFwQixZQUE4QixHQUFFLFlBQVUsR0FBRyxXQUFVLE1BQUssQUFBWSxPQUFPLEdBQUUsUUFBckIsYUFBMEIsR0FBRSxPQUFLLE1BQUssb0JBQW1CLEFBQVcsT0FBTyxHQUFFLHNCQUFwQixZQUF1QyxHQUFFLHFCQUFtQixHQUFHO0FBQUEsVUFBcUI7QUFBRyxRQUFZLE9BQU8sR0FBRSxVQUFyQixhQUE0QixLQUFHLElBQUUsR0FBRSxRQUFRLElBQUcsTUFBRyxHQUFHLEdBQUUsV0FBVSxNQUFFLEdBQUU7QUFBUSxZQUFJLElBQUUsS0FBRTtBQUFHLFlBQUcsQUFBVSxPQUFPLE1BQWpCLFlBQW9CLEFBQU8sT0FBUDtBQUFTLGlCQUFNO0FBQUcsYUFBRSxNQUFHLEdBQUUsZUFBZSxLQUFHLEdBQUUsY0FBWSxNQUFHLGFBQVksS0FBRSxHQUFFLFVBQVEsWUFBVSxXQUFTO0FBQVUsWUFBSSxLQUFFLEdBQUc7QUFBRyxjQUFJLE1BQUUsT0FBTyxLQUFLLE1BQUksR0FBRSxRQUFNLEdBQUUsS0FBSyxHQUFFO0FBQU0saUJBQVEsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFO0FBQUcsYUFBRSxhQUFXLEFBQU8sR0FBRSxRQUFULFFBQWEsR0FBRyxJQUFFLEdBQUcsR0FBRSxLQUFHLElBQUUsSUFBRSxHQUFFLG9CQUFtQixHQUFFLFdBQVUsR0FBRSxTQUFPLEdBQUUsVUFBUSxNQUFLLEdBQUUsUUFBTyxHQUFFLE1BQUssR0FBRSxXQUFVLEdBQUUsZUFBYyxHQUFFLFFBQU8sR0FBRSxXQUFVLEdBQUUsa0JBQWlCLEdBQUU7QUFBQTtBQUFVLFlBQUksS0FBRSxHQUFFLEtBQUssR0FBRSxZQUFXLEtBQUUsQUFBSyxHQUFFLG1CQUFQLE9BQXNCLE1BQUk7QUFBRyxlQUFPLEdBQUUsbUJBQWtCLENBQWUsR0FBRSxZQUFqQixlQUF5QixNQUFHLHlCQUF1QixNQUFHLG9CQUFtQixHQUFFLFNBQU8sSUFBRSxLQUFFLEtBQUU7QUFBQTtBQUFLLGtCQUFZLElBQUU7QUFBQyxlQUFPLEtBQUcsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLEFBQVUsT0FBTyxPQUFPLFlBQXhCLFdBQWlDLFNBQVMsSUFBRTtBQUFDLGlCQUFPLE9BQU87QUFBQSxZQUFHLFNBQVMsSUFBRTtBQUFDLGlCQUFPLE1BQUcsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLEdBQUUsZ0JBQWMsVUFBUSxPQUFJLE9BQU8sWUFBVSxXQUFTLE9BQU87QUFBQSxXQUFHLEdBQUc7QUFBQTtBQUFHLFVBQUksS0FBRyxTQUFTLElBQUU7QUFBQyxlQUFPLEFBQU8sT0FBUCxRQUFVLEFBQVcsR0FBRyxRQUFkO0FBQUE7QUFBa0Isa0JBQVksSUFBRTtBQUFDLGVBQU8sS0FBRyxBQUFZLE9BQU8sVUFBbkIsY0FBMkIsQUFBVSxPQUFPLE9BQU8sWUFBeEIsV0FBaUMsU0FBUyxJQUFFO0FBQUMsaUJBQU8sT0FBTztBQUFBLFlBQUcsU0FBUyxJQUFFO0FBQUMsaUJBQU8sTUFBRyxBQUFZLE9BQU8sVUFBbkIsY0FBMkIsR0FBRSxnQkFBYyxVQUFRLE9BQUksT0FBTyxZQUFVLFdBQVMsT0FBTztBQUFBLFdBQUcsR0FBRztBQUFBO0FBQUcsVUFBSSxLQUFHLElBQUcsS0FBRztBQUFHLGtCQUFZLElBQUU7QUFBQyxZQUFHO0FBQUUsaUJBQU8sU0FBUyxJQUFFO0FBQUMscUJBQVEsTUFBSyxHQUFHO0FBQVUscUJBQU8sVUFBVSxlQUFlLEtBQUssR0FBRyxXQUFVLE9BQUssSUFBRSxNQUFHLEdBQUcsVUFBVTtBQUFJLG1CQUFPO0FBQUEsWUFBRztBQUFBO0FBQUcsU0FBRyxVQUFVLGVBQWEsV0FBVTtBQUFDLGVBQU8sYUFBYSxLQUFLLFNBQVEsYUFBYSxLQUFLLHdCQUF1QixhQUFhLEtBQUssc0JBQXFCLE9BQU8sS0FBSyxRQUFPLE9BQU8sS0FBSyx1QkFBc0IsT0FBTyxLQUFLLHFCQUFvQjtBQUFBLFNBQU0sR0FBRyxVQUFVLFFBQU0sU0FBUyxJQUFFO0FBQUMsZUFBTyxLQUFLLFVBQVEsSUFBRTtBQUFBLFNBQU0sR0FBRyxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUMsZUFBTyxLQUFLLGdCQUFjLElBQUU7QUFBQSxTQUFNLEdBQUcsVUFBVSxZQUFVLFNBQVMsSUFBRTtBQUFDLGVBQU8sS0FBSyxjQUFZLElBQUU7QUFBQSxTQUFNLEdBQUcsVUFBVSxVQUFRLFNBQVMsSUFBRTtBQUFDLFlBQUcsQ0FBQyxNQUFHLEFBQVcsR0FBRyxRQUFkO0FBQWlCLGlCQUFPLEtBQUssV0FBUyxJQUFFLEtBQUssbUJBQWlCLEdBQUUsS0FBSyxpQkFBZSxHQUFFO0FBQUssaUJBQVEsTUFBSztBQUFFLGNBQUcsT0FBTyxVQUFVLGVBQWUsS0FBSyxJQUFFO0FBQUcsb0JBQU87QUFBQSxtQkFBTztBQUFXLHFCQUFLLFdBQVMsR0FBRTtBQUFTO0FBQUEsbUJBQVU7QUFBVyxxQkFBSyxtQkFBaUIsR0FBRTtBQUFTO0FBQUEsbUJBQVU7QUFBUyxxQkFBSyxpQkFBZSxHQUFFO0FBQU87QUFBQTtBQUFjLHdCQUFRLEtBQUssMEJBQXlCO0FBQUE7QUFBRyxlQUFPO0FBQUEsU0FBTSxHQUFHLFVBQVUsUUFBTSxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQU8sQUFBSSxVQUFVLFdBQWQsS0FBc0IsQUFBSyxPQUFMLFFBQVMsTUFBRSxJQUFHLE1BQUcsS0FBSSxNQUFFLElBQUcsS0FBSyxjQUFZLElBQUUsS0FBSyxXQUFTLEdBQUUsS0FBSyxpQkFBZSxJQUFFO0FBQUE7QUFBTSxVQUFJLEtBQUcsSUFBSSxJQUFJLENBQUMsYUFBWSxjQUFhLGNBQWEsZ0JBQWUsU0FBUSxhQUFZLGVBQWMsZUFBYyxLQUFHLElBQUksSUFBSSxDQUFDLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJO0FBQU0sU0FBRyxVQUFVLGVBQWEsU0FBUyxJQUFFLElBQUU7QUFBQyxZQUFHLENBQUMsS0FBSyxlQUFhLEtBQUssY0FBWSxLQUFLO0FBQVksaUJBQU07QUFBRyxZQUFHLEtBQUs7QUFBZSxjQUFHO0FBQUMsZ0JBQUksS0FBRSxLQUFLLGVBQWUsSUFBRTtBQUFHLGdCQUFHLEFBQUssT0FBTDtBQUFPLHFCQUFNO0FBQUcsZ0JBQUcsQUFBSyxPQUFMO0FBQU8scUJBQU07QUFBQSxtQkFBUyxJQUFOO0FBQVMsb0JBQVEsTUFBTTtBQUFBO0FBQUcsWUFBRyxNQUFHLEdBQUUsVUFBUSxHQUFHLElBQUksR0FBRTtBQUFRLGlCQUFNO0FBQUcsWUFBRyxJQUFFO0FBQUMsY0FBRyxHQUFFLFFBQU0sR0FBRyxJQUFJLEdBQUU7QUFBTSxtQkFBTTtBQUFHLGNBQUcsR0FBRSxXQUFTLEFBQWlCLEdBQUUsU0FBbkI7QUFBd0IsbUJBQU07QUFBRyxjQUFHLEdBQUU7QUFBWSxtQkFBTTtBQUFBO0FBQUcsZUFBTTtBQUFBLFNBQUksR0FBRyxVQUFVLFNBQU8sV0FBVTtBQUFDLGVBQU8sS0FBSyxnQkFBZSxLQUFLLE9BQU0sTUFBSyxNQUFJLE1BQUssS0FBSyxNQUFJLEtBQUssWUFBVyxLQUFLLFdBQVMsT0FBRyxLQUFLLFdBQVMsT0FBRyxLQUFLLGdCQUFjLE1BQUssS0FBSztBQUFBLFNBQVEsR0FBRyxVQUFVLE9BQUssU0FBUyxJQUFFLElBQUU7QUFBQyxZQUFJLEtBQUU7QUFBSyxZQUFHLENBQUMsS0FBSyxvQkFBbUI7QUFBQyxjQUFJLEtBQUU7QUFBSyxlQUFLLGNBQVksUUFBUSxLQUFLLG1JQUFrSSxLQUFLLHFCQUFtQixJQUFJLFFBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFFLEdBQUcsU0FBUyxXQUFVO0FBQUMsa0JBQUcsQ0FBRSxJQUFFLGVBQWEsR0FBRSxjQUFZLEdBQUU7QUFBVSxvQkFBRyxHQUFFLFlBQVUsR0FBRTtBQUFjLHFCQUFFLEdBQUU7QUFBQSxxQkFBbUI7QUFBQyxzQkFBSSxLQUFFLElBQUksTUFBTTtBQUFXLHFCQUFFLE9BQUssV0FBVSxHQUFFLFNBQU8sR0FBRSxRQUFPLEdBQUUsU0FBTyxHQUFFLFFBQU8sR0FBRSxNQUFJLEdBQUUsS0FBSSxHQUFFO0FBQUE7QUFBQSxnQkFBTyxHQUFFLElBQUssU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBRSxHQUFFLE1BQUcsR0FBRTtBQUFBO0FBQUE7QUFBQTtBQUFTLGVBQU8sS0FBSyxtQkFBbUIsS0FBSyxJQUFFO0FBQUEsU0FBSSxHQUFHLFVBQVUsUUFBTSxTQUFTLElBQUU7QUFBQyxlQUFPLEtBQUssS0FBSyxRQUFPO0FBQUEsU0FBSSxHQUFHLFVBQVUsTUFBSSxTQUFTLElBQUU7QUFBQyxlQUFPLEdBQUUsT0FBTTtBQUFBLFNBQU0sR0FBRyxVQUFVLEtBQUcsU0FBUyxJQUFFO0FBQUMsWUFBRyxBQUFZLE9BQU8sTUFBbkI7QUFBcUIsZ0JBQU0sSUFBSSxNQUFNO0FBQXFCLGVBQU8sS0FBSyxjQUFZLElBQUU7QUFBQSxTQUFNLEdBQUcsVUFBVSxnQkFBYyxTQUFTLElBQUU7QUFBQyxlQUFNLENBQUMsQ0FBQyxNQUFJLE1BQUssY0FBWSxLQUFLLFlBQVksTUFBRyxHQUFFLFVBQVEsT0FBSyxHQUFFLFNBQU87QUFBQSxTQUFNLEdBQUcsVUFBVSxNQUFJLFNBQVMsSUFBRTtBQUFDLGVBQU8sS0FBSyxRQUFRLEdBQUU7QUFBQSxTQUFnQixHQUFHLFVBQVUsWUFBVSxHQUFHLFVBQVUsS0FBSSxHQUFHLFVBQVUsTUFBSSxTQUFTLElBQUUsSUFBRTtBQUFDLFlBQUcsR0FBRyxLQUFHO0FBQUMsbUJBQVEsTUFBSztBQUFFLG1CQUFPLFVBQVUsZUFBZSxLQUFLLElBQUUsT0FBSSxLQUFLLElBQUksSUFBRSxHQUFFO0FBQUksaUJBQU87QUFBQTtBQUFLLGVBQU8sS0FBSyxRQUFRLEdBQUUsaUJBQWUsSUFBRSxLQUFLLE9BQU8sTUFBRyxJQUFFO0FBQUEsU0FBTSxHQUFHLFVBQVUsUUFBTSxTQUFTLElBQUU7QUFBQyxlQUFPLE9BQU8sS0FBSyxRQUFRLEdBQUUsZ0JBQWUsT0FBTyxLQUFLLE9BQU8sS0FBRztBQUFBLFNBQU0sR0FBRyxVQUFVLFFBQU0sU0FBUyxJQUFFLElBQUU7QUFBQyxZQUFHLEFBQU0sTUFBTjtBQUFRLGdCQUFNLElBQUksTUFBTTtBQUEyQyxZQUFHLEtBQUs7QUFBTSxnQkFBTSxJQUFJLE1BQU07QUFBbUcsWUFBRyxHQUFHLEtBQUc7QUFBQyxtQkFBUSxNQUFLO0FBQUUsbUJBQU8sVUFBVSxlQUFlLEtBQUssSUFBRSxPQUFJLEtBQUssTUFBTSxJQUFFLEdBQUU7QUFBSSxpQkFBTztBQUFBO0FBQUssWUFBRyxNQUFNLFFBQVEsS0FBRztBQUFDLG1CQUFRLE1BQUs7QUFBRSxtQkFBTyxVQUFVLGVBQWUsS0FBSyxJQUFFLE9BQUksS0FBSyxNQUFNLElBQUUsR0FBRTtBQUFJLGlCQUFPO0FBQUE7QUFBSyxZQUFHLEFBQU0sTUFBTjtBQUFRLGdCQUFNLElBQUksTUFBTTtBQUEwQyxlQUFNLEFBQVcsT0FBTyxNQUFsQixhQUFzQixNQUFFLE9BQU8sTUFBSSxLQUFLLGVBQWUsT0FBTyxJQUFFLEtBQUc7QUFBQSxTQUFNLEdBQUcsVUFBVSxRQUFNLFdBQVU7QUFBQyxlQUFPLEtBQUssWUFBVyxNQUFLLFdBQVMsTUFBRyxLQUFLLE9BQUssS0FBSyxJQUFJLFNBQVEsS0FBSyxPQUFLLEtBQUssSUFBSSxTQUFRLEtBQUssZ0JBQWUsS0FBSyxLQUFLLFdBQVU7QUFBQSxTQUFNLEdBQUcsVUFBVSxRQUFNLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFPLEdBQUU7QUFBQSxlQUFVO0FBQVEsaUJBQUssSUFBSSxpQkFBZ0IsU0FBUyxPQUFPLEdBQUUsR0FBRyxPQUFPLElBQUUsS0FBSyxPQUFPO0FBQU07QUFBQSxlQUFVO0FBQU8saUJBQUssV0FBUyxJQUFFLEtBQUssV0FBUztBQUFFO0FBQUEsZUFBVTtBQUFTLGlCQUFLLElBQUksaUJBQWdCLFVBQVUsT0FBTztBQUFBO0FBQUksZUFBTztBQUFBLFNBQU0sR0FBRyxVQUFVLGtCQUFnQixTQUFTLElBQUU7QUFBQyxlQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsT0FBSSxLQUFLLG1CQUFpQixJQUFFO0FBQUEsU0FBTSxHQUFHLFVBQVUsWUFBVSxTQUFTLElBQUU7QUFBQyxlQUFPLEtBQUssZ0JBQWMsSUFBRTtBQUFBLFNBQU0sR0FBRyxVQUFVLGtCQUFnQixTQUFTLElBQUU7QUFBQyxZQUFHLEFBQVUsT0FBTyxNQUFqQjtBQUFtQixnQkFBTSxJQUFJLFVBQVU7QUFBb0IsZUFBTyxLQUFLLG1CQUFpQixJQUFFO0FBQUEsU0FBTSxHQUFHLFVBQVUsU0FBTyxXQUFVO0FBQUMsZUFBTSxFQUFDLFFBQU8sS0FBSyxRQUFPLEtBQUksS0FBSyxLQUFJLE1BQUssS0FBSyxPQUFNLFNBQVEsS0FBSztBQUFBLFNBQVUsR0FBRyxVQUFVLE9BQUssU0FBUyxJQUFFO0FBQUMsWUFBSSxLQUFFLEdBQUcsS0FBRyxLQUFFLEtBQUssUUFBUTtBQUFnQixZQUFHLEtBQUs7QUFBVSxnQkFBTSxJQUFJLE1BQU07QUFBZ0gsWUFBRyxNQUFHLENBQUMsS0FBSztBQUFNLGdCQUFNLFFBQVEsTUFBRyxLQUFLLFFBQU0sS0FBRyxLQUFLLFFBQVEsT0FBSyxNQUFLLFFBQU07QUFBQSxpQkFBWSxNQUFHLEtBQUssU0FBTyxLQUFLLFFBQVEsS0FBSztBQUFPLGdCQUFNLElBQUksTUFBTTtBQUFnQyxZQUFHLE1BQUcsR0FBRyxLQUFLO0FBQU8sbUJBQVEsTUFBSztBQUFFLG1CQUFPLFVBQVUsZUFBZSxLQUFLLElBQUUsT0FBSyxNQUFLLE1BQU0sTUFBRyxHQUFFO0FBQUE7QUFBUSxVQUFVLE9BQU8sTUFBakIsV0FBb0IsT0FBRyxLQUFLLEtBQUssU0FBUyxNQUFFLEtBQUssUUFBUSxvQkFBbUIsTUFBRSxHQUFFLGNBQWMsU0FBUSxLQUFLLFFBQU0sQUFBc0MsT0FBdEMsc0NBQXdDLEtBQUssUUFBTSxHQUFHLE9BQU8sS0FBSyxPQUFNLEtBQUssT0FBTyxNQUFHLEtBQUcsTUFBSyxTQUFPLE1BQUksTUFBRyxLQUFLLFFBQU07QUFBRSxlQUFNLENBQUMsTUFBRyxLQUFLLFFBQVEsT0FBSSxNQUFHLEtBQUssS0FBSyxTQUFRO0FBQUEsU0FBTSxHQUFHLFVBQVUsWUFBVSxTQUFTLElBQUU7QUFBQyxlQUFPLEtBQUssUUFBTSxBQUFTLE9BQVQsVUFBWSxJQUFFO0FBQUEsU0FBTSxHQUFHLFVBQVUsdUJBQXFCLFdBQVU7QUFBQyxZQUFJLEtBQUUsS0FBSyxPQUFPLEtBQUs7QUFBSyxZQUFHLE1BQUksTUFBSyxPQUFNLE1BQUssSUFBSSxTQUFTLE9BQUssTUFBSSxPQUFLLEtBQUcsS0FBSyxPQUFPLFNBQU8sR0FBRSxLQUFLLE9BQU07QUFBQyxjQUFJLEtBQUUsS0FBSyxJQUFJLFFBQVE7QUFBSyxjQUFHLE1BQUcsR0FBRTtBQUFDLGdCQUFJLEtBQUUsS0FBSyxJQUFJLE1BQU0sS0FBRSxHQUFHLE1BQU07QUFBSyxZQUFZLE9BQU8sS0FBSyxTQUF4QixhQUE4QixHQUFFLEtBQUssS0FBSyxTQUFPLEdBQUUsUUFBTyxLQUFLLE1BQUksS0FBSyxJQUFJLE1BQU0sR0FBRSxNQUFHLE1BQUksR0FBRSxLQUFLO0FBQUE7QUFBQTtBQUFBLFNBQVEsR0FBRyxVQUFVLHFCQUFtQixXQUFVO0FBQUMsZ0JBQVEsS0FBSztBQUFBLFNBQWdCLEdBQUcsVUFBVSxnQkFBYyxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsWUFBRyxDQUFDLEtBQUssVUFBUztBQUFDLGNBQUksS0FBRSxJQUFJLE1BQU0sR0FBRyxPQUFPLEtBQUUsSUFBRTtBQUFnQixhQUFFLFVBQVEsSUFBRSxHQUFFLE9BQUssZ0JBQWUsR0FBRSxRQUFNLElBQUUsS0FBSyxXQUFTLE1BQUcsS0FBSyxnQkFBYyxJQUFFLEtBQUssU0FBUSxLQUFLLFNBQVM7QUFBQTtBQUFBLFNBQUssR0FBRyxVQUFVLGVBQWEsV0FBVTtBQUFDLFlBQUksS0FBRTtBQUFLLGFBQUssWUFBVSxDQUFDLEtBQUssVUFBUyxNQUFLLFNBQU8sV0FBWSxXQUFVO0FBQUMsYUFBRSxjQUFjLGVBQWMsR0FBRSxVQUFTO0FBQUEsV0FBVyxLQUFLLFlBQVcsS0FBSyxvQkFBa0IsQ0FBQyxLQUFLLHlCQUF3QixNQUFLLHdCQUFzQixXQUFZLFdBQVU7QUFBQyxhQUFFLGNBQWMsd0JBQXVCLEdBQUUsa0JBQWlCO0FBQUEsV0FBZSxLQUFLO0FBQUE7QUFBb0IsVUFBSSxLQUFHO0FBQUcsa0JBQVksSUFBRSxJQUFFO0FBQUMsWUFBSTtBQUFFLFlBQUcsQUFBYSxPQUFPLFVBQXBCLGVBQTRCLEFBQU0sR0FBRSxPQUFPLGFBQWYsTUFBeUI7QUFBQyxjQUFHLE1BQU0sUUFBUSxPQUFLLE1BQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBRyxDQUFDO0FBQUU7QUFBTyxnQkFBRyxBQUFVLE9BQU8sTUFBakI7QUFBbUIscUJBQU8sR0FBRyxJQUFFO0FBQUcsZ0JBQUksS0FBRSxPQUFPLFVBQVUsU0FBUyxLQUFLLElBQUcsTUFBTSxHQUFFO0FBQUksWUFBVyxPQUFYLFlBQWMsR0FBRSxlQUFjLE1BQUUsR0FBRSxZQUFZO0FBQU0sZ0JBQUcsQUFBUSxPQUFSLFNBQVcsQUFBUSxPQUFSO0FBQVUscUJBQU8sTUFBTSxLQUFLO0FBQUcsZ0JBQUcsQUFBYyxPQUFkLGVBQWlCLDJDQUEyQyxLQUFLO0FBQUcscUJBQU8sR0FBRyxJQUFFO0FBQUEsWUFBSSxRQUFLLE1BQUcsTUFBRyxBQUFVLE9BQU8sR0FBRSxVQUFuQixVQUEwQjtBQUFDLGtCQUFJLE1BQUU7QUFBRyxnQkFBSSxLQUFFLEdBQUUsS0FBRSxXQUFVO0FBQUE7QUFBRyxtQkFBTSxFQUFDLEdBQUUsSUFBRSxHQUFFLFdBQVU7QUFBQyxxQkFBTyxNQUFHLEdBQUUsU0FBTyxFQUFDLE1BQUssU0FBSSxFQUFDLE1BQUssT0FBRyxPQUFNLEdBQUU7QUFBQSxlQUFPLEdBQUUsU0FBUyxJQUFFO0FBQUMsb0JBQU07QUFBQSxlQUFHLEdBQUU7QUFBQTtBQUFHLGdCQUFNLElBQUksVUFBVTtBQUFBO0FBQXlJLFlBQUksSUFBRSxLQUFFLE1BQUcsS0FBRTtBQUFHLGVBQU0sRUFBQyxHQUFFLFdBQVU7QUFBQyxlQUFFLEdBQUUsT0FBTztBQUFBLFdBQWEsR0FBRSxXQUFVO0FBQUMsY0FBSSxLQUFFLEdBQUU7QUFBTyxpQkFBTyxLQUFFLEdBQUUsTUFBSztBQUFBLFdBQUcsR0FBRSxTQUFTLElBQUU7QUFBQyxlQUFFLE1BQUcsS0FBRTtBQUFBLFdBQUcsR0FBRSxXQUFVO0FBQUMsY0FBRztBQUFDLGtCQUFHLEFBQU0sR0FBRSxVQUFSLFFBQWdCLEdBQUU7QUFBQSxvQkFBUztBQUFRLGdCQUFHO0FBQUUsb0JBQU07QUFBQTtBQUFBO0FBQUE7QUFBSyxrQkFBWSxJQUFFLElBQUU7QUFBQyxRQUFDLENBQU0sTUFBTixRQUFTLEtBQUUsR0FBRSxXQUFVLE1BQUUsR0FBRTtBQUFRLGlCQUFRLEtBQUUsR0FBRSxLQUFFLElBQUksTUFBTSxLQUFHLEtBQUUsSUFBRTtBQUFJLGFBQUUsTUFBRyxHQUFFO0FBQUcsZUFBTztBQUFBO0FBQUUsU0FBRyxPQUFLLFNBQVMsSUFBRTtBQUFDLGVBQU8sR0FBRSxNQUFNLFNBQVM7QUFBQSxTQUFTLEdBQUcsU0FBTyxTQUFTLElBQUU7QUFBQyxZQUFJLElBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRyxHQUFFLE1BQU07QUFBVSxZQUFHO0FBQUMsZUFBSSxHQUFFLEtBQUksQ0FBRSxNQUFFLEdBQUUsS0FBSyxRQUFNO0FBQUMsZ0JBQUksS0FBRSxHQUFFLE1BQU0sTUFBTSxVQUFTLEtBQUUsR0FBRSxTQUFRLEtBQUUsR0FBRTtBQUFRLGtCQUFHLE1BQUksSUFBRSxNQUFHO0FBQUE7QUFBQSxpQkFBVSxJQUFOO0FBQVMsYUFBRSxFQUFFO0FBQUEsa0JBQUc7QUFBUSxhQUFFO0FBQUE7QUFBSSxlQUFPO0FBQUEsU0FBRyxHQUFHLGFBQVcsU0FBUyxJQUFFO0FBQUMsWUFBSSxJQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUcsR0FBRSxNQUFNO0FBQVUsWUFBRztBQUFDLGVBQUksR0FBRSxLQUFJLENBQUUsTUFBRSxHQUFFLEtBQUssUUFBTTtBQUFDLGdCQUFJLEtBQUUsR0FBRSxNQUFNLE1BQU0sVUFBUyxLQUFFLEdBQUUsR0FBRyxNQUFNLEdBQUU7QUFBSSxlQUFFLEdBQUUsR0FBRyxNQUFNLFNBQVMsR0FBRyxNQUFNLEdBQUUsT0FBSztBQUFBO0FBQUEsaUJBQVMsSUFBTjtBQUFTLGFBQUUsRUFBRTtBQUFBLGtCQUFHO0FBQVEsYUFBRTtBQUFBO0FBQUksZUFBTztBQUFBLFNBQUcsR0FBRyxjQUFZLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBTyxPQUFPLEdBQUUsaUJBQWdCLE9BQU8sR0FBRSxtQkFBa0IsT0FBTyxHQUFFLHNCQUFxQixPQUFPLEdBQUUsTUFBSyxNQUFJLFFBQU8sR0FBRSxlQUFjLE9BQU8sR0FBRSxTQUFRO0FBQUE7QUFBRyxVQUFJLEtBQUcsSUFBRyxLQUFHO0FBQUcsa0JBQVksSUFBRTtBQUFDLFlBQUc7QUFBRSxpQkFBTyxTQUFTLElBQUU7QUFBQyxxQkFBUSxNQUFLLEdBQUc7QUFBVSxxQkFBTyxVQUFVLGVBQWUsS0FBSyxHQUFHLFdBQVUsT0FBSyxJQUFFLE1BQUcsR0FBRyxVQUFVO0FBQUksbUJBQU87QUFBQSxZQUFHO0FBQUE7QUFBRyxrQkFBWSxJQUFFO0FBQUMsZUFBTyxTQUFTLElBQUU7QUFBQyxjQUFHLE1BQU0sUUFBUTtBQUFHLG1CQUFPLEdBQUc7QUFBQSxVQUFJLE9BQUksU0FBUyxJQUFFO0FBQUMsY0FBRyxBQUFhLE9BQU8sVUFBcEIsZUFBNEIsT0FBTyxZQUFZLE9BQU87QUFBRyxtQkFBTyxNQUFNLEtBQUs7QUFBQSxVQUFJLE9BQUksU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFHLENBQUM7QUFBRTtBQUFPLGNBQUcsQUFBVSxPQUFPLE1BQWpCO0FBQW1CLG1CQUFPLEdBQUcsSUFBRTtBQUFHLGNBQUksS0FBRSxPQUFPLFVBQVUsU0FBUyxLQUFLLElBQUcsTUFBTSxHQUFFO0FBQUksVUFBVyxPQUFYLFlBQWMsR0FBRSxlQUFjLE1BQUUsR0FBRSxZQUFZO0FBQU0sY0FBRyxBQUFRLE9BQVIsU0FBVyxBQUFRLE9BQVI7QUFBVSxtQkFBTyxNQUFNLEtBQUs7QUFBRyxjQUFHLEFBQWMsT0FBZCxlQUFpQiwyQ0FBMkMsS0FBSztBQUFHLG1CQUFPLEdBQUcsSUFBRTtBQUFBLFVBQUksT0FBSSxXQUFVO0FBQUMsZ0JBQU0sSUFBSSxVQUFVO0FBQUE7QUFBQTtBQUEySSxrQkFBWSxJQUFFLElBQUU7QUFBQyxRQUFDLENBQU0sTUFBTixRQUFTLEtBQUUsR0FBRSxXQUFVLE1BQUUsR0FBRTtBQUFRLGlCQUFRLEtBQUUsR0FBRSxLQUFFLElBQUksTUFBTSxLQUFHLEtBQUUsSUFBRTtBQUFJLGFBQUUsTUFBRyxHQUFFO0FBQUcsZUFBTztBQUFBO0FBQUUsb0JBQWE7QUFBQyxhQUFLLFlBQVU7QUFBQTtBQUFHLFNBQUcsVUFBVSxNQUFJLFNBQVMsSUFBRTtBQUFDLGVBQU8sS0FBSyxPQUFPLEdBQUU7QUFBQSxTQUFnQixHQUFHLFVBQVUsdUJBQXFCLFNBQVMsSUFBRTtBQUFDLFlBQUksS0FBRSxHQUFFLG1CQUFpQjtBQUFHLGFBQUssT0FBSyxHQUFHLEtBQUs7QUFBRyxZQUFJLEtBQUUsR0FBRyxPQUFPO0FBQUcsaUJBQVEsTUFBSztBQUFFLGlCQUFPLFVBQVUsZUFBZSxLQUFLLElBQUUsT0FBSyxNQUFLLE1BQUcsR0FBRTtBQUFJLGFBQUssUUFBTTtBQUFHLFlBQUc7QUFBQyxhQUFFLFFBQU8sTUFBSyxRQUFNLEdBQUcsV0FBVyxHQUFFO0FBQUEsaUJBQWEsSUFBTjtBQUFBO0FBQUEsU0FBWSxHQUFHLFVBQVUsdUJBQXFCLFNBQVMsSUFBRTtBQUFDLFlBQUksS0FBRSxLQUFFLE1BQUk7QUFBRSxhQUFLLGFBQVcsSUFBRSxLQUFLLFNBQU8sS0FBSyxZQUFXLEtBQUssYUFBVyxJQUFFLEtBQUssT0FBSyxBQUFJLE9BQUosR0FBTSxLQUFLLEtBQUcsQUFBSSxPQUFKLEdBQU0sS0FBSyxXQUFTLEFBQUksT0FBSixHQUFNLEtBQUssY0FBWSxBQUFJLE9BQUosR0FBTSxLQUFLLGNBQVksQUFBSSxPQUFKLEdBQU0sS0FBSyxRQUFPLENBQUksT0FBSixLQUFPLEFBQUksT0FBSixNQUFRLEtBQUssV0FBVSxLQUFLLFVBQVEsQUFBTSxPQUFOLEtBQVEsS0FBSyxXQUFTLEFBQU0sT0FBTixLQUFRLEtBQUssWUFBVSxBQUFNLE9BQU4sS0FBUSxLQUFLLGFBQVcsQUFBTSxPQUFOLEtBQVEsS0FBSyxlQUFhLEFBQU0sT0FBTixLQUFRLEtBQUssZ0JBQWMsQUFBTSxPQUFOLEtBQVEsS0FBSyxZQUFVLEFBQU0sT0FBTixLQUFRLEtBQUssV0FBUyxBQUFNLE9BQU4sS0FBUSxLQUFLLHNCQUFvQixBQUFNLE9BQU47QUFBQSxTQUFTLENBQUMsT0FBTSxNQUFLLFFBQU8sT0FBTSxTQUFRLFFBQU8sVUFBUyxRQUFPLG1CQUFrQixhQUFZLFNBQVEsTUFBSyxhQUFZLFdBQVUsVUFBUyxhQUFZLFNBQVEsTUFBSyxPQUFNLE9BQU0sUUFBTyxtQkFBbUIsUUFBUyxTQUFTLElBQUU7QUFBQyxXQUFHLFVBQVUsTUFBRyxXQUFVO0FBQUMsbUJBQVEsS0FBRSxVQUFVLFFBQU8sS0FBRSxJQUFJLE1BQU0sS0FBRyxLQUFFLEdBQUUsS0FBRSxJQUFFO0FBQUksZUFBRSxNQUFHLFVBQVU7QUFBRyxpQkFBTyxLQUFLLFVBQVUsS0FBSyxFQUFDLElBQUcsSUFBRSxNQUFLLE9BQUk7QUFBQTtBQUFBLFVBQVMsR0FBRyxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUMsYUFBSyxVQUFVLFFBQVMsU0FBUyxJQUFFO0FBQUMsYUFBRSxHQUFFLElBQUksTUFBTSxJQUFFLEdBQUcsR0FBRTtBQUFBO0FBQUE7QUFBVyxVQUFJLEtBQUc7QUFBRyxPQUFDLFNBQVMsSUFBRSxJQUFFO0FBQUMsb0JBQVcsSUFBRTtBQUFDLGlCQUFPLEtBQUUsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLEFBQVUsT0FBTyxPQUFPLFlBQXhCLFdBQWlDLFNBQVMsSUFBRTtBQUFDLG1CQUFPLE9BQU87QUFBQSxjQUFHLFNBQVMsSUFBRTtBQUFDLG1CQUFPLE1BQUcsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLEdBQUUsZ0JBQWMsVUFBUSxPQUFJLE9BQU8sWUFBVSxXQUFTLE9BQU87QUFBQSxhQUFHLEdBQUU7QUFBQTtBQUFHLFlBQUk7QUFBRSxRQUFhLE9BQU8sVUFBcEIsY0FBMkIsS0FBRSxTQUFPLEFBQWEsT0FBTyxRQUFwQixjQUEwQixTQUFRLEtBQUssd0VBQXVFLEtBQUUsVUFBUSxLQUFFO0FBQUssWUFBSSxLQUFFLEdBQUcsU0FBUSxLQUFFLElBQUcsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLElBQUcsS0FBRSxJQUFHLEtBQUU7QUFBRyxzQkFBWTtBQUFBO0FBQUUsV0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU0sQUFBWSxPQUFPLE1BQW5CLGFBQXFCLElBQUksR0FBRSxRQUFRLE9BQU0sSUFBRyxJQUFJLE1BQUcsQUFBSSxVQUFVLFdBQWQsSUFBcUIsSUFBSSxHQUFFLFFBQVEsT0FBTSxNQUFHLElBQUksR0FBRSxRQUFRLElBQUU7QUFBQTtBQUFJLFlBQUksS0FBRSxLQUFFLEdBQUU7QUFBUSxXQUFFLFVBQVEsSUFBRSxHQUFFLFNBQU8sV0FBVTtBQUFDLGNBQUcsR0FBRSxrQkFBaUIsRUFBQyxHQUFFLFlBQVUsQUFBVSxHQUFFLFNBQVMsYUFBckIsV0FBK0IsQ0FBQyxHQUFFO0FBQWUsbUJBQU8sSUFBSTtBQUFlLGNBQUc7QUFBQyxtQkFBTyxJQUFJLGNBQWM7QUFBQSxtQkFBMkIsSUFBTjtBQUFBO0FBQVUsY0FBRztBQUFDLG1CQUFPLElBQUksY0FBYztBQUFBLG1CQUE0QixJQUFOO0FBQUE7QUFBVSxjQUFHO0FBQUMsbUJBQU8sSUFBSSxjQUFjO0FBQUEsbUJBQTRCLElBQU47QUFBQTtBQUFVLGNBQUc7QUFBQyxtQkFBTyxJQUFJLGNBQWM7QUFBQSxtQkFBd0IsSUFBTjtBQUFBO0FBQVUsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFBMEQsWUFBSSxLQUFFLEdBQUcsT0FBSyxTQUFTLElBQUU7QUFBQyxpQkFBTyxHQUFFO0FBQUEsWUFBUSxTQUFTLElBQUU7QUFBQyxpQkFBTyxHQUFFLFFBQVEsZ0JBQWU7QUFBQTtBQUFLLG9CQUFXLElBQUU7QUFBQyxjQUFHLENBQUMsR0FBRTtBQUFHLG1CQUFPO0FBQUUsY0FBSSxLQUFFO0FBQUcsbUJBQVEsTUFBSztBQUFFLG1CQUFPLFVBQVUsZUFBZSxLQUFLLElBQUUsT0FBSSxHQUFFLElBQUUsSUFBRSxHQUFFO0FBQUksaUJBQU8sR0FBRSxLQUFLO0FBQUE7QUFBSyxvQkFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUcsQUFBUyxPQUFUO0FBQVcsZ0JBQUcsQUFBTyxPQUFQO0FBQVMsa0JBQUcsTUFBTSxRQUFRO0FBQUcsbUJBQUUsUUFBUyxTQUFTLElBQUU7QUFBQyxxQkFBRSxJQUFFLElBQUU7QUFBQTtBQUFBLHVCQUFjLEdBQUU7QUFBRyx5QkFBUSxNQUFLO0FBQUUseUJBQU8sVUFBVSxlQUFlLEtBQUssSUFBRSxPQUFJLEdBQUUsSUFBRSxHQUFHLE9BQU8sSUFBRSxLQUFLLE9BQU8sSUFBRSxNQUFLLEdBQUU7QUFBQTtBQUFTLG1CQUFFLEtBQUssVUFBVSxNQUFHLE1BQUksbUJBQW1CO0FBQUE7QUFBUyxpQkFBRSxLQUFLLFVBQVU7QUFBQTtBQUFJLG9CQUFXLElBQUU7QUFBQyxtQkFBUSxJQUFFLElBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxNQUFNLE1BQUssS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEtBQUUsSUFBRSxFQUFFO0FBQUUsWUFBTSxNQUFHLE1BQUUsR0FBRSxLQUFJLFFBQVEsVUFBekIsS0FBK0IsR0FBRSxtQkFBbUIsT0FBSSxLQUFHLEdBQUUsbUJBQW1CLEdBQUUsTUFBTSxHQUFFLFFBQUssbUJBQW1CLEdBQUUsTUFBTSxLQUFFO0FBQUksaUJBQU87QUFBQTtBQUFFLG9CQUFXLElBQUU7QUFBQyxpQkFBTSxzQkFBc0IsS0FBSztBQUFBO0FBQUcsb0JBQVcsSUFBRTtBQUFDLGVBQUssTUFBSSxJQUFFLEtBQUssTUFBSSxLQUFLLElBQUksS0FBSSxLQUFLLE9BQUssQUFBUyxLQUFLLElBQUksV0FBbEIsVUFBMkIsQ0FBSyxLQUFLLElBQUksaUJBQWQsTUFBNEIsQUFBUyxLQUFLLElBQUksaUJBQWxCLFdBQWlDLEFBQVMsS0FBSyxJQUFJLGlCQUFsQixTQUErQixLQUFLLElBQUksZUFBYSxNQUFLLEtBQUssYUFBVyxLQUFLLElBQUksSUFBSTtBQUFXLGNBQUksS0FBRSxLQUFLLElBQUk7QUFBTyxVQUFPLE9BQVAsUUFBVyxNQUFFLE1BQUssS0FBSyxxQkFBcUIsS0FBRyxLQUFLLFVBQVEsU0FBUyxJQUFFO0FBQUMscUJBQVEsSUFBRSxJQUFFLElBQUUsSUFBRSxLQUFFLEdBQUUsTUFBTSxVQUFTLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sS0FBRSxJQUFFLEVBQUU7QUFBRSxjQUFNLE1BQUcsTUFBRSxHQUFFLEtBQUksUUFBUSxVQUF6QixNQUFpQyxNQUFFLEdBQUUsTUFBTSxHQUFFLElBQUcsZUFBYyxLQUFFLEdBQUUsR0FBRSxNQUFNLEtBQUUsS0FBSSxHQUFFLE1BQUc7QUFBRyxtQkFBTztBQUFBLFlBQUcsS0FBSyxJQUFJLDBCQUF5QixLQUFLLFNBQU8sS0FBSyxTQUFRLEtBQUssT0FBTyxrQkFBZ0IsS0FBSyxJQUFJLGtCQUFrQixpQkFBZ0IsS0FBSyxxQkFBcUIsS0FBSyxTQUFRLEFBQU8sS0FBSyxTQUFaLFFBQWtCLEdBQUUsZ0JBQWMsS0FBSyxPQUFLLEtBQUssSUFBSSxXQUFTLEtBQUssT0FBSyxBQUFTLEtBQUssSUFBSSxXQUFsQixTQUF5QixPQUFLLEtBQUssV0FBVyxLQUFLLE9BQUssS0FBSyxPQUFLLEtBQUssSUFBSTtBQUFBO0FBQVUsb0JBQVcsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFO0FBQUssZUFBSyxTQUFPLEtBQUssVUFBUSxJQUFHLEtBQUssU0FBTyxJQUFFLEtBQUssTUFBSSxJQUFFLEtBQUssU0FBTyxJQUFHLEtBQUssVUFBUSxJQUFHLEtBQUssR0FBRyxPQUFPLFdBQVU7QUFBQyxnQkFBSSxJQUFFLEtBQUUsTUFBSyxLQUFFO0FBQUssZ0JBQUc7QUFBQyxtQkFBRSxJQUFJLEdBQUU7QUFBQSxxQkFBUyxJQUFOO0FBQVMscUJBQU8sTUFBRSxJQUFJLE1BQU0sMkNBQTJDLFFBQU0sTUFBRyxHQUFFLFdBQVMsSUFBRSxHQUFFLE1BQUssSUFBRSxjQUFZLEFBQVMsR0FBRSxJQUFJLGlCQUFmLFNBQTRCLEdBQUUsSUFBSSxlQUFhLEdBQUUsSUFBSSxVQUFTLEdBQUUsU0FBTyxHQUFFLElBQUksU0FBTyxHQUFFLElBQUksU0FBTyxNQUFLLEdBQUUsYUFBVyxHQUFFLFVBQVMsSUFBRSxjQUFZLE1BQUssR0FBRSxTQUFPLE9BQU0sR0FBRSxTQUFTO0FBQUE7QUFBRyxlQUFFLEtBQUssWUFBVztBQUFHLGdCQUFHO0FBQUMsaUJBQUUsY0FBYyxPQUFLLE1BQUUsSUFBSSxNQUFNLEdBQUUsY0FBWSxHQUFFLFFBQU07QUFBQSxxQkFBcUMsSUFBTjtBQUFTLG1CQUFFO0FBQUE7QUFBRSxpQkFBRyxJQUFFLFdBQVMsSUFBRSxHQUFFLFdBQVMsSUFBRSxHQUFFLFNBQU8sR0FBRSxRQUFPLEdBQUUsU0FBUyxJQUFFLE9BQUksR0FBRSxTQUFTLE1BQUs7QUFBQTtBQUFBO0FBQU0sb0JBQVcsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRSxVQUFTO0FBQUcsaUJBQU0sQUFBWSxPQUFPLE1BQW5CLGNBQXVCLE1BQUUsSUFBRSxLQUFFLE9BQU0sTUFBRyxHQUFFLEtBQUssS0FBRyxNQUFHLEdBQUUsSUFBSSxLQUFHO0FBQUE7QUFBRSxXQUFFLGtCQUFnQixJQUFFLEdBQUUsY0FBWSxJQUFFLEdBQUUsUUFBTSxFQUFDLE1BQUssYUFBWSxNQUFLLG9CQUFtQixLQUFJLFlBQVcsWUFBVyxxQ0FBb0MsTUFBSyxxQ0FBb0MsYUFBWSx1Q0FBcUMsR0FBRSxZQUFVLEVBQUMscUNBQW9DLEdBQUUsV0FBVSxvQkFBbUIsTUFBRyxHQUFFLFFBQU0sRUFBQyxxQ0FBb0MsSUFBRSxvQkFBbUIsS0FBSyxTQUFPLEdBQUUsR0FBRSxZQUFXLEdBQUUsVUFBVSxhQUFXLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLE1BQU0sS0FBSztBQUFNLGlCQUFPLEtBQUssSUFBSSxVQUFRLEtBQUssSUFBSSxRQUFRLE1BQUssTUFBSSxFQUFDLE1BQUcsR0FBRSxLQUFLLFNBQVEsTUFBRSxHQUFFLE1BQU0sc0JBQXFCLE1BQUcsTUFBSSxJQUFFLFNBQU8sS0FBRyxjQUFhLFVBQVEsR0FBRSxNQUFHO0FBQUEsV0FBTyxHQUFFLFVBQVUsVUFBUSxXQUFVO0FBQUMsY0FBSSxLQUFFLEtBQUssS0FBSSxLQUFFLEdBQUUsUUFBTyxLQUFFLEdBQUUsS0FBSSxLQUFFLFVBQVUsT0FBTyxJQUFFLEtBQUssT0FBTyxJQUFFLE1BQU0sT0FBTyxLQUFLLFFBQU8sTUFBSyxLQUFFLElBQUksTUFBTTtBQUFHLGlCQUFPLEdBQUUsU0FBTyxLQUFLLFFBQU8sR0FBRSxTQUFPLElBQUUsR0FBRSxNQUFJLElBQUU7QUFBQSxXQUFHLEdBQUUsV0FBUyxJQUFFLEdBQUUsR0FBRSxZQUFXLEdBQUUsR0FBRSxZQUFXLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEtBQUssSUFBSSxnQkFBZSxHQUFFLE1BQU0sT0FBSSxLQUFHO0FBQUEsV0FBTSxHQUFFLFVBQVUsU0FBTyxTQUFTLElBQUU7QUFBQyxpQkFBTyxLQUFLLElBQUksVUFBUyxHQUFFLE1BQU0sT0FBSSxLQUFHO0FBQUEsV0FBTSxHQUFFLFVBQVUsT0FBSyxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsVUFBSSxVQUFVLFdBQWQsS0FBdUIsTUFBRSxLQUFJLEFBQVcsR0FBRSxRQUFiLFlBQWlCLEFBQU8sT0FBUCxRQUFXLE1BQUUsSUFBRSxLQUFFLEtBQUksTUFBSSxNQUFFLEVBQUMsTUFBSyxBQUFZLE9BQU8sUUFBbkIsYUFBd0IsVUFBUTtBQUFTLGNBQUksS0FBRSxTQUFTLElBQUU7QUFBQyxnQkFBRyxBQUFZLE9BQU8sUUFBbkI7QUFBd0IscUJBQU8sS0FBSztBQUFHLGtCQUFNLElBQUksTUFBTTtBQUFBO0FBQWtELGlCQUFPLEtBQUssTUFBTSxJQUFFLElBQUUsSUFBRTtBQUFBLFdBQUksR0FBRSxVQUFVLFFBQU0sU0FBUyxJQUFFO0FBQUMsaUJBQU0sQUFBVSxPQUFPLE1BQWpCLFlBQXFCLE1BQUUsR0FBRSxNQUFJLE1BQUcsS0FBSyxPQUFPLEtBQUssS0FBRztBQUFBLFdBQU0sR0FBRSxVQUFVLFNBQU8sU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUcsSUFBRTtBQUFDLGdCQUFHLEtBQUs7QUFBTSxvQkFBTSxJQUFJLE1BQU07QUFBOEMsaUJBQUssZUFBZSxPQUFPLElBQUUsSUFBRSxNQUFHLEdBQUU7QUFBQTtBQUFNLGlCQUFPO0FBQUEsV0FBTSxHQUFFLFVBQVUsZUFBYSxXQUFVO0FBQUMsaUJBQU8sS0FBSyxhQUFZLE1BQUssWUFBVSxJQUFJLEdBQUUsYUFBVSxLQUFLO0FBQUEsV0FBVyxHQUFFLFVBQVUsV0FBUyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUcsS0FBSyxhQUFhLElBQUU7QUFBRyxtQkFBTyxLQUFLO0FBQVMsY0FBSSxLQUFFLEtBQUs7QUFBVSxlQUFLLGdCQUFlLE1BQUksTUFBSyxlQUFjLElBQUUsVUFBUSxLQUFLLFdBQVMsSUFBRyxLQUFLLEtBQUssU0FBUSxNQUFJLEdBQUUsSUFBRTtBQUFBLFdBQUksR0FBRSxVQUFVLG1CQUFpQixXQUFVO0FBQUMsY0FBSSxLQUFFLElBQUksTUFBTTtBQUFnSyxhQUFFLGNBQVksTUFBRyxHQUFFLFNBQU8sS0FBSyxRQUFPLEdBQUUsU0FBTyxLQUFLLFFBQU8sR0FBRSxNQUFJLEtBQUssS0FBSSxLQUFLLFNBQVM7QUFBQSxXQUFJLEdBQUUsVUFBVSxRQUFNLFdBQVU7QUFBQyxpQkFBTyxRQUFRLEtBQUssMkRBQTBEO0FBQUEsV0FBTSxHQUFFLFVBQVUsS0FBRyxHQUFFLFVBQVUsT0FBTSxHQUFFLFVBQVUsU0FBTyxHQUFFLFVBQVUsSUFBRyxHQUFFLFVBQVUsUUFBTSxXQUFVO0FBQUMsZ0JBQU0sSUFBSSxNQUFNO0FBQUEsV0FBZ0UsR0FBRSxVQUFVLE9BQUssR0FBRSxVQUFVLE9BQU0sR0FBRSxVQUFVLFVBQVEsU0FBUyxJQUFFO0FBQUMsaUJBQU8sTUFBRyxBQUFXLEdBQUUsUUFBYixZQUFpQixDQUFDLE1BQU0sUUFBUSxPQUFJLEFBQW9CLE9BQU8sVUFBVSxTQUFTLEtBQUssUUFBbkQ7QUFBQSxXQUF1RCxHQUFFLFVBQVUsTUFBSSxTQUFTLElBQUU7QUFBQyxlQUFLLGNBQVksUUFBUSxLQUFLLDBFQUF5RSxLQUFLLGFBQVcsTUFBRyxLQUFLLFlBQVUsTUFBRyxJQUFFLEtBQUssd0JBQXVCLEtBQUs7QUFBQSxXQUFRLEdBQUUsVUFBVSxvQkFBa0IsV0FBVTtBQUFDLGNBQUksS0FBRTtBQUFLLGVBQUssa0JBQWdCLENBQUMsS0FBSyx1QkFBc0IsTUFBSyxzQkFBb0IsV0FBWSxXQUFVO0FBQUMsZUFBRSxjQUFjLHNCQUFxQixHQUFFLGdCQUFlO0FBQUEsYUFBZSxLQUFLO0FBQUEsV0FBa0IsR0FBRSxVQUFVLE9BQUssV0FBVTtBQUFDLGNBQUcsS0FBSztBQUFTLG1CQUFPLEtBQUssU0FBUyxJQUFJLE1BQU07QUFBK0QsY0FBSSxLQUFFO0FBQUssZUFBSyxNQUFJLEdBQUU7QUFBUyxjQUFJLEtBQUUsS0FBSyxLQUFJLEtBQUUsS0FBSyxhQUFXLEtBQUs7QUFBTSxlQUFLLGdCQUFlLEdBQUUscUJBQW1CLFdBQVU7QUFBQyxnQkFBSSxLQUFFLEdBQUU7QUFBVyxnQkFBRyxNQUFHLEtBQUcsR0FBRSx5QkFBdUIsYUFBYSxHQUFFLHdCQUF1QixBQUFJLE9BQUosR0FBTTtBQUFDLGtCQUFJO0FBQUUsa0JBQUc7QUFBQyxxQkFBRSxHQUFFO0FBQUEsdUJBQWEsSUFBTjtBQUFTLHFCQUFFO0FBQUE7QUFBRSxrQkFBRyxDQUFDLElBQUU7QUFBQyxvQkFBRyxHQUFFLFlBQVUsR0FBRTtBQUFTO0FBQU8sdUJBQU8sR0FBRTtBQUFBO0FBQW1CLGlCQUFFLEtBQUs7QUFBQTtBQUFBO0FBQVMsY0FBSSxLQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBRSxRQUFNLEtBQUksSUFBRSxVQUFRLEdBQUUsU0FBTyxHQUFFLFFBQU0sS0FBSSxBQUFNLEdBQUUsWUFBUixPQUFpQixhQUFhLEdBQUUsdUJBQXNCLEdBQUUsWUFBVSxJQUFFLEdBQUUsS0FBSyxZQUFXO0FBQUE7QUFBSSxjQUFHLEtBQUssYUFBYTtBQUFZLGdCQUFHO0FBQUMsaUJBQUUsaUJBQWlCLFlBQVcsR0FBRSxLQUFLLE1BQUssY0FBYSxHQUFFLFVBQVEsR0FBRSxPQUFPLGlCQUFpQixZQUFXLEdBQUUsS0FBSyxNQUFLO0FBQUEscUJBQWlCLElBQU47QUFBQTtBQUFVLGFBQUUsVUFBUSxLQUFLO0FBQW9CLGNBQUc7QUFBQyxpQkFBSyxZQUFVLEtBQUssV0FBUyxHQUFFLEtBQUssS0FBSyxRQUFPLEtBQUssS0FBSSxNQUFHLEtBQUssVUFBUyxLQUFLLFlBQVUsR0FBRSxLQUFLLEtBQUssUUFBTyxLQUFLLEtBQUk7QUFBQSxtQkFBVSxJQUFOO0FBQVMsbUJBQU8sS0FBSyxTQUFTO0FBQUE7QUFBRyxjQUFHLEtBQUssb0JBQW1CLElBQUUsa0JBQWdCLE9BQUksQ0FBQyxLQUFLLGFBQVcsQUFBUSxLQUFLLFdBQWIsU0FBcUIsQUFBUyxLQUFLLFdBQWQsVUFBc0IsQUFBVSxPQUFPLE1BQWpCLFlBQW9CLENBQUMsS0FBSyxRQUFRLEtBQUc7QUFBQyxnQkFBSSxLQUFFLEtBQUssUUFBUSxpQkFBZ0IsS0FBRSxLQUFLLGVBQWEsR0FBRSxVQUFVLEtBQUUsR0FBRSxNQUFNLEtBQUssS0FBRztBQUFJLGFBQUMsTUFBRyxHQUFFLE9BQUssTUFBRSxHQUFFLFVBQVUsc0JBQXFCLE1BQUksTUFBRSxHQUFFO0FBQUE7QUFBSSxtQkFBUSxNQUFLLEtBQUs7QUFBTyxZQUFPLEtBQUssT0FBTyxRQUFuQixRQUF1QixPQUFPLFVBQVUsZUFBZSxLQUFLLEtBQUssUUFBTyxPQUFJLEdBQUUsaUJBQWlCLElBQUUsS0FBSyxPQUFPO0FBQUksZUFBSyxpQkFBZ0IsSUFBRSxlQUFhLEtBQUssZ0JBQWUsS0FBSyxLQUFLLFdBQVUsT0FBTSxHQUFFLEtBQUssQUFBUyxPQUFULFNBQVcsT0FBSztBQUFBLFdBQUksR0FBRSxRQUFNLFdBQVU7QUFBQyxpQkFBTyxJQUFJO0FBQUEsV0FBRyxDQUFDLE9BQU0sUUFBTyxXQUFVLFNBQVEsT0FBTSxVQUFVLFFBQVMsU0FBUyxJQUFFO0FBQUMsYUFBRSxVQUFVLEdBQUUsaUJBQWUsU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBSSxLQUFFLElBQUksR0FBRSxRQUFRLElBQUU7QUFBRyxtQkFBTyxLQUFLLGFBQWEsS0FBRyxNQUFHLEdBQUUsSUFBSSxLQUFHO0FBQUE7QUFBQSxZQUFNLEdBQUUsVUFBVSxNQUFJLEdBQUUsVUFBVSxRQUFPLEdBQUUsTUFBSSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLEdBQUUsT0FBTTtBQUFHLGlCQUFNLEFBQVksT0FBTyxNQUFuQixjQUF1QixNQUFFLElBQUUsS0FBRSxPQUFNLE1BQUcsR0FBRSxNQUFNLEtBQUcsTUFBRyxHQUFFLElBQUksS0FBRztBQUFBLFdBQUcsR0FBRSxPQUFLLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRSxRQUFPO0FBQUcsaUJBQU0sQUFBWSxPQUFPLE1BQW5CLGNBQXVCLE1BQUUsSUFBRSxLQUFFLE9BQU0sTUFBRyxHQUFFLE1BQU0sS0FBRyxNQUFHLEdBQUUsSUFBSSxLQUFHO0FBQUEsV0FBRyxHQUFFLFVBQVEsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLFdBQVU7QUFBRyxpQkFBTSxBQUFZLE9BQU8sTUFBbkIsY0FBdUIsTUFBRSxJQUFFLEtBQUUsT0FBTSxNQUFHLEdBQUUsS0FBSyxLQUFHLE1BQUcsR0FBRSxJQUFJLEtBQUc7QUFBQSxXQUFHLEdBQUUsTUFBSSxJQUFFLEdBQUUsU0FBTyxJQUFFLEdBQUUsUUFBTSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLEdBQUUsU0FBUTtBQUFHLGlCQUFNLEFBQVksT0FBTyxNQUFuQixjQUF1QixNQUFFLElBQUUsS0FBRSxPQUFNLE1BQUcsR0FBRSxLQUFLLEtBQUcsTUFBRyxHQUFFLElBQUksS0FBRztBQUFBLFdBQUcsR0FBRSxPQUFLLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRSxRQUFPO0FBQUcsaUJBQU0sQUFBWSxPQUFPLE1BQW5CLGNBQXVCLE1BQUUsSUFBRSxLQUFFLE9BQU0sTUFBRyxHQUFFLEtBQUssS0FBRyxNQUFHLEdBQUUsSUFBSSxLQUFHO0FBQUEsV0FBRyxHQUFFLE1BQUksU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLE9BQU07QUFBRyxpQkFBTSxBQUFZLE9BQU8sTUFBbkIsY0FBdUIsTUFBRSxJQUFFLEtBQUUsT0FBTSxNQUFHLEdBQUUsS0FBSyxLQUFHLE1BQUcsR0FBRSxJQUFJLEtBQUc7QUFBQTtBQUFBLFFBQUksSUFBRyxHQUFHO0FBQVMsVUFBSSxLQUFHLEdBQUc7QUFBUSxrQkFBWSxJQUFFO0FBQUMsWUFBSSxLQUFHLElBQUksT0FBTSxXQUFVLEtBQUcsSUFBSSxPQUFNLGVBQWMsS0FBRSxXQUFTLFFBQVEsTUFBSSxVQUFRLFVBQVEsT0FBTyxXQUFTLE9BQU8sUUFBUSxNQUFJLE9BQU8sVUFBUTtBQUFRLFdBQUUsSUFBSSxVQUFTLEdBQUUsSUFBSSxJQUFJLE9BQU8sSUFBRSxNQUFLLE1BQUssR0FBRSxLQUFJLE1BQUssR0FBRSxLQUFJLEdBQUUsSUFBSSxVQUFTLEdBQUUsR0FBRyxZQUFZLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRyxJQUFJLE9BQU0sWUFBVSxJQUFFLEtBQUcsSUFBSSxPQUFNO0FBQWMsYUFBRSxJQUFJLFdBQVUsR0FBRSxJQUFJLElBQUksT0FBTyxJQUFFLE9BQU8sT0FBTyxJQUFFLE1BQUssTUFBSyxHQUFFLEtBQUksTUFBSyxHQUFFLElBQUcsTUFBSyxHQUFFLE9BQU0sR0FBRSxJQUFJO0FBQUE7QUFBQTtBQUFZLGtCQUFZLElBQUUsSUFBRSxJQUFFO0FBQUMsWUFBSSxLQUFFO0FBQUssYUFBSyxRQUFRLGdCQUFlLE1BQUUsR0FBRSxJQUFJLE1BQUssS0FBSyxRQUFRLFNBQU8sS0FBSyxTQUFTLFNBQVEsTUFBRSxLQUFLLFNBQVMsTUFBTSxLQUFLLE1BQUssTUFBSSxLQUFLLFFBQVEsYUFBVyxLQUFLLFNBQVMsYUFBWSxNQUFFLEtBQUssU0FBUyxVQUFVO0FBQUksWUFBSSxLQUFFO0FBQUUsWUFBRyxHQUFFO0FBQVksY0FBSSxLQUFFLEdBQUUsWUFBWSxVQUFXLFdBQVU7QUFBQyxlQUFFLFNBQVE7QUFBQTtBQUFPLGVBQU0sQUFBSyxHQUFFLGtCQUFQLE9BQXFCLEtBQUUsQUFBYSxPQUFPLFFBQXBCLGNBQXlCLEdBQUUsU0FBUyxhQUFhLGlCQUFlLEdBQUUsYUFBYSxpQkFBZSxBQUFLLEdBQUUsa0JBQVAsU0FBdUIsTUFBRSxHQUFFLE9BQU8sU0FBTSxNQUFFLEdBQUUsUUFBUSxHQUFFLFVBQVUsR0FBRyxTQUFTLFdBQVU7QUFBQyxpQkFBTyxHQUFFLEVBQUMsVUFBUyxFQUFFLG1CQUFrQixPQUFNLE1BQUcsV0FBVSxHQUFFLFdBQVUsV0FBVSxJQUFJLE1BQU0sY0FBWTtBQUFBLFlBQVMsR0FBRSxJQUFLLFNBQVMsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLEtBQUU7QUFBRyxjQUFHLEdBQUUsUUFBTSxBQUFPLE9BQVAsTUFBUyxHQUFFLFlBQVUsR0FBRSxXQUFVLE1BQUcsR0FBRSxVQUFTLElBQUUsYUFBVyxHQUFFLFNBQVEsSUFBRTtBQUFDLGdCQUFHLEdBQUUsWUFBVSxHQUFFLFNBQVMsUUFBTSxDQUFDLEdBQUUsUUFBUTtBQUFhLGtCQUFHO0FBQUMsbUJBQUUsWUFBVSxLQUFLLE1BQU0sR0FBRSxTQUFTO0FBQUEsdUJBQVksSUFBTjtBQUFTLG1CQUFFLFlBQVU7QUFBQTtBQUFBO0FBQU8saUJBQUUsWUFBVTtBQUFFLG1CQUFPLEdBQUUsV0FBUyxHQUFFLHFCQUFxQixLQUFHLEdBQUUsSUFBRTtBQUFBO0FBQU0sY0FBRyxHQUFFO0FBQVcsaUJBQUUsRUFBQyxTQUFRLEdBQUUsU0FBUSxXQUFVLEdBQUUsV0FBVSxVQUFTO0FBQUE7QUFBUSxnQkFBRztBQUFDLG1CQUFFLEtBQUssTUFBTSxHQUFFO0FBQUEscUJBQVksSUFBTjtBQUFTLHFCQUFPLEdBQUUsWUFBVSxJQUFFLEdBQUUsUUFBTSxNQUFHLEdBQUUsSUFBRTtBQUFBO0FBQU0saUJBQU8sR0FBRSxTQUFPLEFBQUksR0FBRSxVQUFOLEtBQWEsR0FBRSxVQUFRLEdBQUUsV0FBUyxHQUFFLFVBQVMsSUFBRSxZQUFVLElBQUUsR0FBRSxhQUFXLEdBQUUsUUFBTyxHQUFFLFFBQU0sTUFBRyxHQUFFLFdBQVMsR0FBRSxxQkFBcUIsS0FBRyxHQUFFLElBQUUsU0FBUSxJQUFFLFNBQU8sR0FBRSxNQUFNLFdBQVUsSUFBRSxZQUFVLEdBQUUsUUFBTyxHQUFFLElBQUU7QUFBQSxZQUFPO0FBQUE7QUFBRSxrQkFBWSxJQUFFLElBQUUsSUFBRTtBQUFDLGVBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsY0FBSTtBQUFFLGlCQUFPLEVBQUUsTUFBTSxTQUFTLElBQUU7QUFBQyxvQkFBTyxHQUFFO0FBQUEsbUJBQVk7QUFBRSx1QkFBTyxLQUFFLEdBQUcsS0FBSyxLQUFHLEdBQUUsUUFBUyxTQUFTLElBQUU7QUFBQyxzQkFBSSxLQUFFLEdBQUUsS0FBSSxLQUFFLEdBQUU7QUFBTSx1QkFBRSxHQUFFLE1BQU0sSUFBRTtBQUFBLG9CQUFNLEdBQUUsT0FBTyxRQUFPLElBQUUsRUFBQyxhQUFZLCtCQUE2QixDQUFDLEdBQUU7QUFBQSxtQkFBUTtBQUFFLHVCQUFNLENBQUMsR0FBRSxHQUFFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBZSxrQkFBWSxJQUFFLElBQUUsSUFBRTtBQUFDLFlBQUksS0FBRSxHQUFHLElBQUksS0FBSyxzQkFBb0IsR0FBRSxLQUFLLElBQUksR0FBRSxTQUFTLE1BQU07QUFBRyxlQUFPLEdBQUcsS0FBSyxNQUFLLElBQUUsSUFBRTtBQUFBO0FBQUcsa0JBQVksSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRyxJQUFJLEtBQUssc0JBQW9CLEdBQUUsS0FBSyxJQUFJLEdBQUUsU0FBUyxNQUFNO0FBQUcsZUFBTyxHQUFHLEtBQUssTUFBSyxJQUFFLElBQUU7QUFBQTtBQUFHLGtCQUFZLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRyxLQUFLLEtBQUssc0JBQW9CLEdBQUUsS0FBSyxNQUFNLElBQUcsSUFBSSxHQUFFLFNBQVMsS0FBSztBQUFHLGVBQU8sR0FBRyxLQUFLLE1BQUssSUFBRSxJQUFFO0FBQUE7QUFBRyxrQkFBWSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsWUFBSSxLQUFFLEdBQUcsTUFBTSxLQUFLLHNCQUFvQixHQUFFLEtBQUssTUFBTSxJQUFHLElBQUksR0FBRSxTQUFTLEtBQUs7QUFBRyxlQUFPLEdBQUcsS0FBSyxNQUFLLElBQUUsSUFBRTtBQUFBO0FBQUcsa0JBQVksSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRyxPQUFPLEtBQUssc0JBQW9CLEdBQUUsS0FBSyxJQUFJLEdBQUUsU0FBUyxNQUFNO0FBQUcsZUFBTyxHQUFHLEtBQUssTUFBSyxJQUFFLElBQUU7QUFBQTtBQUFHLGtCQUFZLElBQUUsSUFBRTtBQUFDLFlBQUksS0FBRSxJQUFJLFdBQVcsR0FBRSxhQUFXLEdBQUU7QUFBWSxlQUFPLEdBQUUsSUFBSSxJQUFJLFdBQVcsS0FBRyxJQUFHLEdBQUUsSUFBSSxJQUFJLFdBQVcsS0FBRyxHQUFFLGFBQVksR0FBRTtBQUFBO0FBQU8sVUFBSSxJQUFHLEtBQUcsV0FBVTtBQUFDLHNCQUFZO0FBQUE7QUFBRSxlQUFPLE9BQU8sZUFBZSxHQUFFLFdBQVUsUUFBTyxFQUFDLEtBQUksV0FBVTtBQUFDLGlCQUFNO0FBQUEsV0FBZSxZQUFXLE9BQUcsY0FBYSxTQUFLLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxFQUFFLE1BQU0sU0FBUyxJQUFFO0FBQUMsc0JBQU8sR0FBRTtBQUFBLHFCQUFZO0FBQUUseUJBQU0sQ0FBQyxHQUFFLEtBQUssT0FBTztBQUFBLHFCQUFTO0FBQUUsc0JBQUcsS0FBRSxHQUFFLFFBQU8sY0FBYTtBQUFZLDJCQUFNLENBQUMsR0FBRSxLQUFLLG1CQUFtQixJQUFFO0FBQUksc0JBQUcsQUFBVSxPQUFPLE1BQWpCO0FBQW1CLDJCQUFNLENBQUMsR0FBRSxLQUFLLGNBQWMsSUFBRTtBQUFJLHdCQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQXFHLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxFQUFFLE1BQU0sU0FBUyxJQUFFO0FBQUMsc0JBQU8sR0FBRTtBQUFBLHFCQUFZO0FBQUUseUJBQU0sQ0FBQyxHQUFFLEtBQUssT0FBTztBQUFBLHFCQUFTO0FBQUUsc0JBQUcsS0FBRSxHQUFFLFFBQU8sY0FBYTtBQUFZLDJCQUFNLENBQUMsR0FBRSxLQUFLLG1CQUFtQixJQUFFO0FBQUksc0JBQUcsQUFBVSxPQUFPLE1BQWpCO0FBQW1CLDJCQUFNLENBQUMsR0FBRSxLQUFLLGNBQWMsSUFBRTtBQUFJLHdCQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQXFHLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLE1BQUssUUFBTyxRQUFRLFdBQVU7QUFBQyxnQkFBSSxJQUFFLElBQUU7QUFBRSxtQkFBTyxFQUFFLE1BQU0sU0FBUyxJQUFFO0FBQUMsc0JBQU8sR0FBRTtBQUFBLHFCQUFZO0FBQUUseUJBQU0sQ0FBQyxHQUFFLEtBQUssT0FBTztBQUFBLHFCQUFTO0FBQUUseUJBQU8sS0FBRSxHQUFFLFFBQU8sQ0FBQyxHQUFFLEdBQUU7QUFBQSxxQkFBc0I7QUFBRSx5QkFBTyxLQUFFLEdBQUUsUUFBTyxDQUFDLEdBQUUsS0FBSyxtQkFBbUIsSUFBRTtBQUFBLHFCQUFTO0FBQUUseUJBQU8sS0FBRSxHQUFFLFFBQU8sQ0FBQyxHQUFFLEdBQUUsT0FBTyxFQUFDLE1BQUssR0FBRSxNQUFLLFVBQVMsNEJBQTJCLE1BQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFhLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLE1BQUssUUFBTyxRQUFRLFdBQVU7QUFBQyxnQkFBSSxJQUFFLElBQUU7QUFBRSxtQkFBTyxFQUFFLE1BQU0sU0FBUyxJQUFFO0FBQUMsc0JBQU8sR0FBRTtBQUFBLHFCQUFZO0FBQUUseUJBQU0sQ0FBQyxHQUFFLEtBQUssT0FBTztBQUFBLHFCQUFTO0FBQUUseUJBQU8sS0FBRSxHQUFFLFFBQU8sQ0FBQyxHQUFFLEdBQUU7QUFBQSxxQkFBc0I7QUFBRSx5QkFBTyxLQUFFLEdBQUUsUUFBTyxDQUFDLEdBQUUsS0FBSyxtQkFBbUIsSUFBRTtBQUFBLHFCQUFTO0FBQUUseUJBQU8sS0FBRSxHQUFFLFFBQU8sQ0FBQyxHQUFFLEdBQUUsT0FBTyxFQUFDLE1BQUssR0FBRSxNQUFLLE1BQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFhLEdBQUUsVUFBVSxTQUFPLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBSyxRQUFPLFFBQVEsV0FBVTtBQUFDLGdCQUFJLElBQUUsSUFBRTtBQUFFLG1CQUFPLEVBQUUsTUFBTSxTQUFTLElBQUU7QUFBQyxzQkFBTyxHQUFFO0FBQUEscUJBQVk7QUFBRSx5QkFBTyxLQUFFLE9BQU8sS0FBSyxLQUFHLENBQUMsR0FBRSxPQUFPLE9BQU8sT0FBTyxXQUFVLEdBQUU7QUFBQSxxQkFBYztBQUFFLHlCQUFPLEtBQUUsR0FBRSxRQUFPLEtBQUUsT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFHLFNBQVMsT0FBTyxNQUFNLEdBQUUsS0FBSSxRQUFRLFFBQU8sQ0FBQyxHQUFFLE9BQU8sT0FBTyxVQUFVLE9BQU0sSUFBRSxXQUFVLE1BQUcsQ0FBQyxXQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FBcUIsR0FBRSxVQUFVLHFCQUFtQixTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBSyxRQUFPLFFBQVEsV0FBVTtBQUFDLGdCQUFJLElBQUUsSUFBRTtBQUFFLG1CQUFPLEVBQUUsTUFBTSxTQUFTLElBQUU7QUFBQyxzQkFBTyxHQUFFO0FBQUEscUJBQVk7QUFBRSx5QkFBTyxLQUFFLE9BQU8sZ0JBQWdCLElBQUksV0FBVyxNQUFLLEtBQUUsSUFBRyxLQUFFLENBQUMsR0FBRSxTQUFRLENBQUMsR0FBRSxPQUFPLE9BQU8sUUFBUSxFQUFDLE1BQUssV0FBVSxJQUFHLE1BQUcsSUFBRTtBQUFBLHFCQUFTO0FBQUUseUJBQU0sQ0FBQyxHQUFFLEdBQUUsTUFBTSxRQUFPLEdBQUUsT0FBTyxDQUFDLEdBQUU7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFtQixHQUFFLFVBQVUscUJBQW1CLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxFQUFFLE1BQU0sU0FBUyxJQUFFO0FBQUMscUJBQU8sS0FBRSxHQUFFLE1BQU0sR0FBRSxLQUFJLENBQUMsR0FBRSxPQUFPLE9BQU8sUUFBUSxFQUFDLE1BQUssV0FBVSxJQUFHLE1BQUcsSUFBRSxHQUFFLE1BQU07QUFBQTtBQUFBO0FBQUEsV0FBYSxHQUFFLFVBQVUsZ0JBQWMsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLE1BQUssUUFBTyxRQUFRLFdBQVU7QUFBQyxnQkFBSSxJQUFFLElBQUUsSUFBRTtBQUFFLG1CQUFPLEVBQUUsTUFBTSxTQUFTLElBQUU7QUFBQyxzQkFBTyxHQUFFO0FBQUEscUJBQVk7QUFBRSx5QkFBTyxLQUFFLE9BQU8sZ0JBQWdCLElBQUksV0FBVyxNQUFLLEtBQUUsT0FBTyxLQUFLLElBQUcsUUFBTyxDQUFDLEdBQUUsT0FBTyxPQUFPLFFBQVEsRUFBQyxNQUFLLFdBQVUsSUFBRyxNQUFHLElBQUU7QUFBQSxxQkFBUztBQUFFLHlCQUFPLEtBQUUsR0FBRSxRQUFPLEtBQUUsR0FBRyxHQUFFLFFBQU8sS0FBRyxDQUFDLEdBQUUsT0FBTyxLQUFLLElBQUcsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQWlCLEdBQUUsVUFBVSxnQkFBYyxTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBSyxRQUFPLFFBQVEsV0FBVTtBQUFDLGdCQUFJLElBQUUsSUFBRSxJQUFFO0FBQUUsbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLHNCQUFPLEdBQUU7QUFBQSxxQkFBWTtBQUFFLHlCQUFPLEtBQUUsT0FBTyxLQUFLLEtBQUcsS0FBRSxHQUFFLE1BQU0sR0FBRSxLQUFJLEtBQUUsR0FBRSxNQUFNLEtBQUksQ0FBQyxHQUFFLE9BQU8sT0FBTyxRQUFRLEVBQUMsTUFBSyxXQUFVLElBQUcsTUFBRyxJQUFFO0FBQUEscUJBQVM7QUFBRSx5QkFBTyxLQUFFLEdBQUUsUUFBTyxDQUFDLEdBQUUsT0FBTyxLQUFLLElBQUcsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQWlCLEdBQUUsWUFBVSxJQUFHO0FBQUEsV0FBSyxLQUFJLE1BQUcsV0FBVTtBQUFDLG9CQUFXLElBQUU7QUFBQyxjQUFHLGNBQWE7QUFBSyxpQkFBSyxPQUFLLElBQUUsS0FBSyxPQUFLLEtBQUssS0FBSyxNQUFLLEtBQUssV0FBUyxLQUFLLEtBQUs7QUFBQSxtQkFBYSxHQUFFLE1BQUs7QUFBQyxnQkFBSSxLQUFFLEdBQUU7QUFBSyxpQkFBSyxPQUFLLElBQUksS0FBSyxDQUFDLEtBQUcsR0FBRSxNQUFLLEVBQUMsTUFBSyxHQUFFLGFBQVcsS0FBSyxPQUFLLEdBQUUsTUFBSyxHQUFFLFlBQVcsTUFBSyxXQUFTLEdBQUU7QUFBQTtBQUFVLGNBQUcsQUFBUyxLQUFLLFNBQWQ7QUFBbUIsa0JBQU0sSUFBSSxNQUFNO0FBQXNELGNBQUcsQUFBUyxLQUFLLFNBQWQ7QUFBbUIsa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFBbUUsZUFBTyxHQUFFLFNBQU8sU0FBUyxJQUFFO0FBQUMsaUJBQU8sSUFBSSxLQUFLO0FBQUEsV0FBSSxHQUFFLFVBQVUsV0FBUyxXQUFVO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLG9CQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQSxXQUFrRSxHQUFFLFVBQVUsV0FBUyxXQUFVO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLG9CQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQSxXQUFrRSxHQUFFLFVBQVUsWUFBVSxXQUFVO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLG9CQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQSxXQUF1RSxHQUFFLFVBQVUsU0FBTyxXQUFVO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLHFCQUFNLENBQUMsR0FBRSxLQUFLO0FBQUE7QUFBQTtBQUFBLFdBQWEsR0FBRSxVQUFVLGdCQUFjLFdBQVU7QUFBQyxpQkFBTyxFQUFFLE1BQUssUUFBTyxRQUFRLFdBQVU7QUFBQyxnQkFBSSxLQUFFO0FBQUssbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLHFCQUFNLENBQUMsR0FBRSxJQUFJLFFBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxvQkFBSSxLQUFFLElBQUk7QUFBVyxtQkFBRSxpQkFBaUIsUUFBUSxXQUFVO0FBQUMsc0JBQUcsR0FBRSxrQkFBa0I7QUFBWSwyQkFBTyxHQUFFLEdBQUU7QUFBQSxvQkFBVyxHQUFFLGlCQUFpQixTQUFTLFdBQVU7QUFBQyxxQkFBRSxHQUFFO0FBQUEsb0JBQVUsR0FBRSxrQkFBa0IsR0FBRTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQWlCLEdBQUUsVUFBVSxXQUFTLFdBQVU7QUFBQyxpQkFBTyxFQUFFLE1BQUssUUFBTyxRQUFRLFdBQVU7QUFBQyxnQkFBSSxLQUFFO0FBQUssbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLHFCQUFNLENBQUMsR0FBRSxJQUFJLFFBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxvQkFBSSxLQUFFLElBQUk7QUFBVyxtQkFBRSxpQkFBaUIsUUFBUSxXQUFVO0FBQUMsc0JBQUcsQUFBVSxPQUFPLEdBQUUsVUFBbkI7QUFBMEIsMkJBQU8sR0FBRSxHQUFFO0FBQUEsb0JBQVcsR0FBRSxpQkFBaUIsU0FBUyxXQUFVO0FBQUMscUJBQUUsR0FBRTtBQUFBLG9CQUFVLEdBQUUsbUJBQW1CLEdBQUU7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFpQixHQUFFLFVBQVUsU0FBTyxXQUFVO0FBQUMsaUJBQU8sRUFBRSxNQUFLLFFBQU8sUUFBUSxXQUFVO0FBQUMsbUJBQU8sRUFBRSxNQUFNLFNBQVMsSUFBRTtBQUFDLHFCQUFNLENBQUMsR0FBRSxLQUFLO0FBQUE7QUFBQTtBQUFBLFdBQWE7QUFBQSxXQUFLLEdBQUcsZUFBYSxBQUFhLE9BQU8sUUFBcEIsYUFBeUIsR0FBRyxlQUFhLEFBQWEsT0FBTyxRQUFwQixhQUF5QixHQUFHLHNCQUFvQixBQUFhLE9BQU8sZUFBcEIsYUFBZ0MsR0FBRyxpQkFBZSxPQUFHLEdBQUcsaUJBQWUsT0FBRyxHQUFHLGlCQUFlLE1BQUcsR0FBRyxzQkFBb0IsTUFBRyxHQUFHLGtCQUFnQixPQUFHO0FBQUksa0JBQVksSUFBRTtBQUFDLFlBQUcsQ0FBQyxhQUFXLENBQUMsVUFBVTtBQUFXLGlCQUFNO0FBQUcsa0JBQVUsV0FBVztBQUFBO0FBQUcsa0JBQVksSUFBRTtBQUFDLGlCQUFRLEtBQUUsRUFBRSxJQUFJLE9BQU8sTUFBTSxJQUFHLE9BQU0sS0FBRSxJQUFJLFlBQVksSUFBRSxHQUFFLFNBQVEsS0FBRSxJQUFJLFdBQVcsS0FBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxNQUFHLEdBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRTtBQUFHLGFBQUUsS0FBRSxJQUFFLE1BQUksY0FBVyxPQUFJLElBQUcsR0FBRSxLQUFFLEtBQUksWUFBUyxPQUFJLElBQUcsR0FBRSxLQUFFLEtBQUksU0FBTSxPQUFJLEdBQUUsR0FBRSxLQUFFLEtBQUcsTUFBSTtBQUFBO0FBQUUsaUJBQVEsS0FBRSxLQUFFLEdBQUUsTUFBRyxJQUFFLE1BQUc7QUFBRSxVQUFJLEdBQUUsUUFBTixLQUFVLEtBQUUsS0FBSSxPQUFHO0FBQUcsZUFBTyxLQUFFLElBQUUsR0FBRSxPQUFPLE1BQU0sR0FBRSxHQUFFLGFBQVcsTUFBRyxHQUFFO0FBQUE7QUFBTyxrQkFBWSxJQUFFO0FBQUMsWUFBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLGlCQUFPLE1BQUcsQUFBVSxPQUFPLE1BQWpCLFlBQW9CLEdBQUUsZ0JBQWM7QUFBQTtBQUFRLFlBQUcsQ0FBQyxHQUFFO0FBQUcsaUJBQU87QUFBRSxZQUFJLEtBQUU7QUFBRyxlQUFPLE9BQU8sS0FBSyxJQUFHLFFBQVMsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLG1CQUFNLEFBQVUsT0FBTyxNQUFqQixZQUFvQixjQUFhO0FBQUEsWUFBUSxLQUFHLEtBQUUsSUFBRSxLQUFFLEdBQUU7QUFBRyxnQkFBTSxRQUFRLE9BQUksTUFBRyxHQUFFLFFBQVEsUUFBTSxJQUFFLEtBQUcsTUFBRSxHQUFFLE1BQU0sT0FBSyxJQUFHLE9BQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLE9BQU8sYUFBYTtBQUFBLGFBQUssTUFBSyxVQUFTLElBQUU7QUFBQyxtQkFBTSxBQUFVLE9BQU8sTUFBakIsWUFBb0IsU0FBUztBQUFBLFlBQUksT0FBSSxNQUFHLENBQUMsTUFBTSxRQUFNLE1BQUUsT0FBTyxhQUFhLEtBQUUsU0FBUyxJQUFFLE1BQUk7QUFBSyxhQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUcsTUFBRztBQUFBLFlBQUs7QUFBQTtBQUFFLFVBQUksS0FBRyxTQUFTLElBQUU7QUFBQyxvQkFBVyxJQUFFO0FBQUMsY0FBSSxLQUFFLE1BQUssS0FBRSxHQUFFLDhCQUE2QixLQUFFLEFBQVMsT0FBVCxVQUFZO0FBQUUsaUJBQU8sR0FBRSxZQUFVLE9BQU0sR0FBRSxhQUFXLElBQUksR0FBRyxFQUFDLEtBQUksSUFBRyxLQUFJLElBQUcsTUFBSyxJQUFHLE9BQU0sSUFBRyxZQUFXLElBQUcsU0FBUSxJQUFHLFVBQVMsT0FBSyxHQUFFLE9BQUssSUFBSSxHQUFJLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEdBQUcsRUFBRSxPQUFPO0FBQUEsYUFBTSxLQUFJLEdBQUUsYUFBVyxJQUFHLEdBQUUsZUFBYSxJQUFJLE1BQUcsS0FBRSxHQUFFLEtBQUssTUFBSyxPQUFJLE1BQUssTUFBSSxRQUFPLGlCQUFpQixXQUFXLFdBQVU7QUFBQyxlQUFFO0FBQUEsY0FBeUIsT0FBTyxpQkFBaUIsVUFBVSxXQUFVO0FBQUMsZUFBRTtBQUFBLGVBQXdCO0FBQUE7QUFBRSxlQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsUUFBRztBQUFJLGFBQU87QUFBQTtBQUFBO0FBQUE7OztBQ2hCMzM0SztBQUFBO0FBQUE7QUFFQSxzQkFBNEY7QUFDNUYsSUFBTSxTQUFTO0FBSWYsSUFBSSxTQUFTLElBQUksT0FBTztBQUFBLEVBQ3BCLFlBQVk7QUFBQSxFQUNaLGNBQWM7QUFBQSxFQUNkLE1BQU07QUFBQTtBQU9WLElBQU0sbUJBQXFDO0FBQUEsRUFDMUMsU0FBUztBQUFBO0FBR1YsNkJBQXNDLHVCQUFPO0FBQUEsRUFHdEMsU0FBUztBQUFBO0FBQ2QsWUFBTSxLQUFLO0FBZVgsV0FBSyxXQUFXO0FBQUEsUUFDZixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixVQUFVLE1BQU0sWUFBWSxLQUFLLFNBQVM7QUFBQTtBQUczQyxXQUFLLFdBQVc7QUFBQSxRQUNmLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLFVBQVUsTUFBTTtBQUFBO0FBR2pCLFdBQUssV0FBVztBQUFBLFFBQ2YsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sVUFBVSxNQUFNO0FBQUE7QUFJakIsV0FBSyxjQUFjLElBQUksaUJBQWlCLEtBQUssS0FBSztBQUlsRCxXQUFLLGlCQUFpQixVQUFVLFNBQVMsQ0FBQyxRQUFvQjtBQUM3RCxnQkFBUSxJQUFJLFNBQVM7QUFBQTtBQUl0QixXQUFLLGlCQUFpQixPQUFPLFlBQVksTUFBTSxRQUFRLElBQUksZ0JBQWdCLElBQUksS0FBSztBQUFBO0FBQUE7QUFBQSxFQUdyRixXQUFXO0FBQUE7QUFBQSxFQUlMLGVBQWU7QUFBQTtBQUNwQixXQUFLLFdBQVcsT0FBTyxPQUFPLElBQUksa0JBQWtCLE1BQU0sS0FBSztBQUFBO0FBQUE7QUFBQSxFQUcxRCxlQUFlO0FBQUE7QUFDcEIsWUFBTSxLQUFLLFNBQVMsS0FBSztBQUFBO0FBQUE7QUFBQTtBQW9CM0IscUNBQStCLGlDQUFpQjtBQUFBLEVBRy9DLFlBQVksS0FBVSxRQUFrQjtBQUN2QyxVQUFNLEtBQUs7QUFDWCxTQUFLLFNBQVM7QUFBQTtBQUFBLEVBR2YsVUFBZ0I7QUFDZixVQUFNLEVBQUMsZ0JBQWU7QUFFdEIsZ0JBQVk7QUFFWixnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNO0FBRWxDLFFBQUksYUFBYSxJQUFJLHdCQUFRLGFBQzNCLFFBQVEsWUFDUixRQUFRLCtEQUVSLFVBQVUsWUFBVSxPQUNuQixjQUFjLGdCQUNkLFFBQVEsQ0FBTSxRQUFPO0FBQ3JCLFdBQUssT0FBTyxTQUFTLFVBQVU7QUFDL0IsVUFBSSx1QkFBTztBQUNYLFlBQU0sS0FBSyxPQUFPO0FBQUEsU0FHbkIsVUFBVSxZQUFVLE9BQ25CLGNBQWMsUUFDZCxRQUFRLFNBQU8sZ0JBRWhCLFVBQVUsWUFBVSxPQUNuQixjQUFjLGlCQUNkLFFBQVEsU0FBTyxPQUVQLFVBQVUsWUFBVSxPQUNoQixjQUFjLGFBQ2QsUUFBUSxDQUFNLFFBQUk7QUFBRyxrQkFBSyxPQUFPLFNBQVMsVUFBVSxNQUFNLFVBQVUsVUFBVTtBQUFBO0FBQUE7QUFBQTtBQU8vRixxQkFBcUIsU0FBaUI7QUFDbEMsU0FBTyxPQUFPO0FBQUE7QUFTbEIsdUJBQXVCO0FBQ25CLFlBQVUsVUFBVSxVQUFVLEtBQUssT0FBTyxTQUFTLFNBQVMsS0FBSyxPQUFLO0FBQ3RFLE1BQUksdUJBQU8sS0FBSyxPQUFPLFNBQVMsWUFBWSxPQUFPLHFCQUFxQjtBQUFBO0FBRzVFLGtCQUFrQjtBQUVqQixTQUFRLEVBQUMsT0FBSyxPQUFLLE9BQUssT0FBSyxPQUFPLFFBQVEsVUFBVSxPQUNwRCxLQUFJLE9BQU8sZ0JBQWdCLElBQUksV0FBVyxJQUFJLEtBQUssTUFBTSxJQUFJLEdBQUcsU0FBUztBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
